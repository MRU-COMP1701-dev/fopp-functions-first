<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <runestone-services version="7.0.0dev3"/>
  <library-metadata publisher="pretext">
    <title>Foundations of Python Programming</title>
    <subtitle>Functions First</subtitle>
    <document-id edition="1">foppff</document-id>
    <shelf>Intro to Computer Science Textbooks</shelf>
    <blurb>
    An adpatation of Foundations of Python Programming with functions introduced before conditionals and loops. This version de-emphasizes Python-specific syntax to focus on procedural programming fundamentals.
    </blurb>
  </library-metadata>
  <latex-macros>

\newcommand{\lt}{&lt;}
\newcommand{\gt}{&gt;}
\newcommand{\amp}{&amp;}
</latex-macros>
  <subchapter>
    <id>front-back-matter_foreword</id>
    <title>Foreword to the Functions First Edition</title>
  </subchapter>
  <subchapter>
    <id>front-back-matter_foreword_og</id>
    <title>Original Foreword</title>
  </subchapter>
  <chapter>
    <id>chapter-1</id>
    <title>General Introduction</title>
    <subchapter>
      <id>general-intro_introduction-the-way-of-the-program</id>
      <title>The Way of the Program</title>
    </subchapter>
    <subchapter>
      <id>general-intro_algorithms</id>
      <title>Algorithms</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac_1_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac_1_2_1_editor" data-question_label="" data-codelens="true">side_a = int(input("Enter the length of the first side:"))
side_b = int(input("Enter the length of the second side:"))
hypotenuse = (side_a**2 + side_b**2)**(1/2)
print("The hypotenuse of that triangle is:", hypotenuse)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 1.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_2_1" data-multipleanswers="false">
                <div class="para" id="p-135">An algorithm is:</div>
                <li data-component="answer" id="foppff_1_question1_2_1_opt_a">
                  <div class="para" id="p-136">A solution to a problem that can be solved by a computer.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_2_1_opt_a">
                  <div class="para" id="p-137">While it is true that algorithms often do solve problems, this is not the best answer.  An algorithm is more than just the solution to the problem for a computer.  An algorithm can be used to solve all sorts of problems, including those that have nothing to do with computers.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_2_1_opt_b" data-correct="">
                  <div class="para" id="p-138">A step by step sequence of instructions that if followed exactly will solve the problem under consideration.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_2_1_opt_b">
                  <div class="para" id="p-139">Algorithms are like recipes:  they must be followed exactly, they must be clear and unambiguous, and they must end.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_2_1_opt_c">
                  <div class="para" id="p-140">A series of instructions implemented in a programming language.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_2_1_opt_c">
                  <div class="para" id="p-141">Programming languages are used to express algorithms, but an algorithm does not have to be expressed in terms of a programming language.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_2_1_opt_d">
                  <div class="para" id="p-142">A special kind of notation used by programmers.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_2_1_opt_d">
                  <div class="para" id="p-143">Programmers sometimes use a special notation to illustrate or document an algorithm, but this is not the definition of an algorithm.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>general-intro_the-python-programming-language</id>
      <title>The Python Programming Language</title>
      <question>
        <label>Checkpoint 1.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_3_1" data-multipleanswers="false">
                <div class="para" id="p-156">Source code is another name for:</div>
                <li data-component="answer" id="foppff_1_question1_3_1_opt_a" data-correct="">
                  <div class="para" id="p-157">the instructions in a program, written in a high-level language.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_3_1_opt_a">
                  <div class="para" id="p-158">If the instructions are strored in a file, it is called the source code file.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_3_1_opt_b">
                  <div class="para" id="p-159">the language that you are programming in (e.g., Python).</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_3_1_opt_b">
                  <div class="para" id="p-160">This language is simply called the programming language, or simply the language. Programs are writte in this language.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_3_1_opt_c">
                  <div class="para" id="p-161">the environment/tool in which you are programming.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_3_1_opt_c">
                  <div class="para" id="p-162">The environment may be called the IDE, or integrated development environment, though not always.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_3_1_opt_d">
                  <div class="para" id="p-163">the number (or “code”) that you must input at the top of each program to tell the computer how to execute your program.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_3_1_opt_d">
                  <div class="para" id="p-164">There is no such number that you must type in at the start of your program.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 1.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_3_2" data-multipleanswers="false">
                <div class="para" id="p-165">What is the difference between a high-level programming language and a low-level programming language?</div>
                <li data-component="answer" id="foppff_1_question1_3_2_opt_a">
                  <div class="para" id="p-166">It is high-level if you are standing and low-level if you are sitting.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_3_2_opt_a">
                  <div class="para" id="p-167">In this case high and low have nothing to do with altitude.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_3_2_opt_b">
                  <div class="para" id="p-168">It is high-level if you are programming for a computer and low-level if you are programming for a phone or mobile device.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_3_2_opt_b">
                  <div class="para" id="p-169">High and low have nothing to do with the type of device you are programming for.  Instead, look at what it takes to run the program written in the language.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_3_2_opt_c" data-correct="">
                  <div class="para" id="p-170">It is high-level if the program must be processed before it can run, and low-level if the computer can execute it without additional processing.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_3_2_opt_c">
                  <div class="para" id="p-171">Python is a high level language but must be interpreted into machine code (binary) before it can be executed.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_3_2_opt_d">
                  <div class="para" id="p-172">It is high-level if it easy to program in and is very short; it is low-level if it is really hard to program in and the programs are really long.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_3_2_opt_d">
                  <div class="para" id="p-173">While it is true that it is generally easier to program in a high-level language and programs written in a high-level language are usually shorter, this is not always the case.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 1.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_3_3" data-multipleanswers="false"><div class="para" id="p-174">Pick the best replacements for <span class="process-math">\(1\)</span> and <span class="process-math">\(2\)</span> in the following sentence:</div> <div class="para" id="p-175">When comparing compilers and interpreters, a compiler is like <span class="process-math">\(1\)</span> while an interpreter is like <span class="process-math">\(2\text{.}\)</span></div><li data-component="answer" id="foppff_1_question1_3_3_opt_a"><div class="para" id="p-176">1 = pseudocode, 2 = an algorithm</div></li><li data-component="feedback" id="foppff_1_question1_3_3_opt_a"><div class="para" id="p-177">Both compiling and interpreting are processes that convert a program into code that can be understood by a computer. Who is the audience for pseudocode and algorithms? Humans.</div></li><li data-component="answer" id="foppff_1_question1_3_3_opt_b" data-correct=""><div class="para" id="p-178">1 = translating an entire book, 2 = translating a line at a time</div></li><li data-component="feedback" id="foppff_1_question1_3_3_opt_b"><div class="para" id="p-179">Compilers take the entire source code and produce object code or the executable and interpreters execute the code line by line.</div></li><li data-component="answer" id="foppff_1_question1_3_3_opt_c"><div class="para" id="p-180">1 = software, 2 = hardware</div></li><li data-component="feedback" id="foppff_1_question1_3_3_opt_c"><div class="para" id="p-181">Both compilers and interpreters are software.</div></li><li data-component="answer" id="foppff_1_question1_3_3_opt_d"><div class="para" id="p-182">1 = object code, 2 = byte code</div></li><li data-component="feedback" id="foppff_1_question1_3_3_opt_d"><div class="para" id="p-183">Compilers can produce object code or byte code depending on the language.  An interpreter produces neither.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>general-intro_special-ways-to-execute-python-in-this-book</id>
      <title>Special Ways to Execute Python in this Book</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac1_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac1_4_1_editor" data-question_label="" data-codelens="true">print("My first program adds two numbers, 2 and 3:")
print(2 + 3)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens1_4_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens1_4_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 1.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_4_1" data-multipleanswers="true">
                <div class="para" id="p-193">The activecode interpreter allows you to (select all that apply):</div>
                <li data-component="answer" id="foppff_1_question1_4_1_opt_a" data-correct="">
                  <div class="para" id="p-194">save programs and reload saved programs.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_4_1_opt_a">
                  <div class="para" id="p-195">You can (and should) save the contents of the activecode window.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_4_1_opt_b" data-correct="">
                  <div class="para" id="p-196">type in Python source code.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_4_1_opt_b">
                  <div class="para" id="p-197">You are not limited to running the examples that are already there.  Try adding to them and creating your own.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_4_1_opt_c" data-correct="">
                  <div class="para" id="p-198">execute Python code right in the text itself within the web browser.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_4_1_opt_c">
                  <div class="para" id="p-199">The ActiveCode interpreter will allow you type Python code into the textbox and then you can see it execute as the interpreter interprets and executes the source code.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_4_1_opt_d">
                  <div class="para" id="p-200">receive a yes/no answer about whether your code is correct or not.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_4_1_opt_d">
                  <div class="para" id="p-201">Although you can (and should) verify that your code is correct by examining its output, ActiveCode will not directly tell you whether you have correctly implemented your program.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 1.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_4_2" data-multipleanswers="true">
                <div class="para" id="p-202">CodeLens allows you to (select all that apply):</div>
                <li data-component="answer" id="foppff_1_question1_4_2_opt_a">
                  <div class="para" id="p-203">measure the speed of a program’s execution.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_4_2_opt_a">
                  <div class="para" id="p-204">In fact, CodeLens steps through each line one by one as you click, which is MUCH slower than the Python interpreter.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_4_2_opt_b" data-correct="">
                  <div class="para" id="p-205">control the step by step execution of a program.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_4_2_opt_b">
                  <div class="para" id="p-206">By using CodeLens, you can control the execution of a program step by step. You can even go backwards!</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_4_2_opt_c">
                  <div class="para" id="p-207">write and execute your own Python code.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_4_2_opt_c">
                  <div class="para" id="p-208">CodeLens works only for the pre-programmed examples.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_4_2_opt_d" data-correct="">
                  <div class="para" id="p-209">execute the Python code that is in CodeLens.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_4_2_opt_d">
                  <div class="para" id="p-210">By stepping forward through the Python code in CodeLens, you are executing the Python program.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>general-intro_more-about-programs</id>
      <title>More About Programs</title>
      <question>
        <label>Checkpoint 1.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_5_1" data-multipleanswers="false">
                <div class="para" id="p-220">A program is:</div>
                <li data-component="answer" id="foppff_1_question1_5_1_opt_a" data-correct="">
                  <div class="para" id="p-221">a sequence of instructions that specifies how to perform a computation.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_5_1_opt_a">
                  <div class="para" id="p-222">It is just step-by-step instructions that the computer can understand and execute. Programs often implement algorithms, but note that algorithms are typically less precise than programs and do not have to be written in a programming language.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_5_1_opt_b">
                  <div class="para" id="p-223">something you follow along at a play or concert.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_5_1_opt_b">
                  <div class="para" id="p-224">True, but not in this context. We mean a program as related to a computer.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_5_1_opt_c">
                  <div class="para" id="p-225">a computation, even a symbolic computation.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_5_1_opt_c">
                  <div class="para" id="p-226">A program can perform a computation, but by itself it is not one.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_5_1_opt_d">
                  <div class="para" id="p-227">the same thing as an algorithm.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_5_1_opt_d">
                  <div class="para" id="p-228">Programs often implement algorithms, but they are not the same thing. An algorithm is a step by step list of instructions, but those instructions are not necessarily precise enough for a computer to follow. A program must be written in a programming language that the computer knows how to interpret.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>general-intro_formal-and-natural-languages</id>
      <title>Formal and Natural Languages</title>
      <question>
        <label>Checkpoint 1.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_6_1" data-multipleanswers="false">
                <div class="para" id="p-247">The differences between natural and formal languages include:</div>
                <li data-component="answer" id="foppff_1_question1_6_1_opt_a">
                  <div class="para" id="p-248">natural languages can be parsed while formal languages cannot.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_6_1_opt_a">
                  <div class="para" id="p-249">Actually both languages can be parsed (determining the structure of the sentence), but formal languages can be parsed more easily in software.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_6_1_opt_b" data-correct="">
                  <div class="para" id="p-250">ambiguity and literalness.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_6_1_opt_b">
                  <div class="para" id="p-251">Both of these can be present in natural languages, but cannot exist in formal languages.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_6_1_opt_c">
                  <div class="para" id="p-252">there are no differences between natural and formal languages.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_6_1_opt_c">
                  <div class="para" id="p-253">There are several differences between the two but they are also similar.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_6_1_opt_d">
                  <div class="para" id="p-254">tokens, structure, syntax, and semantics.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_6_1_opt_d">
                  <div class="para" id="p-255">These are the similarities between the two.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 1.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_6_2" data-multipleanswers="false">
                <div class="para" id="p-256">True or False:  Reading a program is like reading other kinds of text.</div>
                <li data-component="answer" id="foppff_1_question1_6_2_opt_a">
                  <div class="para" id="p-257">True</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_6_2_opt_a">
                  <div class="para" id="p-258">It usually takes longer to read a program because the structure is as important as the content and must be interpreted in smaller pieces for understanding.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_6_2_opt_b" data-correct="">
                  <div class="para" id="p-259">False</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_6_2_opt_b">
                  <div class="para" id="p-260">It usually takes longer to read a program because the structure is as important as the content and must be interpreted in smaller pieces for understanding.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>general-intro_a-typical-first-program</id>
      <title>A Typical First Program</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac1_7_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac1_7_1_editor" data-question_label="" data-codelens="true">print("Hello, World!")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 1.7.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_7_1" data-multipleanswers="false">
                <div class="para" id="p-267">The print function:</div>
                <li data-component="answer" id="foppff_1_question1_7_1_opt_a">
                  <div class="para" id="p-268">sends information to the printer to be printed on paper.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_7_1_opt_a">
                  <div class="para" id="p-269">Within the Python programming language, the print statement has nothing to do with the printer.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_7_1_opt_b" data-correct="">
                  <div class="para" id="p-270">displays a value on the screen.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_7_1_opt_b">
                  <div class="para" id="p-271">Yes, the print statement is used to display the value of the thing being printed.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_7_1_opt_c">
                  <div class="para" id="p-272">tells the computer to put the information in print, rather than cursive, format.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_7_1_opt_c">
                  <div class="para" id="p-273">The format of the information is called its font and has nothing to do with the print statement.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_7_1_opt_d">
                  <div class="para" id="p-274">tells the computer to speak the information.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_7_1_opt_d">
                  <div class="para" id="p-275">That would be nice! But no...</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>general-intro_predict-before-you-run</id>
      <title>Predict Before You Run!</title>
    </subchapter>
    <subchapter>
      <id>general-intro_to-understand-a-program-change-it</id>
      <title>To Understand a Program, Change It!</title>
    </subchapter>
    <subchapter>
      <id>general-intro_comments</id>
      <title>Comments</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac1_10_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac1_10_1_editor" data-question_label="" data-codelens="true">#---------------------------------------------------
# This demo program shows off how elegant Python is!
# Written by Joe Soap, December 2010.
# Anyone may freely copy or modify this program.
#---------------------------------------------------

print("Hello, World!")     # Isn't this easy!
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 1.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question1_10_1" data-multipleanswers="false">
                <div class="para" id="p-290">What are comments for?</div>
                <li data-component="answer" id="foppff_1_question1_10_1_opt_a">
                  <div class="para" id="p-291">To tell the computer what you mean in your program.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_10_1_opt_a">
                  <div class="para" id="p-292">Comments are ignored by the computer.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_10_1_opt_b" data-correct="">
                  <div class="para" id="p-293">For the people who are reading your code to know, in natural language, what the program is doing.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_10_1_opt_b">
                  <div class="para" id="p-294">The computer ignores comments.  It’s for the humans that will “consume” your program.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_10_1_opt_c">
                  <div class="para" id="p-295">Nothing, they are extraneous information that is not needed.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_10_1_opt_c">
                  <div class="para" id="p-296">Comments can provide much needed information for anyone reading the program.</div>
                </li>
                <li data-component="answer" id="foppff_1_question1_10_1_opt_d">
                  <div class="para" id="p-297">Nothing in a short program.  They are only needed for really large programs.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question1_10_1_opt_d">
                  <div class="para" id="p-298">Even small programs benefit from comments.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>general-intro_glossary</id>
      <title>Glossary</title>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-2</id>
    <title>Variables, Statements, and Expressions</title>
    <subchapter>
      <id>simple-python-data_introduction</id>
      <title>Introduction</title>
    </subchapter>
    <subchapter>
      <id>simple-python-data_values-and-data-types</id>
      <title>Values and Data Types</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_2_1_editor" data-question_label="" data-codelens="true">print(3.2)
print("Hello, World!")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_2_1" data-multipleanswers="false"><div class="para" id="p-369">What appears in the output window when the following statement executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">print("Hello World!")
</code></pre></div><li data-component="answer" id="foppff_1_question2_2_1_opt_a"><div class="para" id="p-370">Nothing is printed. It generates a runtime error.</div></li><li data-component="feedback" id="foppff_1_question2_2_1_opt_a"><div class="para" id="p-371">"Hello World!" has a printed representation, so there will not be an error.</div></li><li data-component="answer" id="foppff_1_question2_2_1_opt_b"><div class="para" id="p-372">"Hello World!"</div></li><li data-component="feedback" id="foppff_1_question2_2_1_opt_b"><div class="para" id="p-373">The literal in the program includes the quote marks, but the printed representation omits them.</div></li><li data-component="answer" id="foppff_1_question2_2_1_opt_c" data-correct=""><div class="para" id="p-374">Hello World!</div></li><li data-component="feedback" id="foppff_1_question2_2_1_opt_c"><div class="para" id="p-375">The printed representation omits the quote marks that are included in the string literal.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_operators-and-operands</id>
      <title>Operators and Operands</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_3_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_3_1_editor" data-question_label="" data-codelens="true">20 + 32
5 ** 2
(5 + 9) * (15 - 7)
print(7 + 5)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_3_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_3_2_editor" data-question_label="" data-codelens="true">print(9 / 5)
print(5 / 9)
print(9 // 5)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_3_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_3_3_editor" data-question_label="" data-codelens="true">print(7.0 / 3.0)
print(7.0 // 3.0)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_3_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_3_4_editor" data-question_label="" data-codelens="true">print(7 // 3)    # This is the integer division operator
print(7 % 3)     # This is the remainder or modulus operator
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_3_1" data-multipleanswers="false"><div class="para" id="p-387">What value is printed when the following statement executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">print(18 / 4)
</code></pre></div><li data-component="answer" id="foppff_1_question2_3_1_opt_a" data-correct=""><div class="para" id="p-388">4.5</div></li><li data-component="feedback" id="foppff_1_question2_3_1_opt_a"><div class="para" id="p-389">Because the result is not an integer, a floating point answer is produced.</div></li><li data-component="answer" id="foppff_1_question2_3_1_opt_b"><div class="para" id="p-390">5</div></li><li data-component="feedback" id="foppff_1_question2_3_1_opt_b"><div class="para" id="p-391">Even if // were used, it would still truncate, not round</div></li><li data-component="answer" id="foppff_1_question2_3_1_opt_c"><div class="para" id="p-392">4</div></li><li data-component="feedback" id="foppff_1_question2_3_1_opt_c"><div class="para" id="p-393">Perhaps you are thinking of the integer division operator, //</div></li><li data-component="answer" id="foppff_1_question2_3_1_opt_d"><div class="para" id="p-394">4.0</div></li><li data-component="feedback" id="foppff_1_question2_3_1_opt_d"><div class="para" id="p-395">/ performs exact division, without truncation</div></li><li data-component="answer" id="foppff_1_question2_3_1_opt_e"><div class="para" id="p-396">2</div></li><li data-component="feedback" id="foppff_1_question2_3_1_opt_e"><div class="para" id="p-397">/ does division. Perhaps you were thinking of %, which computes the remainder?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_3_2" data-multipleanswers="false"><div class="para" id="p-398">What value is printed when the following statement executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">print(18.0 // 4)
</code></pre></div><li data-component="answer" id="foppff_1_question2_3_2_opt_a"><div class="para" id="p-399">4.5</div></li><li data-component="feedback" id="foppff_1_question2_3_2_opt_a"><div class="para" id="p-400">- // does truncated division.</div></li><li data-component="answer" id="foppff_1_question2_3_2_opt_b"><div class="para" id="p-401">5</div></li><li data-component="feedback" id="foppff_1_question2_3_2_opt_b"><div class="para" id="p-402">- Neither / nor // leads to rounding up</div></li><li data-component="answer" id="foppff_1_question2_3_2_opt_c"><div class="para" id="p-403">4</div></li><li data-component="feedback" id="foppff_1_question2_3_2_opt_c"><div class="para" id="p-404">- Even though it truncates, it produces a floating point result</div></li><li data-component="answer" id="foppff_1_question2_3_2_opt_d" data-correct=""><div class="para" id="p-405">4.0</div></li><li data-component="feedback" id="foppff_1_question2_3_2_opt_d"><div class="para" id="p-406">- Yes, even though it truncates, it produces a floating point result because 18.0 is a float</div></li><li data-component="answer" id="foppff_1_question2_3_2_opt_e"><div class="para" id="p-407">2</div></li><li data-component="feedback" id="foppff_1_question2_3_2_opt_e"><div class="para" id="p-408">- / does division. Perhaps you were thinking of %, which computes the remainder?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_3_3" data-multipleanswers="false"><div class="para" id="p-409">What value is printed when the following statement executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">print(18 % 4)
</code></pre></div><li data-component="answer" id="foppff_1_question2_3_3_opt_a"><div class="para" id="p-410">4.25</div></li><li data-component="feedback" id="foppff_1_question2_3_3_opt_a"><div class="para" id="p-411">The % operator returns the remainder after division.</div></li><li data-component="answer" id="foppff_1_question2_3_3_opt_b"><div class="para" id="p-412">5</div></li><li data-component="feedback" id="foppff_1_question2_3_3_opt_b"><div class="para" id="p-413">The % operator returns the remainder after division.</div></li><li data-component="answer" id="foppff_1_question2_3_3_opt_c"><div class="para" id="p-414">4</div></li><li data-component="feedback" id="foppff_1_question2_3_3_opt_c"><div class="para" id="p-415">The % operator returns the remainder after division.</div></li><li data-component="answer" id="foppff_1_question2_3_3_opt_d" data-correct=""><div class="para" id="p-416">2</div></li><li data-component="feedback" id="foppff_1_question2_3_3_opt_d"><div class="para" id="p-417">The % operator returns the remainder after division.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_function-calls</id>
      <title>Function Calls</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_4_1_editor" data-question_label="" data-codelens="true">def square(x: int) -&gt; int:
  return x * x

def sub(x: int, y: int) -&gt; int:
  return x - y
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_4_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_4_2_editor" data-question_label="" data-codelens="true">print(square(3))
square(5)
print(sub(6, 4))
print(sub(5, 9))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_4_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_4_3_editor" data-question_label="" data-codelens="true">print(square(3) + 2)
print(sub(square(3), square(1+1)))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_4_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_4_4_editor" data-question_label="" data-codelens="true">print(square)
print(square(3))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_data-types</id>
      <title>Data Types</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_5_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_5_1_editor" data-question_label="" data-codelens="true">print(type("Hello, World!"))
print(type(17))
print("Hello, World")
print(type(3.2))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_5_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_5_2_editor" data-question_label="" data-codelens="true">print(type("17"))
print(type("3.2"))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_5_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_5_3_editor" data-question_label="" data-codelens="true">print(type('This is a string.'))
print(type("And so is this."))
print(type("""and this."""))
print(type('''and even this...'''))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_5_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_5_4_editor" data-question_label="" data-codelens="true">print('''"Oh no", she exclaimed, "Ben's bike is broken!"''')
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_5_5">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_5_5_editor" data-question_label="" data-codelens="true">print("""This message will span
several lines
of the text.""")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_5_6">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_5_6_editor" data-question_label="" data-codelens="true">print('This is a string.')
print("""And so is this.""")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_5_7">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_5_7_editor" data-question_label="" data-codelens="true">print(42500)
print(42,500)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_5_8">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_5_8_editor" data-question_label="" data-codelens="true">print(42, 17, 56, 34, 11, 4.35, 32)
print(3.4, "hello", 45)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_5_1" data-multipleanswers="false">
                <div class="para" id="p-447">How can you determine the type of a variable?</div>
                <li data-component="answer" id="foppff_1_question2_5_1_opt_a">
                  <div class="para" id="p-448">Print out the value and determine the data type based on the value printed.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_5_1_opt_a">
                  <div class="para" id="p-449">You may be able to determine the data type based on the printed value, but it may also be  deceptive, like when a string prints, there are no quotes around it.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_5_1_opt_b" data-correct="">
                  <div class="para" id="p-450">Use the type function.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_5_1_opt_b">
                  <div class="para" id="p-451">The type function will tell you the class the value belongs to.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_5_1_opt_c">
                  <div class="para" id="p-452">Use it in a known equation and print the result.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_5_1_opt_c">
                  <div class="para" id="p-453">Only numeric values can be used in equations.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_5_1_opt_d">
                  <div class="para" id="p-454">Look at the declaration of the variable.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_5_1_opt_d">
                  <div class="para" id="p-455">In Python variables are not declared. Values, not variables, have types in Python. A variable can even take on values with different types during a program’s execution.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_5_2" data-multipleanswers="false">
                <div class="para" id="p-456">What is the data type of ‘this is what kind of data’?</div>
                <li data-component="answer" id="foppff_1_question2_5_2_opt_a">
                  <div class="para" id="p-457">Character</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_5_2_opt_a">
                  <div class="para" id="p-458">It is not a single character.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_5_2_opt_b">
                  <div class="para" id="p-459">Integer</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_5_2_opt_b">
                  <div class="para" id="p-460">The data is not numeric.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_5_2_opt_c">
                  <div class="para" id="p-461">Float</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_5_2_opt_c">
                  <div class="para" id="p-462">The value is not numeric with a decimal point.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_5_2_opt_d" data-correct="">
                  <div class="para" id="p-463">String</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_5_2_opt_d">
                  <div class="para" id="p-464">Strings can be enclosed in single quotes.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_type-conversion-functions</id>
      <title>Type conversion functions</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_6_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_6_1_editor" data-question_label="" data-codelens="true">print(3.14, int(3.14))
print(3.9999, int(3.9999))       # This doesn't round to the closest int!
print(3.0, int(3.0))
print(-3.999, int(-3.999))        # Note that the result is closer to zero

print("2345", int("2345"))        # parse a string to produce an int
print(17, int(17))                # int even works on integers
print(int("23bottles"))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_6_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_6_2_editor" data-question_label="" data-codelens="true">print(float("123.45"))
print(type(float("123.45")))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_6_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_6_3_editor" data-question_label="" data-codelens="true">print(str(17))
print(str(123.45))
print(type(str(123.45)))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_6_1" data-multipleanswers="false"><div class="para" id="p-472">What value is printed when the following statement executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">print(int(53.785))
</code></pre></div><li data-component="answer" id="foppff_1_question2_6_1_opt_a"><div class="para" id="p-473">Nothing is printed. It generates a runtime error.</div></li><li data-component="feedback" id="foppff_1_question2_6_1_opt_a"><div class="para" id="p-474">The statement is valid Python code.  It calls the int function on 53.785 and then prints the value that is returned.</div></li><li data-component="answer" id="foppff_1_question2_6_1_opt_b" data-correct=""><div class="para" id="p-475">53</div></li><li data-component="feedback" id="foppff_1_question2_6_1_opt_b"><div class="para" id="p-476">The int function truncates all values after the decimal and prints the integer value.</div></li><li data-component="answer" id="foppff_1_question2_6_1_opt_c"><div class="para" id="p-477">54</div></li><li data-component="feedback" id="foppff_1_question2_6_1_opt_c"><div class="para" id="p-478">When converting to an integer, the int function does not round.</div></li><li data-component="answer" id="foppff_1_question2_6_1_opt_d"><div class="para" id="p-479">53.785</div></li><li data-component="feedback" id="foppff_1_question2_6_1_opt_d"><div class="para" id="p-480">The int function removes the fractional part of 53.785 and returns an integer, which is then printed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_variables</id>
      <title>Variables</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_7_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_7_1_editor" data-question_label="" data-codelens="true">message = "What's up, Doc?"
n = 17
pi = 3.14159

print(message)
print(n)
print(pi)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens2_7_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens2_7_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens2_7_2" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens2_7_2.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_7_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_7_2_editor" data-question_label="" data-codelens="true">message = "What's up, Doc?"
n = 17
pi = 3.14159

print(type(message))
print(type(n))
print(type(pi))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.7.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_7_1" data-multipleanswers="false"><div class="para" id="p-498">What is printed when the following statements execute?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">day = "Thursday"
day = 32.5
day = 19
print(day)
</code></pre></div><li data-component="answer" id="foppff_1_question2_7_1_opt_a"><div class="para" id="p-499">Nothing is printed. A runtime error occurs.</div></li><li data-component="feedback" id="foppff_1_question2_7_1_opt_a"><div class="para" id="p-500">It is legal to change the type of data that a variable holds in Python.</div></li><li data-component="answer" id="foppff_1_question2_7_1_opt_b"><div class="para" id="p-501">Thursday</div></li><li data-component="feedback" id="foppff_1_question2_7_1_opt_b"><div class="para" id="p-502">This is the first value assigned to the variable day, but the next statements reassign that variable to new values.</div></li><li data-component="answer" id="foppff_1_question2_7_1_opt_c"><div class="para" id="p-503">32.5</div></li><li data-component="feedback" id="foppff_1_question2_7_1_opt_c"><div class="para" id="p-504">This is the second value assigned to the variable day, but the next statement reassigns that variable to a new value.</div></li><li data-component="answer" id="foppff_1_question2_7_1_opt_d" data-correct=""><div class="para" id="p-505">19</div></li><li data-component="feedback" id="foppff_1_question2_7_1_opt_d"><div class="para" id="p-506">The variable day will contain the last value assigned to it when it is printed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_variable-names-and-keywords</id>
      <title>Variable Names and Keywords</title>
      <question>
        <label>Checkpoint 2.8.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_8_1" data-multipleanswers="false">
                <div class="para" id="p-515">True or False: the following is a legal variable name in Python: A_good_grade_is_A+</div>
                <li data-component="answer" id="foppff_1_question2_8_1_opt_a">
                  <div class="para" id="p-516">True</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_8_1_opt_a">
                  <div class="para" id="p-517">- The + character is not allowed in variable names.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_8_1_opt_b" data-correct="">
                  <div class="para" id="p-518">False</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_8_1_opt_b">
                  <div class="para" id="p-519">- The + character is not allowed in variable names (everything else in this name is fine).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_choosing-the-right-variable-name</id>
      <title>Choosing the Right Variable Name</title>
    </subchapter>
    <subchapter>
      <id>simple-python-data_statements-and-expressions</id>
      <title>Statements and Expressions</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_10_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_10_1_editor" data-question_label="" data-codelens="true">print(1 + 1 + (2 * 3))
print(len("hello"))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_10_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_10_2_editor" data-question_label="" data-codelens="true">y = 3.14
x = len("hello")
print(x)
print(y)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_10_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_10_3_editor" data-question_label="" data-codelens="true">print(2 * len("hello") + len("goodbye"))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_10_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_10_4_editor" data-question_label="" data-codelens="true">def square(x: int) -&gt; int:
  return x * x

def sub(x: int, y: int) -&gt; int:
  return x - y
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_10_5">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_10_5_editor" data-question_label="" data-codelens="true">x = 2
y = 1
print(square(y + 3))
print(square(y + square(x)))
print(sub(square(y), square(x)))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.10.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="foppff_1_pp2_10_1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="p-540">Please order the code fragments in the order in which the Python interpreter would evaluate them. x is 2 and y is 3. Now the interpreter is executing square(x + sub(square(y), 2 *x)).</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-noindent="true">look up the variable square to get the function object
---
look up the variable x to get 2
---
look up the variable sub to get the function object
---
look up the variable square, again, to get the function object
---
look up the variable y to get 3
---
run the square function on input 3, returning the value 9
---
look up the variable x, again, to get 2
---
multiply 2 * 2 to get 4
---
run the sub function, passing inputs 9 and 4, returning the value 5
---
add 2 and 5 to get 7
---
run the square function, again, on input 7, returning the value 49</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_order-of-operations</id>
      <title>Order of Operations</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_11_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_11_1_editor" data-question_label="" data-codelens="true">print(2 ** 3 ** 2)      # the right-most ** operator gets done first!
print((2 ** 3) ** 2)    # use parentheses to force the order you want!
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.11.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_11_1" data-multipleanswers="false"><div class="para" id="p-549">What is the value of the follwing expression?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">16 - 2 * 5 // 3 + 1
</code></pre></div><li data-component="answer" id="foppff_1_question2_11_1_opt_a" data-correct=""><div class="para" id="p-550">14</div></li><li data-component="feedback" id="foppff_1_question2_11_1_opt_a"><div class="para" id="p-551">Using parentheses, the expression is evaluated as (2*5) first, then (10 // 3), then (16-3), and then (13+1).</div></li><li data-component="answer" id="foppff_1_question2_11_1_opt_b"><div class="para" id="p-552">24</div></li><li data-component="feedback" id="foppff_1_question2_11_1_opt_b"><div class="para" id="p-553">Remember that * has precedence over -.</div></li><li data-component="answer" id="foppff_1_question2_11_1_opt_c"><div class="para" id="p-554">3</div></li><li data-component="feedback" id="foppff_1_question2_11_1_opt_c"><div class="para" id="p-555">Remember that // has precedence over -.</div></li><li data-component="answer" id="foppff_1_question2_11_1_opt_d"><div class="para" id="p-556">13.667</div></li><li data-component="feedback" id="foppff_1_question2_11_1_opt_d"><div class="para" id="p-557">Remember that // does integer division.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_reassignment</id>
      <title>Reassignment</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_13_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_13_1_editor" data-question_label="" data-codelens="true">bruce = 5
print(bruce)
bruce = 7
print(bruce)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_13_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_13_2_editor" data-question_label="" data-codelens="true">a = 5
b = a    # after executing this line, a and b are now equal
print(a,b)
a = 3    # after executing this line, a and b are no longer equal
print(a,b)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens2_13_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens2_13_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.12.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_13_1" data-multipleanswers="false"><div class="para" id="p-568">After the following statements, what are the values of x and y?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">x = 15
y = x
x = 22
</code></pre></div><li data-component="answer" id="foppff_1_question2_13_1_opt_a"><div class="para" id="p-569">x is 15 and y is 15</div></li><li data-component="feedback" id="foppff_1_question2_13_1_opt_a"><div class="para" id="p-570">Look at the last assignment statement which gives x a different value.</div></li><li data-component="answer" id="foppff_1_question2_13_1_opt_b"><div class="para" id="p-571">x is 22 and y is 22</div></li><li data-component="feedback" id="foppff_1_question2_13_1_opt_b"><div class="para" id="p-572">No, x and y are two separate variables.  Just because x changes in the last assignment statement, it does not change the value that was copied into y in the second statement.</div></li><li data-component="answer" id="foppff_1_question2_13_1_opt_c"><div class="para" id="p-573">x is 15 and y is 22</div></li><li data-component="feedback" id="foppff_1_question2_13_1_opt_c"><div class="para" id="p-574">Look at the last assignment statement, which reassigns x, and not y.</div></li><li data-component="answer" id="foppff_1_question2_13_1_opt_d" data-correct=""><div class="para" id="p-575">x is 22 and y is 15</div></li><li data-component="feedback" id="foppff_1_question2_13_1_opt_d"><div class="para" id="p-576">Yes, x has the value 22 and y the value 15.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_updating-variables</id>
      <title>Updating Variables</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_14_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_14_1_editor" data-question_label="" data-codelens="true">x = 6 # initialize x
print(x)
x = x + 1 # update x
print(x)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_14_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_14_2_editor" data-question_label="" data-codelens="true">x = 6 # initialize x
print(x)
x += 3 # increment x by 3; same as x = x + 3
print(x)
x -= 1 # decrement x by 1
print(x)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_14_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_14_3_editor" data-question_label="" data-codelens="true">s = 1
print(s)
s = s + 2
print(s)
s = s + 3
print(s)
s = s + 4
print(s)
s = s + 5
print(s)
s = s + 6
print(s)
s = s + 7
print(s)
s = s + 8
print(s)
s = s + 9
print(s)
s = s + 10
print(s)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.13.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_14_1" data-multipleanswers="false"><div class="para" id="p-586">What is printed when the following statements execute?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">x = 12
x = x - 1
print(x)
</code></pre></div><li data-component="answer" id="foppff_1_question2_14_1_opt_a"><div class="para" id="p-587">12</div></li><li data-component="feedback" id="foppff_1_question2_14_1_opt_a"><div class="para" id="p-588">The value of x changes in the second statement.</div></li><li data-component="answer" id="foppff_1_question2_14_1_opt_b"><div class="para" id="p-589">-1</div></li><li data-component="feedback" id="foppff_1_question2_14_1_opt_b"><div class="para" id="p-590">In the second statement, substitute the current value of x before subtracting 1.</div></li><li data-component="answer" id="foppff_1_question2_14_1_opt_c" data-correct=""><div class="para" id="p-591">11</div></li><li data-component="feedback" id="foppff_1_question2_14_1_opt_c"><div class="para" id="p-592">Yes, this statement sets the value of x equal to the current value minus 1.</div></li><li data-component="answer" id="foppff_1_question2_14_1_opt_d"><div class="para" id="p-593">Nothing. An error occurs because x can never be equal to x - 1.</div></li><li data-component="feedback" id="foppff_1_question2_14_1_opt_d"><div class="para" id="p-594">Remember that variables in Python are different from variables in math in that they (temporarily) hold values, but can be reassigned.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.13.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_14_2" data-multipleanswers="false"><div class="para" id="p-595">What is printed when the following statements execute?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">x = 12
x = x - 3
x = x + 5
x = x + 1
print(x)
</code></pre></div><li data-component="answer" id="foppff_1_question2_14_2_opt_a"><div class="para" id="p-596">12</div></li><li data-component="feedback" id="foppff_1_question2_14_2_opt_a"><div class="para" id="p-597">The value of x changes in the second statement.</div></li><li data-component="answer" id="foppff_1_question2_14_2_opt_b"><div class="para" id="p-598">9</div></li><li data-component="feedback" id="foppff_1_question2_14_2_opt_b"><div class="para" id="p-599">Each statement changes the value of x, so 9 is not the final result.</div></li><li data-component="answer" id="foppff_1_question2_14_2_opt_c" data-correct=""><div class="para" id="p-600">15</div></li><li data-component="feedback" id="foppff_1_question2_14_2_opt_c"><div class="para" id="p-601">Yes, starting with 12, subtract 3, than add 5, and finally add 1.</div></li><li data-component="answer" id="foppff_1_question2_14_2_opt_d"><div class="para" id="p-602">Nothing. An error occurs because x cannot be used that many times in assignment statements.</div></li><li data-component="feedback" id="foppff_1_question2_14_2_opt_d"><div class="para" id="p-603">Remember that variables in Python are different from variables in math in that they (temporarily) hold values, but can be reassigned.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.13.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="foppff_1_pp2_14_1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="p-604">Construct the code that will result in the value 134 being printed.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-noindent="true">mybankbalance = 100
mybankbalance = mybankbalance + 34
print(mybankbalance)</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.13.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_14_3" data-multipleanswers="true">
                <div class="para" id="p-605">Which of the following statements are equivalent?</div>
                <li data-component="answer" id="foppff_1_question2_14_3_opt_a" data-correct="">
                  <div class="para" id="p-606">x = x + y</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_14_3_opt_a">
                  <div class="para" id="p-607">x is updated to be the old value of x plus the value of y.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_14_3_opt_b">
                  <div class="para" id="p-608">y += x</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_14_3_opt_b">
                  <div class="para" id="p-609">y is updated to be the old value of y plus the value of x.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_14_3_opt_c">
                  <div class="para" id="p-610">x += x + y</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_14_3_opt_c">
                  <div class="para" id="p-611">This updates x to be its old value (because of the +=) plus its old value again (because of the x on the right side) plus the value of y, so it’s equivalent to x = x + x + y</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_14_3_opt_d" data-correct="">
                  <div class="para" id="p-612">x += y</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_14_3_opt_d">
                  <div class="para" id="p-613">x is updated to be the old value of x plus the value of y.</div>
                </li>
                <li data-component="answer" id="foppff_1_question2_14_3_opt_e">
                  <div class="para" id="p-614">x++ y</div>
                </li>
                <li data-component="feedback" id="foppff_1_question2_14_3_opt_e">
                  <div class="para" id="p-615">++ is not a syntax that means anything in Python.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_hard-coding</id>
      <title>Hard-Coding</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_hard_coding_example">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_hard_coding_example_editor" data-question_label="" data-codelens="true">x = 20
y = 35
abc = 62
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_input</id>
      <title>Input</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_16_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_16_1_editor" data-question_label="" data-codelens="true">n = input("Please enter your name: ")
print("Hello", n)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac2_16_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac2_16_2_editor" data-question_label="" data-codelens="true">str_seconds = input("Please enter the number of seconds you wish to convert")
total_secs = int(str_seconds)

hours = total_secs // 3600
secs_still_remaining = total_secs % 3600
minutes =  secs_still_remaining // 60
secs_finally_remaining = secs_still_remaining  % 60

print("Hrs=", hours, "mins=", minutes, "secs=", secs_finally_remaining)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.15.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question2_16_1" data-multipleanswers="false"><div class="para" id="p-634">What is printed when the following statements execute?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">n = input("Please enter your age: ")
# user types in 18
print(type(n))
</code></pre></div><li data-component="answer" id="foppff_1_question2_16_1_opt_a" data-correct=""><div class="para" id="p-635">&lt;class ’str’&gt;</div></li><li data-component="feedback" id="foppff_1_question2_16_1_opt_a"><div class="para" id="p-636">All input from users is read in as a string.</div></li><li data-component="answer" id="foppff_1_question2_16_1_opt_b"><div class="para" id="p-637">&lt;class ’int’&gt;</div></li><li data-component="feedback" id="foppff_1_question2_16_1_opt_b"><div class="para" id="p-638">Even though the user typed in an integer, it does not come into the program as an integer.</div></li><li data-component="answer" id="foppff_1_question2_16_1_opt_c"><div class="para" id="p-639">&lt;class 18&gt;</div></li><li data-component="feedback" id="foppff_1_question2_16_1_opt_c"><div class="para" id="p-640">18 is the value of what the user typed, not the type of the data.</div></li><li data-component="answer" id="foppff_1_question2_16_1_opt_d"><div class="para" id="p-641">18</div></li><li data-component="feedback" id="foppff_1_question2_16_1_opt_d"><div class="para" id="p-642">18 is the value of what the user typed, not the type of the data.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>simple-python-data_glossary</id>
      <title>Glossary</title>
    </subchapter>
    <subchapter>
      <id>simple-python-data_chapter-assessment</id>
      <title>Chapter Assessment</title>
      <question>
        <label>Checkpoint 2.17.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_assess_ps_01_01">
                <div class="ac_question col-md-12" id="foppff_1_assess_ps_01_01_question">
                  <div class="para" id="p-678">There is a function we are providing in for you in this problem called <code class="code-inline tex2jax_ignore">square</code>. It takes one integer and returns the square of that integer value. Write code to assign a variable called <code class="code-inline tex2jax_ignore">xyz</code> the value <code class="code-inline tex2jax_ignore">5*5</code> (five squared). Use the square function, rather than just multiplying with <code class="code-inline tex2jax_ignore">*</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_assess_ps_01_01_editor" data-question_label="" data-codelens="true">xyz = ""

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

def testOne(self):
self.assertEqual(type(xyz), type(3), "Checking type of xyz")
self.assertEqual(xyz, 25, "Checking if xyz is 25")
self.assertIn('square', self.getEditorText(), "Testing that 'square' is in your code. (Don't
worry about Actual and Expected Values.)")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.17.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_assess_ps_01_02">
                <div class="ac_question col-md-12" id="foppff_1_assess_ps_01_02_question">
                  <div class="para" id="p-679">Write code to assign the number of <em class="emphasis">characters</em> in the string <code class="code-inline tex2jax_ignore">rv</code> to a variable <code class="code-inline tex2jax_ignore">num_chars</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_assess_ps_01_02_editor" data-question_label="" data-codelens="true">rv = """Once upon a midnight dreary, while I pondered, weak and weary,
Over many a quaint and curious volume of forgotten lore,
While I nodded, nearly napping, suddenly there came a tapping,
As of some one gently rapping, rapping at my chamber door.
'Tis some visitor, I muttered, tapping at my chamber door;
Only this and nothing more."""

# Write your code here!

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

def testOne(self):
self.assertEqual(num_chars, len(rv), "Testing that num_chars has been set to the length of
rv")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.17.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_assess_question1_1_1_3" data-multipleanswers="true"><div class="para" id="p-680">The code below initializes two variables, <code class="code-inline tex2jax_ignore">z</code> and <code class="code-inline tex2jax_ignore">y</code>. We want to assign the total number of characters in <code class="code-inline tex2jax_ignore">z</code> and in <code class="code-inline tex2jax_ignore">y</code> to the variable <code class="code-inline tex2jax_ignore">a</code>. Which of the following solutions, if any, would be considered hard coding?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">z = "hello world"
y = "welcome!"
</code></pre></div><li data-component="answer" id="foppff_1_assess_question1_1_1_3_opt_a" data-correct=""><div class="para" id="p-681">a = len("hello worldwelcome!")</div></li><li data-component="feedback" id="foppff_1_assess_question1_1_1_3_opt_a"><div class="para" id="p-682">Though we are using the len function here, we are hardcoding what len should return the length of. We are not referencing z or y.</div></li><li data-component="answer" id="foppff_1_assess_question1_1_1_3_opt_b" data-correct=""><div class="para" id="p-683">a = 11 + 8</div></li><li data-component="feedback" id="foppff_1_assess_question1_1_1_3_opt_b"><div class="para" id="p-684">This is hardcoding, we are writing in the value without referencing z or y.</div></li><li data-component="answer" id="foppff_1_assess_question1_1_1_3_opt_c"><div class="para" id="p-685">a = len(z) + len(y)</div></li><li data-component="feedback" id="foppff_1_assess_question1_1_1_3_opt_c"><div class="para" id="p-686">This is not considered hard coding. We are using the function len to determine the length of what is stored in z and y, which is a correct way to approach this problem.</div></li><li data-component="answer" id="foppff_1_assess_question1_1_1_3_opt_d" data-correct=""><div class="para" id="p-687">a = len("hello world") + len("welcome!")</div></li><li data-component="feedback" id="foppff_1_assess_question1_1_1_3_opt_d"><div class="para" id="p-688">Though we are using the len function here, we are hardcoding what len should return the length of each time we call len. We are not referencing z or y.</div></li><li data-component="answer" id="foppff_1_assess_question1_1_1_3_opt_e"><div class="para" id="p-689">none of the above are hardcoding.</div></li><li data-component="feedback" id="foppff_1_assess_question1_1_1_3_opt_e"><div class="para" id="p-690">At least one of these solutions is considered hardcoding. Take another look.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 2.17.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_assess_addl_functions">
                <div class="ac_question col-md-12" id="foppff_1_assess_addl_functions_question">
                  <div class="para" id="p-691">(This is not an assessment question) The code below defines functions used by one of the questions above. Do not modify the code, but feel free to take a look.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_assess_addl_functions_editor" data-question_label="" data-codelens="true">def square(num: int) -&gt; int:
  return num**2
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-3</id>
    <title>Debugging</title>
    <subchapter>
      <id>debugging_introduction-to-debugging</id>
      <title>Introduction to Debugging</title>
      <question>
        <label>Video: c0bsKc4tiuY</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <div id="foppff_1_c0bsKc4tiuY" data-component="youtube" class="align-left youtube-video" data-video-height="" data-video-width="" data-video-videoid="c0bsKc4tiuY" data-video-divid="foppff_1_c0bsKc4tiuY" data-video-start="0" data-video-end="-1"/>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>debugging_beginning-tips-for-debugging</id>
      <title>Beginning tips for Debugging</title>
    </subchapter>
    <subchapter>
      <id>debugging_syntax-errors</id>
      <title>Syntax errors</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_debug_syntaxerr">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_debug_syntaxerr_editor" data-question_label="" data-codelens="true">print("Hello, World!")
print(5 + )
print("All finished!")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 3.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question3_3_1" data-multipleanswers="false">
                <div class="para" id="p-726">Which of the following is a syntax error?</div>
                <li data-component="answer" id="foppff_1_question3_3_1_opt_a">
                  <div class="para" id="p-727">Attempting to divide by 0.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_3_1_opt_a">
                  <div class="para" id="p-728">A syntax error is an error in the structure of the python code that can be detected before the program is executed. Python cannot usually tell if you are trying to divide by 0 until it is executing your program (e.g., you might be asking the user for a value and then dividing by that value—you cannot know what value the user will enter before you run the program).</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_3_1_opt_b" data-correct="">
                  <div class="para" id="p-729">Forgetting a colon at the end of a statement where one is required.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_3_1_opt_b">
                  <div class="para" id="p-730">This is a problem with the formal structure of the program.  Python knows where colons are required and can detect when one is missing simply by looking at the code without running it.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_3_1_opt_c">
                  <div class="para" id="p-731">Forgetting to divide by 100 when printing a percentage amount.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_3_1_opt_c">
                  <div class="para" id="p-732">This will produce the wrong answer, but Python will not consider it an error at all.  The programmer is the one who understands that the answer produced is wrong.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 3.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question3_3_2" data-multipleanswers="false">
                <div class="para" id="p-733">Who or what typically finds syntax errors?</div>
                <li data-component="answer" id="foppff_1_question3_3_2_opt_a">
                  <div class="para" id="p-734">The programmer.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_3_2_opt_a">
                  <div class="para" id="p-735">Programmers rarely find all the syntax errors, there is a computer program that will do it for us.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_3_2_opt_b" data-correct="">
                  <div class="para" id="p-736">The compiler / interpreter.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_3_2_opt_b">
                  <div class="para" id="p-737">The compiler and / or interpreter is a computer program that determines if your program is written in a way that can be translated into machine language for execution.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_3_2_opt_c">
                  <div class="para" id="p-738">The computer.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_3_2_opt_c">
                  <div class="para" id="p-739">Well, sort of.  But it is a special thing in the computer that does it.  The stand alone computer without this additional piece can not do it.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_3_2_opt_d">
                  <div class="para" id="p-740">The teacher / instructor.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_3_2_opt_d">
                  <div class="para" id="p-741">Your teacher and instructor may be able to find most of your syntax errors, but only because they have experience looking at code and possibly writing code.  With experience syntax errors are easier to find.  But we also have an automated way of finding these types of errors.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>debugging_runtime-errors</id>
      <title>Runtime Errors</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_debug_rterr">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_debug_rterr_editor" data-question_label="" data-codelens="true">subtotal = input("Enter total before tax:")
tax = .08 * subTotal
print("tax on", subtotal, "is:", tax)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 3.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question3_4_1" data-multipleanswers="false">
                <div class="para" id="p-756">Which of the following is a run-time error?</div>
                <li data-component="answer" id="foppff_1_question3_4_1_opt_a" data-correct="">
                  <div class="para" id="p-757">Attempting to divide by 0.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_4_1_opt_a">
                  <div class="para" id="p-758">Python cannot reliably tell if you are trying to divide by 0 until it is executing your program (e.g., you might be asking the user for a value and then dividing by that value—you cannot know what value the user will enter before you run the program).</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_4_1_opt_b">
                  <div class="para" id="p-759">Forgetting a colon at the end of a statement where one is required.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_4_1_opt_b">
                  <div class="para" id="p-760">This is a problem with the formal structure of the program.  Python knows where colons are required and can detect when one is missing simply by looking at the code without running it.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_4_1_opt_c">
                  <div class="para" id="p-761">Forgetting to divide by 100 when printing a percentage amount.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_4_1_opt_c">
                  <div class="para" id="p-762">This will produce the wrong answer, but Python will not consider it an error at all.  The programmer is the one who understands that the answer produced is wrong.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 3.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question3_4_2" data-multipleanswers="false">
                <div class="para" id="p-763">Who or what typically finds runtime errors?</div>
                <li data-component="answer" id="foppff_1_question3_4_2_opt_a">
                  <div class="para" id="p-764">The programmer.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_4_2_opt_a">
                  <div class="para" id="p-765">Programmers rarely find all the runtime errors, there is a computer program that will do it for us.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_4_2_opt_b" data-correct="">
                  <div class="para" id="p-766">The interpreter.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_4_2_opt_b">
                  <div class="para" id="p-767">If an instruction is illegal to perform at that point in the execution, the interpreter will stop with a message describing the exception.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_4_2_opt_c">
                  <div class="para" id="p-768">The computer.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_4_2_opt_c">
                  <div class="para" id="p-769">Well, sort of.  But it is a special thing in the computer that does it.  The stand alone computer without this additional piece can not do it.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_4_2_opt_d">
                  <div class="para" id="p-770">The teacher / instructor.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_4_2_opt_d">
                  <div class="para" id="p-771">Your teacher and instructor may be able to find most of your runtime errors, but only because they have experience looking at code and possibly writing code.  With experience runtime errors are easier to find.  But we also have an automated way of finding these types of errors.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>debugging_semantic-errors</id>
      <title>Semantic Errors</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_logicerr_sum">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_logicerr_sum_editor" data-question_label="" data-codelens="true">num1 = input('Enter a number:')
num2 = input('Enter another number:')
sum = num1 + num2

print('The sum of', num1, 'and', num2, 'is', sum)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 3.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question3_5_1" data-multipleanswers="false">
                <div class="para" id="p-785">Which of the following is a semantic error?</div>
                <li data-component="answer" id="foppff_1_question3_5_1_opt_a">
                  <div class="para" id="p-786">Attempting to divide by 0.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_5_1_opt_a">
                  <div class="para" id="p-787">A semantic error is an error in logic. In this case the program does not produce the correct output because the problem is not solved correctly. This would be considered a run-time error.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_5_1_opt_b">
                  <div class="para" id="p-788">Forgetting a semi-colon at the end of a statement where one is required.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_5_1_opt_b">
                  <div class="para" id="p-789">A semantic error is an error in logic. In this case the program does not produce the correct output because the code can not be processed by the compiler or interpreter. This would be considered a syntax error.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_5_1_opt_c" data-correct="">
                  <div class="para" id="p-790">Forgetting to divide by 100 when printing a percentage amount.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_5_1_opt_c">
                  <div class="para" id="p-791">This will produce the wrong answer because the programmer implemented the solution incorrectly.  This is a semantic error.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 3.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question3_5_2" data-multipleanswers="false">
                <div class="para" id="p-792">Who or what typically finds semantic errors?</div>
                <li data-component="answer" id="foppff_1_question3_5_2_opt_a" data-correct="">
                  <div class="para" id="p-793">The programmer.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_5_2_opt_a">
                  <div class="para" id="p-794">You must fully understand the problem so the you can tell if your program properly solves it.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_5_2_opt_b">
                  <div class="para" id="p-795">The compiler / interpreter.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_5_2_opt_b">
                  <div class="para" id="p-796">The compiler and / or interpreter will only do what you instruct it to do. It does not understand what the problem is that you want to solve.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_5_2_opt_c">
                  <div class="para" id="p-797">The computer.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_5_2_opt_c">
                  <div class="para" id="p-798">The computer does not understand your problem. It just executes the instructions that it is given.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_5_2_opt_d">
                  <div class="para" id="p-799">The teacher / instructor.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_5_2_opt_d">
                  <div class="para" id="p-800">Your teacher and instructor may be able to find most of your semantic errors, but only because they have experience solving problems.  However it is your responsibility to understand the problem so you can develop a correct solution.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>debugging_know-your-error-messages</id>
      <title>Know Your Error Messages</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac3_6_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac3_6_1_editor" data-question_label="" data-codelens="true">current_time_str = input("What is the current time (in hours 0-23)?")
wait_time_str = input("How many hours do you want to wait")

current_time_int = int(current_time_str)
wait_time_int = int(wait_time_int)

final_time_int = current_time_int + wait_time_int
print(final_time_int)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 3.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question3_6_1" data-multipleanswers="false">
                <div class="para" id="p-806">Which of the following explains why <code class="code-inline tex2jax_ignore">wait_time_int = int(wait_time_int)</code> is an error?</div>
                <li data-component="answer" id="foppff_1_question3_6_1_opt_a">
                  <div class="para" id="p-807">You cannot use a variable on both the left and right hand sides of an assignment statement.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_6_1_opt_a">
                  <div class="para" id="p-808">No, You can, as long as all the variables on the right hand side already have values.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_6_1_opt_b" data-correct="">
                  <div class="para" id="p-809">wait_time_int does not have a value so it cannot be used on the right hand side.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_6_1_opt_b">
                  <div class="para" id="p-810">Yes. Variables must already have values in order to be used on the right hand side.</div>
                </li>
                <li data-component="answer" id="foppff_1_question3_6_1_opt_c">
                  <div class="para" id="p-811">This is not really an error, Python is broken.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question3_6_1_opt_c">
                  <div class="para" id="p-812">No, No, No!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac3_6_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac3_6_4_editor" data-question_label="" data-codelens="true">a = input('wpisz godzine')
x = input('wpisz liczbe godzin')
int(x)
int(a)
h = x // 24
s = x % 24
print (h, s)
a = a + s
print ('godzina teraz', a)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac3_6_5">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac3_6_5_editor" data-question_label="" data-codelens="true">str_time = input("What time is it now?")
str_wait_time = input("What is the number of hours to wait?")
time = int(str_time)
wai_time = int(str_wait_time)

time_when_alarm_go_off = time + wait_time
print(time_when_alarm_go_off)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac3_6_6">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac3_6_6_editor" data-question_label="" data-codelens="true">n = input("What time is it now (in hours)?")
n = imt(n)
m = input("How many hours do you want to wait?")
m = int(m)
sum_time = n + m
time_of_day = sum_time % 12
print("The time is now", time_of_day)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac3_6_7">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac3_6_7_editor" data-question_label="" data-codelens="true">present_time = input("Enter the present timein hours:")
set_alarm = input("Set the hours for alarm:")
int (present_time, set_time, alarm_time)
alarm_time = present_time + set_alarm
print(alarm_time)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac3_6_8">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac3_6_8_editor" data-question_label="" data-codelens="true">current_time_str = input("What is the current time (in hours 0-23)?")
current_time_int = int(current_time_str)

wait_time_str = input("How many hours do you want to wait")
wait_time_int = int(wait_time_str)

final_time_int = current_time_int + wait_time_int
print(final_time_int)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-4</id>
    <title>Functions</title>
    <subchapter>
      <id>functions_introduction-to-functions</id>
      <title>Introduction to Functions</title>
    </subchapter>
    <subchapter>
      <id>functions_function-definition</id>
      <title>Function Definition</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_2_1_editor" data-question_label="" data-codelens="true">def hello() -&gt; None:
    """This function says hello and greets you"""
    print("Hello")
    print("Glad to meet you")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_function-invocation</id>
      <title>Function Invocation</title>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens4_3_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens4_3_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_3_1" data-multipleanswers="false">
                <div class="para" id="p-906">What is a function in Python?</div>
                <li data-component="answer" id="foppff_1_question4_3_1_opt_a" data-correct="">
                  <div class="para" id="p-907">A named sequence of statements.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_3_1_opt_a">
                  <div class="para" id="p-908">Yes, a function is a named sequence of statements.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_3_1_opt_b">
                  <div class="para" id="p-909">Any sequence of statements.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_3_1_opt_b">
                  <div class="para" id="p-910">While functions contain sequences of statements, not all sequences of statements are considered functions.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_3_1_opt_c">
                  <div class="para" id="p-911">A mathematical expression that calculates a value.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_3_1_opt_c">
                  <div class="para" id="p-912">While some functions do calculate values, the python idea of a function is slightly different from the mathematical idea of a function in that not all functions calculate values. Consider, for example, the turtle functions in this section. They made the turtle draw a specific shape, rather than calculating a value.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_3_1_opt_d">
                  <div class="para" id="p-913">A statement of the form x = 5 + 4.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_3_1_opt_d">
                  <div class="para" id="p-914">This statement is called an assignment statement. It assigns the value on the right (9), to the name on the left (x).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_3_2" data-multipleanswers="false">
                <div class="para" id="p-915">What is one main purpose of a function?</div>
                <li data-component="answer" id="foppff_1_question4_3_2_opt_a">
                  <div class="para" id="p-916">To improve the speed of execution</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_3_2_opt_a">
                  <div class="para" id="p-917">Functions have little effect on how fast the program runs.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_3_2_opt_b" data-correct="">
                  <div class="para" id="p-918">To help the programmer organize programs into chunks that match how they think about the solution to the problem.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_3_2_opt_b">
                  <div class="para" id="p-919">While functions are not required, they help the programmer better think about the solution by organizing pieces of the solution into logical chunks that can be reused.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_3_2_opt_c">
                  <div class="para" id="p-920">All Python programs must be written using functions</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_3_2_opt_c">
                  <div class="para" id="p-921">In the first several chapters, you have seen many examples of Python programs written without the use of functions. While writing and using functions is desirable and essential for good programming style as your programs get longer, it is not required.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_3_2_opt_d">
                  <div class="para" id="p-922">To calculate values.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_3_2_opt_d">
                  <div class="para" id="p-923">Not all functions calculate values.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.3.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_3_3" data-multipleanswers="false"><div class="para" id="p-924">How many lines will be output by executing this code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def hello() -&gt; None:
  print("Hello")
  print("Glad to meet you")
</code></pre></div><li data-component="answer" id="foppff_1_question4_3_3_opt_a" data-correct=""><div class="para" id="p-925">0</div></li><li data-component="feedback" id="foppff_1_question4_3_3_opt_a"><div class="para" id="p-926">The code only defines the function. Nothing prints until the function is called.</div></li><li data-component="answer" id="foppff_1_question4_3_3_opt_b"><div class="para" id="p-927">1</div></li><li data-component="feedback" id="foppff_1_question4_3_3_opt_b"><div class="para" id="p-928">Check again.</div></li><li data-component="answer" id="foppff_1_question4_3_3_opt_c"><div class="para" id="p-929">2</div></li><li data-component="feedback" id="foppff_1_question4_3_3_opt_c"><div class="para" id="p-930">When the function is invoked, it will print two lines, but it has only been defined, not invoked.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.3.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_3_4" data-multipleanswers="false"><div class="para" id="p-931">How many lines will be output by executing this code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def hello() -&gt; None:
  print("Hello")
  print("Glad to meet you")

hello()
print("It works")
hello()
hello()
</code></pre></div><li data-component="answer" id="foppff_1_question4_3_4_opt_a"><div class="para" id="p-932">0</div></li><li data-component="feedback" id="foppff_1_question4_3_4_opt_a"><div class="para" id="p-933">Here the the function is invoked and there is also a separate print statement.</div></li><li data-component="answer" id="foppff_1_question4_3_4_opt_b"><div class="para" id="p-934">1</div></li><li data-component="feedback" id="foppff_1_question4_3_4_opt_b"><div class="para" id="p-935">There is only one print statement outside the funciton, but the invocations of hello also cause lines to print.</div></li><li data-component="answer" id="foppff_1_question4_3_4_opt_c"><div class="para" id="p-936">3</div></li><li data-component="feedback" id="foppff_1_question4_3_4_opt_c"><div class="para" id="p-937">There are three print statements, but the function is invoked more than once.</div></li><li data-component="answer" id="foppff_1_question4_3_4_opt_d"><div class="para" id="p-938">4</div></li><li data-component="feedback" id="foppff_1_question4_3_4_opt_d"><div class="para" id="p-939">Each time the function is invoked, it will print two lines, not one.</div></li><li data-component="answer" id="foppff_1_question4_3_4_opt_e" data-correct=""><div class="para" id="p-940">7</div></li><li data-component="feedback" id="foppff_1_question4_3_4_opt_e"><div class="para" id="p-941">Three invocations generate two lines each, plus the line "It works".</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_function-parameters</id>
      <title>Function Parameters</title>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens4_4_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens4_4_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_4_1_editor" data-question_label="" data-codelens="true">def hello2(who: str) -&gt; None:
    print("Hello " + who)
    print("Glad to meet you")

hello2("Iman" + " and Jackie")
hello2("Class " * 3)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens4_4_2" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens4_4_2.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_4_1" data-multipleanswers="false">
                <div class="para" id="p-960">Which of the following is a valid function header (first line of a function definition)?</div>
                <li data-component="answer" id="foppff_1_question4_4_1_opt_a" data-correct="">
                  <div class="para" id="p-961">def greet(t: str) -&gt; None:</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_4_1_opt_a">
                  <div class="para" id="p-962">A function may take zero or more parameters. In this case it has one.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_4_1_opt_b">
                  <div class="para" id="p-963">def greet:</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_4_1_opt_b">
                  <div class="para" id="p-964">A function needs to specify its parameters in its header. If there are no paramters, put () after the function name.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_4_1_opt_c">
                  <div class="para" id="p-965">greet(t: str, n: int) -&gt; None:</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_4_1_opt_c">
                  <div class="para" id="p-966">A function definition needs to include the keyword def.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_4_1_opt_d">
                  <div class="para" id="p-967">def greet(t: str, n: int) -&gt; None</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_4_1_opt_d">
                  <div class="para" id="p-968">A function definition header must end in a colon (:).</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_4_2" data-multipleanswers="false"><div class="para" id="p-969">What is the name of the following function?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def print_many(x: str, y: int) -&gt; None:
    """Print out string x, y times."""
    message = x * y
    print(message)
</code></pre></div><li data-component="answer" id="foppff_1_question4_4_2_opt_a"><div class="para" id="p-970">def print_many(x: str, y: int) -&gt; None:</div></li><li data-component="feedback" id="foppff_1_question4_4_2_opt_a"><div class="para" id="p-971">This line is the complete function header (except for the semi-colon) which includes the name as well as several other components.</div></li><li data-component="answer" id="foppff_1_question4_4_2_opt_b" data-correct=""><div class="para" id="p-972">print_many</div></li><li data-component="feedback" id="foppff_1_question4_4_2_opt_b"><div class="para" id="p-973">Yes, the name of the function is given after the keyword def and before the list of parameters.</div></li><li data-component="answer" id="foppff_1_question4_4_2_opt_c"><div class="para" id="p-974">print_many(x: str, y: int)</div></li><li data-component="feedback" id="foppff_1_question4_4_2_opt_c"><div class="para" id="p-975">This includes the function name and its parameters</div></li><li data-component="answer" id="foppff_1_question4_4_2_opt_d"><div class="para" id="p-976">Print out string x, y times.</div></li><li data-component="feedback" id="foppff_1_question4_4_2_opt_d"><div class="para" id="p-977">This is a comment stating what the function does.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.4.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_4_3" data-multipleanswers="false"><div class="para" id="p-978">What are the parameters of the following function?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def print_many(x: str, y: int) -&gt; None:
    """Print out string x, y times."""
    message = x * y
    print(message)
</code></pre></div><li data-component="answer" id="foppff_1_question4_4_3_opt_a"><div class="para" id="p-979">i</div></li><li data-component="feedback" id="foppff_1_question4_4_3_opt_a"><div class="para" id="p-980">i is a variable used inside of the function, but not a parameter, which is passed in to the function.</div></li><li data-component="answer" id="foppff_1_question4_4_3_opt_b"><div class="para" id="p-981">x</div></li><li data-component="feedback" id="foppff_1_question4_4_3_opt_b"><div class="para" id="p-982">x is only one of the parameters to this function.</div></li><li data-component="answer" id="foppff_1_question4_4_3_opt_c" data-correct=""><div class="para" id="p-983">x, y</div></li><li data-component="feedback" id="foppff_1_question4_4_3_opt_c"><div class="para" id="p-984">Yes, the function specifies two parameters: a string x and an int y.</div></li><li data-component="answer" id="foppff_1_question4_4_3_opt_d"><div class="para" id="p-985">x, y, i</div></li><li data-component="feedback" id="foppff_1_question4_4_3_opt_d"><div class="para" id="p-986">the parameters include only those variables whose values that the function expects to receive as input. They are specified in the header of the function.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.4.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_4_4" data-multipleanswers="false"><div class="para" id="p-987">Considering the function below, which of the following statements correctly invokes, or calls, this function (i.e., causes it to run)?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def print_many(x: str, y: int) -&gt; None:
  """Print out string x, y times."""
  message = x * y
  print(message)

z = 3
</code></pre></div><li data-component="answer" id="foppff_1_question4_4_4_opt_a"><div class="para" id="p-988">print_many(x, y)</div></li><li data-component="feedback" id="foppff_1_question4_4_4_opt_a"><div class="para" id="p-989">No, x and y are the names of the formal parameters to this function. When the function is called, it requires actual values to be passed in.</div></li><li data-component="answer" id="foppff_1_question4_4_4_opt_b"><div class="para" id="p-990">print_many</div></li><li data-component="feedback" id="foppff_1_question4_4_4_opt_b"><div class="para" id="p-991">A function call always requires parentheses after the name of the function.</div></li><li data-component="answer" id="foppff_1_question4_4_4_opt_c"><div class="para" id="p-992">print_many("Greetings")</div></li><li data-component="feedback" id="foppff_1_question4_4_4_opt_c"><div class="para" id="p-993">This function takes two parameters (arguments)</div></li><li data-component="answer" id="foppff_1_question4_4_4_opt_d"><div class="para" id="p-994">print_many("Greetings", 10):</div></li><li data-component="feedback" id="foppff_1_question4_4_4_opt_d"><div class="para" id="p-995">A colon is only required in a function definition. It will cause an error with a function call.</div></li><li data-component="answer" id="foppff_1_question4_4_4_opt_e" data-correct=""><div class="para" id="p-996">print_many("Greetings", z)</div></li><li data-component="feedback" id="foppff_1_question4_4_4_opt_e"><div class="para" id="p-997">Since z has the value 3, we have passed in two correct values for this function. "Greetings" will be printed 3 times.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.4.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_4_5" data-multipleanswers="false"><div class="para" id="p-998">What output will the following code produce?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">CONSTANT_VALUE = -8
def cyu(n1: int, n2: int) -&gt; int:
    print(n1 + n2 - CONSTANT_VALUE)

cyu(4, 3)
</code></pre></div><li data-component="answer" id="foppff_1_question4_4_5_opt_a"><div class="para" id="p-999">7</div></li><li data-component="feedback" id="foppff_1_question4_4_5_opt_a"><div class="para" id="p-1000">n3 was given a value; it would be included in the returned value.</div></li><li data-component="answer" id="foppff_1_question4_4_5_opt_b" data-correct=""><div class="para" id="p-1001">15</div></li><li data-component="feedback" id="foppff_1_question4_4_5_opt_b"><div class="para" id="p-1002">4 + 3 - (-8) is 15.</div></li><li data-component="answer" id="foppff_1_question4_4_5_opt_c"><div class="para" id="p-1003">-1</div></li><li data-component="feedback" id="foppff_1_question4_4_5_opt_c"><div class="para" id="p-1004">n3 is a negative number that is subtracted from the sum of n1 and n2.</div></li><li data-component="answer" id="foppff_1_question4_4_5_opt_d"><div class="para" id="p-1005">The function would produce an error.</div></li><li data-component="feedback" id="foppff_1_question4_4_5_opt_d"><div class="para" id="p-1006">This code contains no errors.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_returning-a-value-from-a-function</id>
      <title>Returning a value from a function</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_2_1_editor" data-question_label="" data-codelens="true">def hello() -&gt; None:
    """This function says hello and greets you
    but no value is returned."""
    print("Hello")
    print("Glad to meet you")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_5_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_5_1_editor" data-question_label="" data-codelens="true">def square(an_integer: int) -&gt; int:
    """With any integer, this function will produce its squared value."""
    result = an_integer * an_integer
    return result

the_integer = 10
result = square(the_integer)
print(f"The result of {the_integer} squared is {result}.")
another_integer = 11
result = square(another_integer)
print(f"The result of {another_integer} squared is {result}.")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens4_5_2" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens4_5_2.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_5_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_5_2_editor" data-question_label="" data-codelens="true">def weird() -&gt; int:
    print("here")
    return 5
    print("there")
    return 10

x = weird()
print(x)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_5_1" data-multipleanswers="false"><div class="para" id="p-1038">What is wrong with the following function definition:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def add_em(x, y, z):
    return x+y+z
    print('the answer is', x+y+z)
</code></pre></div><li data-component="answer" id="foppff_1_question4_5_1_opt_a"><div class="para" id="p-1039">You should never use a print statement in a function definition.</div></li><li data-component="feedback" id="foppff_1_question4_5_1_opt_a"><div class="para" id="p-1040">Although you should not mistake print for return, you may include print statements inside your functions.</div></li><li data-component="answer" id="foppff_1_question4_5_1_opt_b" data-correct=""><div class="para" id="p-1041">You should not have any statements in a function after the return statement. Once the function gets to the return statement it will immediately stop executing the function.</div></li><li data-component="feedback" id="foppff_1_question4_5_1_opt_b"><div class="para" id="p-1042">This is a very common mistake so be sure to watch out for it when you write your code!</div></li><li data-component="answer" id="foppff_1_question4_5_1_opt_c"><div class="para" id="p-1043">You must calculate the value of x+y+z before you return it.</div></li><li data-component="feedback" id="foppff_1_question4_5_1_opt_c"><div class="para" id="p-1044">Python will automatically calculate the value x+y+z and then return it in the statement as it is written</div></li><li data-component="answer" id="foppff_1_question4_5_1_opt_d"><div class="para" id="p-1045">A function cannot return a number.</div></li><li data-component="feedback" id="foppff_1_question4_5_1_opt_d"><div class="para" id="p-1046">Functions can return any legal data, including (but not limited to) numbers, strings, booleans, etc.</div></li><li data-component="answer" id="foppff_1_question4_5_1_opt_e"><div class="para" id="p-1047">There is no type hinting.</div></li><li data-component="feedback" id="foppff_1_question4_5_1_opt_e"><div class="para" id="p-1048">Although type hinting is standard in Python, functions don’t require it.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_5_2" data-multipleanswers="false"><div class="para" id="p-1049">What will the following function return?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def add_em(x: int, y: int, z: int):
    print(x+y+z)
</code></pre></div><li data-component="answer" id="foppff_1_question4_5_2_opt_a" data-correct=""><div class="para" id="p-1050">The value None</div></li><li data-component="feedback" id="foppff_1_question4_5_2_opt_a"><div class="para" id="p-1051">We have accidentally used print where we mean return. Therefore, the function will return the value None by default. This is a VERY COMMON mistake so watch out! This mistake is also particularly difficult to find because when you run the function the output looks the same. It is not until you try to assign its value to a variable that you can notice a difference.</div></li><li data-component="answer" id="foppff_1_question4_5_2_opt_b"><div class="para" id="p-1052">The value of x+y+z</div></li><li data-component="feedback" id="foppff_1_question4_5_2_opt_b"><div class="para" id="p-1053">Careful! This is a very common mistake. Here we have printed the value x+y+z but we have not returned it. To return a value we MUST use the return keyword.</div></li><li data-component="answer" id="foppff_1_question4_5_2_opt_c"><div class="para" id="p-1054">The string ’x+y+z’</div></li><li data-component="feedback" id="foppff_1_question4_5_2_opt_c"><div class="para" id="p-1055">x+y+z calculates a number which represents the sum of the values x, y and z.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_5_3" data-multipleanswers="false"><div class="para" id="p-1056">What will the following code output?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def square(x: int) -&gt; int:
    y = x * x
    return y

print(square(5) + square(5))
</code></pre></div><li data-component="answer" id="foppff_1_question4_5_3_opt_a"><div class="para" id="p-1057">25</div></li><li data-component="feedback" id="foppff_1_question4_5_3_opt_a"><div class="para" id="p-1058">It squares 5 twice, and adds them together.</div></li><li data-component="answer" id="foppff_1_question4_5_3_opt_b" data-correct=""><div class="para" id="p-1059">50</div></li><li data-component="feedback" id="foppff_1_question4_5_3_opt_b"><div class="para" id="p-1060">The two return values are added together.</div></li><li data-component="answer" id="foppff_1_question4_5_3_opt_c"><div class="para" id="p-1061">25 + 25</div></li><li data-component="feedback" id="foppff_1_question4_5_3_opt_c"><div class="para" id="p-1062">The two results are substituted into the expression and then it is evaluated. The returned values are integers in this case, not strings.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_5_4" data-multipleanswers="false"><div class="para" id="p-1063">What will the following code output?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def square(x: int) -&gt; int:
    y = x * x
    return y

print(square(square(2)))
</code></pre></div><li data-component="answer" id="foppff_1_question4_5_4_opt_a"><div class="para" id="p-1064">8</div></li><li data-component="feedback" id="foppff_1_question4_5_4_opt_a"><div class="para" id="p-1065">It squares 2, yielding the value 4. But that doesn’t mean the next value multiplies 2 and 4.</div></li><li data-component="answer" id="foppff_1_question4_5_4_opt_b" data-correct=""><div class="para" id="p-1066">16</div></li><li data-component="feedback" id="foppff_1_question4_5_4_opt_b"><div class="para" id="p-1067">It squares 2, yielding the value 4. 4 is then passed as a value to square again, yeilding 16.</div></li><li data-component="answer" id="foppff_1_question4_5_4_opt_c"><div class="para" id="p-1068">Error: can’t put a function invocation inside parentheses</div></li><li data-component="feedback" id="foppff_1_question4_5_4_opt_c"><div class="para" id="p-1069">This is a more complicated expression, but still valid. The expression square(2) is evaluated, and the return value 4 substitutes for square(2) in the expression.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_5_6" data-multipleanswers="false"><div class="para" id="p-1070">Which will print out first, square, g, or a number?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def square(x: int) -&gt; int:
    print("square")
    return x*x

def g(y: int) -&gt; int:
    print("g")
    return y + 3

print(square(g(2)))
</code></pre></div><li data-component="answer" id="foppff_1_question4_5_6_opt_a"><div class="para" id="p-1071">square</div></li><li data-component="feedback" id="foppff_1_question4_5_6_opt_a"><div class="para" id="p-1072">Before executing square, it has to figure out what value to pass in, so g is executed first</div></li><li data-component="answer" id="foppff_1_question4_5_6_opt_b" data-correct=""><div class="para" id="p-1073">g</div></li><li data-component="feedback" id="foppff_1_question4_5_6_opt_b"><div class="para" id="p-1074">g has to be executed and return a value in order to know what paramater value to provide to x.</div></li><li data-component="answer" id="foppff_1_question4_5_6_opt_c"><div class="para" id="p-1075">a number</div></li><li data-component="feedback" id="foppff_1_question4_5_6_opt_c"><div class="para" id="p-1076">square and g both have to execute before the number is printed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_5_4">
                <div class="ac_question col-md-12" id="foppff_1_ac4_5_4_question">
                  <div class="para" id="p-1077"><dfn class="terminology">8.</dfn> Write a function named <code class="code-inline tex2jax_ignore">same</code> that takes a string as input, and simply returns that string.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_5_4_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(same('hello'), 'hello', "Testing the same function on input 'hello'.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_5_5">
                <div class="ac_question col-md-12" id="foppff_1_ac4_5_5_question">
                  <div class="para" id="p-1078"><dfn class="terminology">9.</dfn> Write a function called <code class="code-inline tex2jax_ignore">same_thing</code> that returns the parameter, unchanged.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_5_5_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(same_thing(5), 5,"Testing the function same_thing with input 5")
        self.assertEqual(same_thing("Welcome"), "Welcome", "Testing the function same_thing with input 'Welcome'")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_5_6">
                <div class="ac_question col-md-12" id="foppff_1_ac4_5_6_question">
                  <div class="para" id="p-1079"><dfn class="terminology">10.</dfn> Write a function called <code class="code-inline tex2jax_ignore">subtract_three</code> that takes an integer or any number as input, and returns that number minus three.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_5_6_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(subtract_three(9), 6, "Testing the subtract_three function on input 9.")
        self.assertEqual(subtract_three(-5), -8, "Testing the subtract_three function on input -5.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_5_7">
                <div class="ac_question col-md-12" id="foppff_1_ac4_5_7_question">
                  <div class="para" id="p-1080"><dfn class="terminology">11.</dfn> Write a function called <code class="code-inline tex2jax_ignore">change</code> that takes one number as its input and returns that number, plus 7.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_5_7_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(change(5), 12,"Testing the function change with input 5")
        self.assertEqual(change(-10), -3, "Testing the function change with input -10")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_5_8">
                <div class="ac_question col-md-12" id="foppff_1_ac4_5_8_question">
                  <div class="para" id="p-1081"><dfn class="terminology">12.</dfn> Write a function named <code class="code-inline tex2jax_ignore">intro</code> that takes a string as input. This string is intended to be a person’s name and the output is a standardized greeting. For example, given the string “Becky” as input, the function should return: “Hello, my name is Becky and I love COMP 1701.”</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_5_8_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(intro("Mike"), "Hello, my name is Mike and I love COMP 1701.", "Testing the intro function on input 'Mike'.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.5.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_5_9">
                <div class="ac_question col-md-12" id="foppff_1_ac4_5_9_question">
                  <div class="para" id="p-1082"><dfn class="terminology">13.</dfn> Write a function called <code class="code-inline tex2jax_ignore">s_change</code> that takes one string as input and returns that string, concatenated with the string “for fun.”.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_5_9_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(s_change("Coding"), "Coding for fun." ,"Testing the function s_change with input coding")
        self.assertEqual(s_change("We go to the beach"), "We go to the beach for fun." , "Testing the function s_change with input We go to the beach")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_decoding-a-function</id>
      <title>Decoding a Function</title>
      <question>
        <label>Checkpoint 4.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_6_1" data-multipleanswers="false"><div class="para" id="p-1107">How many parameters does function cyu3 take?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def cyu3(x: ???, y: ???) -&gt; ???:
  COEFFICIENT = 2.5
  return (x + y) * COEFFICIENT
</code></pre></div><li data-component="answer" id="foppff_1_question4_6_1_opt_a"><div class="para" id="p-1108">0</div></li><li data-component="feedback" id="foppff_1_question4_6_1_opt_a"><div class="para" id="p-1109">Count the number of variable names inside the parenetheses on line 1.</div></li><li data-component="answer" id="foppff_1_question4_6_1_opt_b"><div class="para" id="p-1110">1</div></li><li data-component="feedback" id="foppff_1_question4_6_1_opt_b"><div class="para" id="p-1111">Count the number of variable names inside the parenetheses on line 1.</div></li><li data-component="answer" id="foppff_1_question4_6_1_opt_c" data-correct=""><div class="para" id="p-1112">2</div></li><li data-component="feedback" id="foppff_1_question4_6_1_opt_c"><div class="para" id="p-1113">x and y.</div></li><li data-component="answer" id="foppff_1_question4_6_1_opt_d"><div class="para" id="p-1114">3</div></li><li data-component="feedback" id="foppff_1_question4_6_1_opt_d"><div class="para" id="p-1115">Count the number of variable names inside the parenetheses on line 1.</div></li><li data-component="answer" id="foppff_1_question4_6_1_opt_e"><div class="para" id="p-1116">Can’t tell</div></li><li data-component="feedback" id="foppff_1_question4_6_1_opt_e"><div class="para" id="p-1117">You can tell by looking inside the parentheses on line 1. Each variable name is separated by a comma.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_6_2" data-multipleanswers="true"><div class="para" id="p-1118">What are the possible types of variables x and y?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def cyu3(x: ???, y: ???) -&gt; ???:
  COEFFICIENT = 2.5
  return (x + y) * COEFFICIENT
</code></pre></div><li data-component="answer" id="foppff_1_question4_6_2_opt_a" data-correct=""><div class="para" id="p-1119">integer</div></li><li data-component="feedback" id="foppff_1_question4_6_2_opt_a"><div class="para" id="p-1120">Addition and multiplication can be performed on both floats and integers.</div></li><li data-component="answer" id="foppff_1_question4_6_2_opt_b" data-correct=""><div class="para" id="p-1121">float</div></li><li data-component="feedback" id="foppff_1_question4_6_2_opt_b"><div class="para" id="p-1122">Addition and multiplication can be performed on both floats and integers.</div></li><li data-component="answer" id="foppff_1_question4_6_2_opt_c"><div class="para" id="p-1123">x could be a string and y could be a float</div></li><li data-component="feedback" id="foppff_1_question4_6_2_opt_c"><div class="para" id="p-1124">Although possible, there’s a more general answer.</div></li><li data-component="answer" id="foppff_1_question4_6_2_opt_d"><div class="para" id="p-1125">string</div></li><li data-component="feedback" id="foppff_1_question4_6_2_opt_d"><div class="para" id="p-1126">Strings cannot be multiplied by a float.</div></li><li data-component="answer" id="foppff_1_question4_6_2_opt_e"><div class="para" id="p-1127">Can’t tell</div></li><li data-component="feedback" id="foppff_1_question4_6_2_opt_e"><div class="para" id="p-1128">You can tell from some of the operations that are performed on them.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_6_3" data-multipleanswers="false"><div class="para" id="p-1129">What datatype is returned?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def cyu3(x: ???, y: ???) -&gt; ???:
  COEFFICIENT = 2.5
  return (x + y) * COEFFICIENT
</code></pre></div><li data-component="answer" id="foppff_1_question4_6_3_opt_a"><div class="para" id="p-1130">integer</div></li><li data-component="feedback" id="foppff_1_question4_6_3_opt_a"><div class="para" id="p-1131">Since the sum of x and y is multiplied by a float, the value can not be an integer.</div></li><li data-component="answer" id="foppff_1_question4_6_3_opt_b" data-correct=""><div class="para" id="p-1132">float</div></li><li data-component="feedback" id="foppff_1_question4_6_3_opt_b"><div class="para" id="p-1133">The sum of x and y is multiplied by a float, meaning the returned value is a float.</div></li><li data-component="answer" id="foppff_1_question4_6_3_opt_c"><div class="para" id="p-1134">string</div></li><li data-component="feedback" id="foppff_1_question4_6_3_opt_c"><div class="para" id="p-1135">Strings cannot be multiplied by floats.</div></li><li data-component="answer" id="foppff_1_question4_6_3_opt_d"><div class="para" id="p-1136">boolean</div></li><li data-component="feedback" id="foppff_1_question4_6_3_opt_d"><div class="para" id="p-1137">There are no boolean operations in the given function.</div></li><li data-component="answer" id="foppff_1_question4_6_3_opt_e"><div class="para" id="p-1138">Can’t tell</div></li><li data-component="feedback" id="foppff_1_question4_6_3_opt_e"><div class="para" id="p-1139">You can tell from some of the operations that are performed on it.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_6_4" data-multipleanswers="true"><div class="para" id="p-1140">What should this function’s header look like?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">"""
Calculates the combined areas of two squares.

Parameters:
  width_a : _____
  The width of the first square.
  width_b : _____
  The width of the second square.

Returns:
  _____ : The combined areas of the squares.
"""
</code></pre></div><li data-component="answer" id="foppff_1_question4_6_4_opt_a" data-correct=""><div class="para" id="p-1141">def squares_area(width_a: int, width_b: int) -&gt; int:</div></li><li data-component="feedback" id="foppff_1_question4_6_4_opt_a"><div class="para" id="p-1142">Since both pieces of data are integers, and the formula for calculating the area of a square wouldn’t result in a float given an integer, this would be correct.</div></li><li data-component="answer" id="foppff_1_question4_6_4_opt_b"><div class="para" id="p-1143">def squares_area(width_a: float, width_b: float) -&gt; int:</div></li><li data-component="feedback" id="foppff_1_question4_6_4_opt_b"><div class="para" id="p-1144">Based on the formula for finding the area of a square, and that no rounding is present, by giving this function two floats, an integer would not be returned.</div></li><li data-component="answer" id="foppff_1_question4_6_4_opt_c"><div class="para" id="p-1145">def squares_area(width_a: int, width_b: int) -&gt; float:</div></li><li data-component="feedback" id="foppff_1_question4_6_4_opt_c"><div class="para" id="p-1146">Based on the formula for finding the area of a square, and that the widths are only being multiplied, by giving this function two integers, a float could not be returned.</div></li><li data-component="answer" id="foppff_1_question4_6_4_opt_d" data-correct=""><div class="para" id="p-1147">def squares_area(width_a: float, width_b: float) -&gt; float:</div></li><li data-component="feedback" id="foppff_1_question4_6_4_opt_d"><div class="para" id="p-1148">Since both pieces of data are floats, and the formula for calculating the area of a square would result in a float given a float, this would be correct.</div></li><li data-component="answer" id="foppff_1_question4_6_4_opt_e"><div class="para" id="p-1149">def squares_area(width_a, width_b):</div></li><li data-component="feedback" id="foppff_1_question4_6_4_opt_e"><div class="para" id="p-1150">Although technically correct, type hinting would make this function easier to interpret.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_type-annotations</id>
      <title>Type Annotations</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_7_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_7_1_editor" data-question_label="" data-codelens="true">def duplicate(msg: str) -&gt; str:
    """Returns a string containing two copies of `msg`"""

    return msg + msg

result = duplicate('Hello')
print(result)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_7_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_7_2_editor" data-question_label="" data-codelens="true">def add(x: int, y: int) -&gt; int:
    """Returns the sum of `x` and `y`"""

    return x + y

def get_number(msg: str) -&gt; float:
    """Prompts with `msg` for input; returns numeric response."""

    return float(input(msg))

def display_msg(msg: str):
    """Displays `msg` with dashed line underneath"""

    print(msg)
    print('-------------------------------------')
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_7_1" data-multipleanswers="false"><div class="para" id="p-1164">What happens when the following is executed?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def display(msg: str):
    """Displays `msg` on the screen"""
    print(msg + 2)

display(2.5)
</code></pre></div><li data-component="answer" id="foppff_1_question4_7_1_opt_a" data-correct=""><div class="para" id="p-1165">The value 4.5 is displayed on the screen.</div></li><li data-component="feedback" id="foppff_1_question4_7_1_opt_a"><div class="para" id="p-1166">Correct! Python ignores the ’: str’ annotation and returns the sum of msg (the float 2.5) + 2.</div></li><li data-component="answer" id="foppff_1_question4_7_1_opt_b"><div class="para" id="p-1167">The value 2.52 is displayed on the screen.</div></li><li data-component="feedback" id="foppff_1_question4_7_1_opt_b"><div class="para" id="p-1168">Incorrect. In this call, msg contains the float value 2.5; the ’: str’ annotation serves only as documentation.</div></li><li data-component="answer" id="foppff_1_question4_7_1_opt_c"><div class="para" id="p-1169">A crash occurs because 2.5 is not a string</div></li><li data-component="feedback" id="foppff_1_question4_7_1_opt_c"><div class="para" id="p-1170">Incorrect. Python ignores the ’: str’ annotation and allows the float value 2.5 to be passed to msg.</div></li><li data-component="answer" id="foppff_1_question4_7_1_opt_d"><div class="para" id="p-1171">A crash occurs because the expression ’msg + 2’ illegally attempts to concatenate a str and an int</div></li><li data-component="feedback" id="foppff_1_question4_7_1_opt_d"><div class="para" id="p-1172">Incorrect. In this call, msg contains the float value 2.5, not a str, so the + operation is legal.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_variables-and-parameters-are-local</id>
      <title>Variables and parameters are local</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_8_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_8_1_editor" data-question_label="" data-codelens="true">def square(x):
    y = x * x
    return y

z = square(10)
print(y)
print(x)
print(z)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.8.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_8_1" data-multipleanswers="false">
                <div class="para" id="p-1187">True or False: Local variables can be referenced outside of the function they were defined in.</div>
                <li data-component="answer" id="foppff_1_question4_8_1_opt_a">
                  <div class="para" id="p-1188">True</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_8_1_opt_a">
                  <div class="para" id="p-1189">Local variables cannot be referenced outside of the function they were defined in.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_8_1_opt_b" data-correct="">
                  <div class="para" id="p-1190">False</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_8_1_opt_b">
                  <div class="para" id="p-1191">Local variables cannot be referenced outside of the function they were defined in.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.8.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_8_2" data-multipleanswers="false"><div class="para" id="p-1192">What would be the result of running the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">x = 3 * 2
y = 1

def subtract(z):
    y = 10
    return y - z

print(subtract(x))
</code></pre></div><li data-component="answer" id="foppff_1_question4_8_2_opt_a" data-correct=""><div class="para" id="p-1193">4</div></li><li data-component="feedback" id="foppff_1_question4_8_2_opt_a"><div class="para" id="p-1194">Correct, the output is right because the subtract function takes in x as the global variable for the z parameter and puts it into the function. The subtract function uses the local variable y for its return.</div></li><li data-component="answer" id="foppff_1_question4_8_2_opt_b"><div class="para" id="p-1195">6</div></li><li data-component="feedback" id="foppff_1_question4_8_2_opt_b"><div class="para" id="p-1196">Incorrect, look again at what is being produced in the subtract function.</div></li><li data-component="answer" id="foppff_1_question4_8_2_opt_c"><div class="para" id="p-1197">10</div></li><li data-component="feedback" id="foppff_1_question4_8_2_opt_c"><div class="para" id="p-1198">Incorrect, look again at what is being produced in the subtract function.</div></li><li data-component="answer" id="foppff_1_question4_8_2_opt_d"><div class="para" id="p-1199">Code will give an error because x and z do not match.</div></li><li data-component="feedback" id="foppff_1_question4_8_2_opt_d"><div class="para" id="p-1200">Incorrect, there shouldn’t be any error.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.8.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_8_3" data-multipleanswers="false"><div class="para" id="p-1201">What would be the result of running the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def adding(x):
    y = 3
    z = y + x + x
    return z

def producing(x):
    z = x * y
    return z

print(producing(adding(4)))
</code></pre></div><li data-component="answer" id="foppff_1_question4_8_3_opt_a"><div class="para" id="p-1202">33</div></li><li data-component="feedback" id="foppff_1_question4_8_3_opt_a"><div class="para" id="p-1203">Incorrect, look again at what is happening in producing.</div></li><li data-component="answer" id="foppff_1_question4_8_3_opt_b"><div class="para" id="p-1204">12</div></li><li data-component="feedback" id="foppff_1_question4_8_3_opt_b"><div class="para" id="p-1205">Incorrect, look again at what is happening in producing.</div></li><li data-component="answer" id="foppff_1_question4_8_3_opt_c" data-correct=""><div class="para" id="p-1206">There is an error in the code.</div></li><li data-component="feedback" id="foppff_1_question4_8_3_opt_c"><div class="para" id="p-1207">Yes! There is an error because we reference y in the producing function, but it was defined in adding. Because y is a local variable, we can’t use it in both functions without initializing it in both. If we initialized y as 3 in both though, the answer would be 33.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.8.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_8_4" data-multipleanswers="false"><div class="para" id="p-1208">What would be the result of running the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">x = 9

def adding():
    x+=1
    print(x)

adding()
</code></pre></div><li data-component="answer" id="foppff_1_question4_8_4_opt_a"><div class="para" id="p-1209">1</div></li><li data-component="feedback" id="foppff_1_question4_8_4_opt_a"><div class="para" id="p-1210">Incorrect, pay attention to the local scope in the function.</div></li><li data-component="answer" id="foppff_1_question4_8_4_opt_b"><div class="para" id="p-1211">9</div></li><li data-component="feedback" id="foppff_1_question4_8_4_opt_b"><div class="para" id="p-1212">Incorrect, pay attention to the local scope in the function.</div></li><li data-component="answer" id="foppff_1_question4_8_4_opt_c"><div class="para" id="p-1213">10</div></li><li data-component="feedback" id="foppff_1_question4_8_4_opt_c"><div class="para" id="p-1214">Incorrect, pay attention to the local scope in the function.</div></li><li data-component="answer" id="foppff_1_question4_8_4_opt_d" data-correct=""><div class="para" id="p-1215">Error, local variable ’x’ is referenced before assignment.</div></li><li data-component="feedback" id="foppff_1_question4_8_4_opt_d"><div class="para" id="p-1216">This code gives an error because the local variable ’x’ was referenced in the local scope before it was assigned a value.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_global-variables</id>
      <title>Global Variables</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_9_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_9_1_editor" data-question_label="" data-codelens="true">def badsquare(x):
    y = x ** power
    return y

power = 2
result = badsquare(10)
print(result)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens4_9_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens4_9_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens4_9_2" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens4_9_2.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens4_9_3" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens4_9_3.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.9.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_9_1" data-multipleanswers="false">
                <div class="para" id="p-1238">What is a variable’s scope?</div>
                <li data-component="answer" id="foppff_1_question4_9_1_opt_a">
                  <div class="para" id="p-1239">Its value</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_9_1_opt_a">
                  <div class="para" id="p-1240">Value is the contents of the variable.  Scope concerns where the variable is "known".</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_9_1_opt_b" data-correct="">
                  <div class="para" id="p-1241">The range of statements in the code where a variable can be accessed.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_9_1_opt_b">
                  <div class="para" id="p-1242">Correct.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_9_1_opt_c">
                  <div class="para" id="p-1243">Its name</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_9_1_opt_c">
                  <div class="para" id="p-1244">The name of a variable is just an identifier or alias.  Scope concerns where the variable is "known".</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.9.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_9_2" data-multipleanswers="false">
                <div class="para" id="p-1245">What is a local variable?</div>
                <li data-component="answer" id="foppff_1_question4_9_2_opt_a" data-correct="">
                  <div class="para" id="p-1246">A temporary variable that is only used inside a function</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_9_2_opt_a">
                  <div class="para" id="p-1247">Yes, a local variable is a temporary variable that is only known (only exists) in the function it is defined in.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_9_2_opt_b">
                  <div class="para" id="p-1248">The same as a parameter</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_9_2_opt_b">
                  <div class="para" id="p-1249">While parameters may be considered local variables, functions may also define and use additional local variables.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_9_2_opt_c">
                  <div class="para" id="p-1250">Another name for any variable</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_9_2_opt_c">
                  <div class="para" id="p-1251">Variables that are used outside a function are not local, but rather global variables.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.9.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_9_3" data-multipleanswers="false">
                <div class="para" id="p-1252">Can you use the same name for a local variable as a global variable?</div>
                <li data-component="answer" id="foppff_1_question4_9_3_opt_a">
                  <div class="para" id="p-1253">Yes, and there is no reason not to.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_9_3_opt_a">
                  <div class="para" id="p-1254">While there is no problem as far as Python is concerned, it is generally considered bad style because of the potential for the programmer to get confused.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_9_3_opt_b" data-correct="">
                  <div class="para" id="p-1255">Yes, but it is considered bad form.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_9_3_opt_b">
                  <div class="para" id="p-1256">it is generally considered bad style because of the potential for the programmer to get confused.  If you must use global variables (also generally bad form) make sure they have unique names.</div>
                </li>
                <li data-component="answer" id="foppff_1_question4_9_3_opt_c">
                  <div class="para" id="p-1257">No, it will cause an error.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question4_9_3_opt_c">
                  <div class="para" id="p-1258">Python manages global and local scope separately and has clear rules for how to handle variables with the same name in different scopes, so this will not cause a Python error.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_functions-can-call-other-functions-composition</id>
      <title>Functions can call other functions (Composition)</title>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens4_10_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens4_10_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_10_1">
                <div class="ac_question col-md-12" id="foppff_1_ac4_10_1_question">
                  <div class="para" id="p-1289"><dfn class="terminology">1.</dfn> Write two functions, one called <code class="code-inline tex2jax_ignore">addit</code> and one called <code class="code-inline tex2jax_ignore">mult</code>. <code class="code-inline tex2jax_ignore">
        addit</code> takes one number as an input and adds 5. <code class="code-inline tex2jax_ignore">mult</code> takes one number as an input, and multiplies that input by whatever is returned by <code class="code-inline tex2jax_ignore">addit</code>, and then returns the result.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_10_1_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testOne(self):
    self.assertEqual(mult(1), 6,"Testing the function mult with input 1 (should be 6)")
    self.assertEqual(mult(-2), -6, "Testing the function mult with input -2 (should be -6)")
    self.assertEqual(mult(0), 0, "Testing the function mult with input 0 (should be 0)")

  def testTwo(self):
    self.assertEqual(addit(1), 6, "Testing the function addit with input 1 (should be 6)")
    self.assertEqual(addit(-2), 3, "Testing the function addit with input -2 (should be 3)")
    self.assertEqual(addit(0), 5, "Testing the function addit with input 0 (should be 5)")
myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_flow-of-execution-summary</id>
      <title>Flow of Execution Summary</title>
      <question>
        <label>Checkpoint 4.11.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_11_1" data-multipleanswers="false"><div class="para" id="p-1296">Consider the following Python code.</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def pow(b, p):
  y = b ** p
  return y

def square(x):
  a = pow(x, 2)
  return a

n = 5
result = square(n)
print(result)
</code></pre></div> <div class="para" id="p-1297">What does this function print?</div><li data-component="answer" id="foppff_1_question4_11_1_opt_a" data-correct=""><div class="para" id="p-1298">25</div></li><li data-component="feedback" id="foppff_1_question4_11_1_opt_a"><div class="para" id="p-1299">The function square returns the square of its input (via a call to pow).</div></li><li data-component="answer" id="foppff_1_question4_11_1_opt_b"><div class="para" id="p-1300">5</div></li><li data-component="feedback" id="foppff_1_question4_11_1_opt_b"><div class="para" id="p-1301">What is printed is the output of the square function. 5 is the input to the square function.</div></li><li data-component="answer" id="foppff_1_question4_11_1_opt_c"><div class="para" id="p-1302">125</div></li><li data-component="feedback" id="foppff_1_question4_11_1_opt_c"><div class="para" id="p-1303">Notice that pow is called from within square with a base (b) of 5 and a power (p) of two.</div></li><li data-component="answer" id="foppff_1_question4_11_1_opt_d"><div class="para" id="p-1304">32</div></li><li data-component="feedback" id="foppff_1_question4_11_1_opt_d"><div class="para" id="p-1305">Notice that pow is called from within square with a base (b) of 5 and a power (p) of two.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_print-vs-return</id>
      <title>Print vs. return</title>
      <question>
        <label>Checkpoint 4.12.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_12_1" data-multipleanswers="false"><div class="para" id="p-1326">What will the following code output?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def square(x):
    return x*x

def g(y):
    return y + 3

def h(y):
    return square(y) + 3

print(h(2))
</code></pre></div><li data-component="answer" id="foppff_1_question4_12_1_opt_a"><div class="para" id="p-1327">2</div></li><li data-component="feedback" id="foppff_1_question4_12_1_opt_a"><div class="para" id="p-1328">2 is the input; the value returned from h is what will be printed.</div></li><li data-component="answer" id="foppff_1_question4_12_1_opt_b"><div class="para" id="p-1329">5</div></li><li data-component="feedback" id="foppff_1_question4_12_1_opt_b"><div class="para" id="p-1330">Don’t forget that 2 gets squared.</div></li><li data-component="answer" id="foppff_1_question4_12_1_opt_c" data-correct=""><div class="para" id="p-1331">7</div></li><li data-component="feedback" id="foppff_1_question4_12_1_opt_c"><div class="para" id="p-1332">First square 2, then add 3.</div></li><li data-component="answer" id="foppff_1_question4_12_1_opt_d"><div class="para" id="p-1333">25</div></li><li data-component="feedback" id="foppff_1_question4_12_1_opt_d"><div class="para" id="p-1334">3 is added to the result of squaring 2</div></li><li data-component="answer" id="foppff_1_question4_12_1_opt_e"><div class="para" id="p-1335">Error: y has a value but x is an unbound variable inside the square function</div></li><li data-component="feedback" id="foppff_1_question4_12_1_opt_e"><div class="para" id="p-1336">When square is called, x is bound to the parameter value that is passed in, 2.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.12.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question4_12_2" data-multipleanswers="false"><div class="para" id="p-1337">What will the following code output?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">def square(x):
    return x*x

def g(y):
    return y + 3

def h(y):
    return square(y) + 3

print(g(h(2)))
</code></pre></div><li data-component="answer" id="foppff_1_question4_12_2_opt_a"><div class="para" id="p-1338">2</div></li><li data-component="feedback" id="foppff_1_question4_12_2_opt_a"><div class="para" id="p-1339">Better read the section above one more time.</div></li><li data-component="answer" id="foppff_1_question4_12_2_opt_b"><div class="para" id="p-1340">5</div></li><li data-component="feedback" id="foppff_1_question4_12_2_opt_b"><div class="para" id="p-1341">Better read the section above one more time.</div></li><li data-component="answer" id="foppff_1_question4_12_2_opt_c"><div class="para" id="p-1342">7</div></li><li data-component="feedback" id="foppff_1_question4_12_2_opt_c"><div class="para" id="p-1343">That’s h(2), but it is passed to g.</div></li><li data-component="answer" id="foppff_1_question4_12_2_opt_d" data-correct=""><div class="para" id="p-1344">10</div></li><li data-component="feedback" id="foppff_1_question4_12_2_opt_d"><div class="para" id="p-1345">h(2) returns 7, so y is bound to 7 when g is invoked.</div></li><li data-component="answer" id="foppff_1_question4_12_2_opt_e"><div class="para" id="p-1346">Error: you can’t nest function calls</div></li><li data-component="feedback" id="foppff_1_question4_12_2_opt_e"><div class="para" id="p-1347">Ah, but you can nest function calls.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>functions_glossary</id>
      <title>Glossary</title>
    </subchapter>
    <subchapter>
      <id>functions_chapter-assessment</id>
      <title>Chapter Assessment</title>
      <question>
        <label>Checkpoint 4.14.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_15_1">
                <div class="ac_question col-md-12" id="foppff_1_ac4_15_1_question">
                  <div class="para" id="p-1379">Write a function called <code class="code-inline tex2jax_ignore">int_return</code> that takes an integer as input and returns the same integer.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_15_1_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testOne(self):
    self.assertEqual(int_return(10), 10, "Testing that function int_return(10) returns 10")
myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.14.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_15_2">
                <div class="ac_question col-md-12" id="foppff_1_ac4_15_2_question">
                  <div class="para" id="p-1380">Write a function called <code class="code-inline tex2jax_ignore">add</code> that takes any number as its input and returns that sum with 2 added.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_15_2_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testTwo(self):
    self.assertEqual(add(-2), 0, "Testing that add(-2) returns 0")
    self.assertEqual(add(6), 8, "Testing that add(6) returns 8")
    self.assertEqual(add(4), 6, "Testing that add(4) returns 6")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.14.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_15_3">
                <div class="ac_question col-md-12" id="foppff_1_ac4_15_3_question">
                  <div class="para" id="p-1381">Write a function called <code class="code-inline tex2jax_ignore">change</code> that takes any string, adds “Nice to meet you!” to the end of the argument given, and returns that new string.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_15_3_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testThree(self):
    self.assertEqual(change("I'm Bob. "), "I'm Bob. Nice to meet you!", "Tests that change('I'm Bob. '') returns 'I'm Bob. Nice to meet you!'")
    self.assertEqual(change(""), "Nice to meet you!", "Tests that change() returns 'Nice to meet you!'")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.14.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_15_4">
                <div class="ac_question col-md-12" id="foppff_1_ac4_15_4_question">
                  <div class="para" id="p-1382">Write a function, <code class="code-inline tex2jax_ignore">addup</code>, that takes five integers as inputs and returns the sum of those integers.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_15_4_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testFourA(self):
    self.assertEqual(addup(1, 2, 3, 4, 5), 15, "Tests that addup(1, 2, 3, 4, 5) returns 15")
    self.assertEqual(addup(0, 0, 0, 0, 1), 1, "Tests that addup(0, 0, 0, 0, 1) returns 1")
    self.assertEqual(addup(-1, 1, -2, 2, -3), -3, "Tests that addup(-1, 1, -2, 2, -3) returns -3")
myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.14.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_15_5">
                <div class="ac_question col-md-12" id="foppff_1_ac4_15_5_question">
                  <div class="para" id="p-1383">You will need to write two functions for this problem. The first function, <code class="code-inline tex2jax_ignore">divide</code> that takes in any number and returns that same number divided by 2. The second function called <code class="code-inline tex2jax_ignore">sum</code> should take any number, divide it by 2, and add 6. It should return this new number. You should call the <code class="code-inline tex2jax_ignore">divide</code> function within the <code class="code-inline tex2jax_ignore">sum</code> function. Do not worry about decimals.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_15_5_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testSixA(self):
    self.assertEqual(divide(4), 2, "Tests that divide(4) returns 2")
  def testSixB(self):
    self.assertEqual(sum(4), 8, "Tests that sum(4) returns 8")
    self.assertEqual(sum(2), 7, "Tests that sum(2) returns 7")
    self.assertEqual(sum(-6), 3, "Tests that sum(-6) returns 3")
    self.assertEqual(sum(0), 6, "Tests that sum(0) returns 6")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 4.14.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac4_15_6">
                <div class="ac_question col-md-12" id="foppff_1_ac4_15_6_question"><div class="para" id="p-1384">You will need to write three functions for this problem.</div> <ul class="disc"><li id="li-213"><div class="para" id="p-1385">The first function, <code class="code-inline tex2jax_ignore">average</code> that takes in any three numbers and returns the average.</div></li><li id="li-214"><div class="para" id="p-1386">The second function called <code class="code-inline tex2jax_ignore">diffSquare</code> that takes one number and the average of the three numbers, subtracts those numbers, and then returns the square of this difference.</div></li><li id="li-215"><div class="para" id="p-1387">A third function called <code class="code-inline tex2jax_ignore">stdev</code> which is passed the three numbers and then:</div><ol class="decimal"><li id="li-216"><div class="para" id="p-1388">Calls on <code class="code-inline tex2jax_ignore">average</code> to find the averaage of those three values, and assign the resulting average to a local variable.</div></li><li id="li-217"><div class="para" id="p-1389">Calls on <code class="code-inline tex2jax_ignore">diffSquare</code> three times, passing each of the three numbers in turn and the local variable average, assigning the resulting squared differences to three local variables.</div></li><li id="li-218"><div class="para" id="p-1390">Calls on <code class="code-inline tex2jax_ignore">average</code> again, this time passing in the three squared differences, and assigning this new average to a variable called <code class="code-inline tex2jax_ignore">variance</code>.</div></li></ol></li><li id="li-219"><div class="para" id="p-1391">Finally, <code class="code-inline tex2jax_ignore">stdev</code> finds the square root of <code class="code-inline tex2jax_ignore">variance</code> as the standard deviation</div></li></ul> <div class="para" id="p-1392">Do not worry about rounding the decimals.</div></div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac4_15_6_editor" data-question_label="" data-codelens="true">"""
Using these values: 10, 13, 15,
you should get:
- an average of 12.66666667.
- these squared differences are: 7.1111111 0.11111111, 5.4444444
- which sum to 12.66666667 and average to be 4.2222222
- the square root of which is: 2.054804667
""""

def average( ,  ,  ): 




    return mean


def diffSquare(   ,   ): 





    return squaredDifference


def stdev(   ,   ,   ):


    variance = average (  ,   ,   )
    return variance**(1/2)

print('The standard deviation of the values 10, 13 and 15 is', stdev(10,13,15))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-5</id>
    <title>Conditionals</title>
    <subchapter>
      <id>conditionals_intro-what-we-can-do-with-turtles-and-conditionals</id>
      <title>Intro: What we can do with Turtles and Conditionals</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_1_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_1_1_editor" data-question_label="" data-codelens="true">import turtle
wn = turtle.Screen()

amy = turtle.Turtle()
amy.pencolor("Pink")
amy.forward(50)
if amy.pencolor() == "Pink":
    amy.right(60)
    amy.forward(100)
else:
    amy.left(60)
    amy.forward(100)

kenji = turtle.Turtle()
kenji.forward(60)
if kenji.pencolor() == "Pink":
    kenji.right(60)
    kenji.forward(100)
else:
    kenji.left(60)
    kenji.forward(100)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_1_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_1_2_editor" data-question_label="" data-codelens="true">import turtle
wn = turtle.Screen()

amy = turtle.Turtle()
amy.pencolor("Pink")
amy.right(170)

colors = ["Purple", "Yellow", "Orange", "Pink", "Orange", "Yellow", "Purple", "Orange", "Pink", "Pink", "Orange", "Yellow", "Purple", "Orange", "Purple", "Yellow", "Orange", "Pink", "Orange", "Purple", "Purple", "Yellow", "Orange", "Pink", "Orange", "Yellow", "Purple", "Yellow"]


for color in colors:
    if amy.pencolor() == "Purple":
        amy.forward(50)
        amy.right(59)
    elif amy.pencolor() == "Yellow":
        amy.forward(65)
        amy.left(98)
    elif amy.pencolor() == "Orange":
        amy.forward(30)
        amy.left(60)
    elif amy.pencolor() == "Pink":
        amy.forward(50)
        amy.right(57)

    amy.pencolor(color)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_boolean-values-and-boolean-expressions</id>
      <title>Boolean Values and Boolean Expressions</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_2_1_editor" data-question_label="" data-codelens="true">print(True)
print(type(True))
print(type(False))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_2_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_2_2_editor" data-question_label="" data-codelens="true">print(type(True))
print(type("True"))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_2_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_2_3_editor" data-question_label="" data-codelens="true">print(5 == 5)
print(5 == 6)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_2_1" data-multipleanswers="true">
                <div class="para" id="p-1419">Which of the following is a Boolean expression? Select all that apply.</div>
                <li data-component="answer" id="foppff_1_question5_2_1_opt_a" data-correct="">
                  <div class="para" id="p-1420">True</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_2_1_opt_a">
                  <div class="para" id="p-1421">True and False are both Boolean literals.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_2_1_opt_b" data-correct="">
                  <div class="para" id="p-1422">3 == 4</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_2_1_opt_b">
                  <div class="para" id="p-1423">The comparison between two numbers via == results in either True or False (in this case False), both Boolean values.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_2_1_opt_c">
                  <div class="para" id="p-1424">3 + 4</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_2_1_opt_c">
                  <div class="para" id="p-1425">3+4 evaluates to 7, which is a number, not a Boolean value.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_2_1_opt_d" data-correct="">
                  <div class="para" id="p-1426">3 + 4 == 7</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_2_1_opt_d">
                  <div class="para" id="p-1427">3+4 evaluates to 7.  7 == 7 then evaluates to True, which is a Boolean value.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_2_1_opt_e">
                  <div class="para" id="p-1428">"False"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_2_1_opt_e">
                  <div class="para" id="p-1429">With the double quotes surrounding it, False is interpreted as a string, not a Boolean value. If the quotes had not been included, False alone is in fact a Boolean value.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_logical-operators</id>
      <title>Logical operators</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_3_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_3_1_editor" data-question_label="" data-codelens="true">x = True
y = False
print(x or y)
print(x and y)
print(not x)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_3_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_3_2_editor" data-question_label="" data-codelens="true">x = 5
print(x &gt; 0 and x &lt; 10)

n = 25
print(n % 2 == 0 or n % 3 == 0)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_3_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_3_3_editor" data-question_label="" data-codelens="true">def check_average_weight() -&gt; None:
  total_weight = int(input('Enter total weight of luggage:'))
  num_pieces = int(input('Number of pieces of luggage?'))

  if total_weight / num_pieces &gt; 50:
    print('Average weight is greater than 50 pounds -&gt; $100 surcharge.')

  print('Luggage check complete.')
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_3_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_3_4_editor" data-question_label="" data-codelens="true">def check_average_weight() -&gt; None:
  total_weight = int(input('Enter total weight of luggage:'))
  num_pieces = int(input('Number of pieces of luggage?'))

  if num_pieces != 0 and total_weight / num_pieces &gt; 50:
    print('Average weight is greater than 50 pounds -&gt; $100 surcharge.')

  print('Luggage check complete.')
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_3_1" data-multipleanswers="true">
                <div class="para" id="p-1453">What is the correct Python expression for checking to see if a number stored in a variable x is between 0 and 5.</div>
                <li data-component="answer" id="foppff_1_question5_3_1_opt_a">
                  <div class="para" id="p-1454">x &gt; 0 and &lt; 5</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_3_1_opt_a">
                  <div class="para" id="p-1455">Each comparison must be between exactly two values. In this case the right-hand expression &lt; 5 lacks a value on its left.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_3_1_opt_b" data-correct="">
                  <div class="para" id="p-1456">0 &lt; x &lt; 5</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_3_1_opt_b">
                  <div class="para" id="p-1457">Although most other programming languages do not allow this syntax, in Python, this syntax is allowed. Even though it is possible to use this format, you should not use it all the time. Instead, make multiple comparisons by using and or or.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_3_1_opt_c">
                  <div class="para" id="p-1458">x &gt; 0 or x &lt; 5</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_3_1_opt_c">
                  <div class="para" id="p-1459">Although this is legal Python syntax, the expression is incorrect. It will evaluate to true for all numbers that are either greater than 0 or less than 5. Because all numbers are either greater than 0 or less than 5, this expression will always be True.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_3_1_opt_d" data-correct="">
                  <div class="para" id="p-1460">x &gt; 0 and x &lt; 5</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_3_1_opt_d">
                  <div class="para" id="p-1461">Yes, with an ``and`` keyword both expressions must be true so the number must be greater than 0 an less than 5 for this expression to be true.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_3_2" data-multipleanswers="false"><div class="para" id="p-1462">Which of the following may result in a crash at runtime if the user presses Enter without typing a response?</div> <div class="para" id="p-1463">Option A)</div><pre class="code-block tex2jax_ignore">yesno = input('Enter Yes or No:')
if yesno[0] == 'Y' and len(yesno) &gt; 0:
   print('Yes!')
</pre><div class="para" id="p-1464">Option B)</div><pre class="code-block tex2jax_ignore">yesno = input('Enter Yes or No:')
if len(yesno) &gt; 0 and yesno[0] == 'Y':
   print('Yes!')
</pre><li data-component="answer" id="foppff_1_question5_3_2_opt_a" data-correct=""><div class="para" id="p-1465">Option A</div></li><li data-component="feedback" id="foppff_1_question5_3_2_opt_a"><div class="para" id="p-1466">Correct! The comparison yesno[0] == ’Y’ will crash if yesno is an empty string.</div></li><li data-component="answer" id="foppff_1_question5_3_2_opt_b"><div class="para" id="p-1467">Option B</div></li><li data-component="feedback" id="foppff_1_question5_3_2_opt_b"><div class="para" id="p-1468">Incorrect. If len(yesno) &gt; 0 is False, the potentially unsafe comparison yesno[0] == ’Y’ will not be evaluated.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_3_3" data-multipleanswers="false"><div class="para" id="p-1469">Consider the following fragment containing a nested <code class="code-inline tex2jax_ignore">if</code> statement to prevent a crash in the event the user enters an empty response for <code class="code-inline tex2jax_ignore">yesno</code>:</div><pre class="code-block tex2jax_ignore">yesno = input('Enter Yes or No:')
if len(yesno) &gt; 0:
   if yesno[0] == 'Y':
      print('Yes!')
</pre><div class="para" id="p-1470">Which of the following is the correct way to combine the nested <code class="code-inline tex2jax_ignore">if</code> into a single <code class="code-inline tex2jax_ignore">
          if</code> statement that executes identically to the nested <code class="code-inline tex2jax_ignore">if</code> statements?</div> <div class="para" id="p-1471">Option A)</div><pre class="code-block tex2jax_ignore">if yesno[0] == 'Y' and len(yesno) &gt; 0:
   print('Yes!')
</pre><div class="para" id="p-1472">Option B)</div><pre class="code-block tex2jax_ignore">if len(yesno) &gt; 0 and yesno[0] == 'Y':
   print('Yes!')
</pre><div class="para" id="p-1473">Option C)</div><pre class="code-block tex2jax_ignore">if yesno[0] == 'Y' or len(yesno) &gt; 0:
   print('Yes!')
</pre><div class="para" id="p-1474">Option D)</div><pre class="code-block tex2jax_ignore">if len(yesno) &gt; 0 or yesno[0] == 'Y':
   print('Yes!')
</pre><li data-component="answer" id="foppff_1_question5_3_3_opt_a"><div class="para" id="p-1475">Option A</div></li><li data-component="feedback" id="foppff_1_question5_3_3_opt_a"><div class="para" id="p-1476">Incorrect. The comparison yesno[0] == ’Y’ will crash if yesno is an empty string.</div></li><li data-component="answer" id="foppff_1_question5_3_3_opt_b" data-correct=""><div class="para" id="p-1477">Option B</div></li><li data-component="feedback" id="foppff_1_question5_3_3_opt_b"><div class="para" id="p-1478">Correct! Use the and operator to join nested if statements into a single statement, with the first if condition on the left-hand side.</div></li><li data-component="answer" id="foppff_1_question5_3_3_opt_c"><div class="para" id="p-1479">Option C</div></li><li data-component="feedback" id="foppff_1_question5_3_3_opt_c"><div class="para" id="p-1480">Incorrect. The comparison yesno[0] == ’Y’ will crash if yesno is an empty string.</div></li><li data-component="answer" id="foppff_1_question5_3_3_opt_d"><div class="para" id="p-1481">Option D</div></li><li data-component="feedback" id="foppff_1_question5_3_3_opt_d"><div class="para" id="p-1482">Incorrect. The comparison yesno[0] == ’Y’ will crash if yesno is an empty string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_the-in-and-not-in-operators</id>
      <title>The <code class="code-inline tex2jax_ignore">in</code> and <code class="code-inline tex2jax_ignore">not in</code> operators</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_4_1_editor" data-question_label="" data-codelens="true">print('p' in 'apple')
print('i' in 'apple')
print('ap' in 'apple')
print('pa' in 'apple')
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_4_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_4_2_editor" data-question_label="" data-codelens="true">print('a' in 'a')
print('apple' in 'apple')
print('' in 'a')
print('' in 'apple')
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_4_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_4_3_editor" data-question_label="" data-codelens="true">print('x' not in 'apple')
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_precedence-of-operators</id>
      <title>Precedence of Operators</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_5_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_5_1_editor" data-question_label="" data-codelens="true">
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_5_1" data-multipleanswers="false">
                <div class="para" id="p-1492">Which of the following properly expresses the  precedence of operators (using parentheses) in the following expression: 5*3 &gt; 10 and 4+6==11</div>
                <li data-component="answer" id="foppff_1_question5_5_1_opt_a" data-correct="">
                  <div class="para" id="p-1493">((5*3) &gt; 10) and ((4+6) == 11)</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_5_1_opt_a">
                  <div class="para" id="p-1494">Yes, * and + have higher precedence, followed by &gt; and ==, and then the keyword "and"</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_5_1_opt_b">
                  <div class="para" id="p-1495">(5*(3 &gt; 10)) and (4 + (6 == 11))</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_5_1_opt_b">
                  <div class="para" id="p-1496">Arithmetic operators (*, +) have higher precedence than comparison operators (&gt;, ==)</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_5_1_opt_c">
                  <div class="para" id="p-1497">((((5*3) &gt; 10) and 4)+6) == 11</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_5_1_opt_c">
                  <div class="para" id="p-1498">This grouping assumes Python simply evaluates from left to right, which is incorrect.  It follows the precedence listed in the table in this section.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_5_1_opt_d">
                  <div class="para" id="p-1499">((5*3) &gt; (10 and (4+6))) == 11</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_5_1_opt_d">
                  <div class="para" id="p-1500">This grouping assumes that "and" has a higher precedence than ==, which is not true.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_conditional-execution-binary-selection</id>
      <title>Conditional Execution: Binary Selection</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_6_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_6_1_editor" data-question_label="" data-codelens="true">def is_even(x: int) -&gt; None:
  if x % 2 == 0:
    print(x, "is even")
  else:
    print(x, "is odd")

is_even(2) # 2 is even
is_even(3) # 3 is odd
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_6_1" data-multipleanswers="false">
                <div class="para" id="p-1510">How many lines of code can appear in the indented code block below the if and else lines in a conditional?</div>
                <li data-component="answer" id="foppff_1_question5_6_1_opt_a">
                  <div class="para" id="p-1511">Just one.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_6_1_opt_a">
                  <div class="para" id="p-1512">Each block may also contain more than one.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_6_1_opt_b">
                  <div class="para" id="p-1513">Zero or more.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_6_1_opt_b">
                  <div class="para" id="p-1514">Each block must contain at least one statement.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_6_1_opt_c" data-correct="">
                  <div class="para" id="p-1515">One or more.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_6_1_opt_c">
                  <div class="para" id="p-1516">Yes, a block must contain at least one statement and can have many statements.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_6_1_opt_d">
                  <div class="para" id="p-1517">One or more, and each must contain the same number.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_6_1_opt_d">
                  <div class="para" id="p-1518">The blocks may contain different numbers of statements.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_6_2" data-multipleanswers="false"><div class="para" id="p-1519">What does the following code print? (choose from output a, b, c or nothing)</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">if (4 + 5 == 10):
  print("TRUE")
else:
  print("FALSE")
</code></pre></div><li data-component="answer" id="foppff_1_question5_6_2_opt_a"><div class="para" id="p-1520">TRUE</div></li><li data-component="feedback" id="foppff_1_question5_6_2_opt_a"><div class="para" id="p-1521">TRUE is printed by the if-block, which only executes if the conditional (in this case, 4+5 == 10) is true. In this case 5+4 is not equal to 10.</div></li><li data-component="answer" id="foppff_1_question5_6_2_opt_b" data-correct=""><div class="para" id="p-1522">FALSE</div></li><li data-component="feedback" id="foppff_1_question5_6_2_opt_b"><div class="para" id="p-1523">Since 4+5==10 evaluates to False, Python will skip over the if block and execute the statement in the else block.</div></li><li data-component="answer" id="foppff_1_question5_6_2_opt_c"><div class="para" id="p-1524">TRUE on one line and FALSE on the next</div></li><li data-component="feedback" id="foppff_1_question5_6_2_opt_c"><div class="para" id="p-1525">Python would never print both TRUE and FALSE because it will only execute one of the if-block or the else-block, but not both.</div></li><li data-component="answer" id="foppff_1_question5_6_2_opt_d"><div class="para" id="p-1526">Nothing will be printed</div></li><li data-component="feedback" id="foppff_1_question5_6_2_opt_d"><div class="para" id="p-1527">Python will always execute either the if-block (if the condition is true) or the else-block (if the condition is false). It would never skip over both blocks.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_6_3" data-multipleanswers="false"><div class="para" id="p-1528">What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">if (4 + 5 == 10):
  print("TRUE")
else:
  print("FALSE")
print("TRUE")
</code></pre></div><pre class="code-block tex2jax_ignore">a. TRUE

b.
   TRUE
   FALSE

c.
   FALSE
   TRUE
d.
   TRUE
   FALSE
   TRUE
</pre><li data-component="answer" id="foppff_1_question5_6_3_opt_a"><div class="para" id="p-1529">Output a</div></li><li data-component="feedback" id="foppff_1_question5_6_3_opt_a"><div class="para" id="p-1530">Although TRUE is printed after the if-else statement completes, both blocks within the if-else statement print something too. In this case, Python would have had to have skipped both blocks in the if-else statement, which it never would do.</div></li><li data-component="answer" id="foppff_1_question5_6_3_opt_b"><div class="para" id="p-1531">Output b</div></li><li data-component="feedback" id="foppff_1_question5_6_3_opt_b"><div class="para" id="p-1532">Because there is a TRUE printed after the if-else statement ends, Python will always print TRUE as the last statement.</div></li><li data-component="answer" id="foppff_1_question5_6_3_opt_c" data-correct=""><div class="para" id="p-1533">Output c</div></li><li data-component="feedback" id="foppff_1_question5_6_3_opt_c"><div class="para" id="p-1534">Python will print FALSE from within the else-block (because 5+4 does not equal 10), and then print TRUE after the if-else statement completes.</div></li><li data-component="answer" id="foppff_1_question5_6_3_opt_d"><div class="para" id="p-1535">Output d</div></li><li data-component="feedback" id="foppff_1_question5_6_3_opt_d"><div class="para" id="p-1536">To print these three lines, Python would have to execute both blocks in the if-else statement, which it can never do.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_6_4">
                <div class="ac_question col-md-12" id="foppff_1_ac5_6_4_question">
                  <div class="para" id="p-1537">Create a variable, <code class="code-inline tex2jax_ignore">b</code>, and assign it the value of <code class="code-inline tex2jax_ignore">15</code>. Then, write code to see if the value <code class="code-inline tex2jax_ignore">b</code> is greater than that of <code class="code-inline tex2jax_ignore">a</code>. If it is, <code class="code-inline tex2jax_ignore">a</code>’s value should be multiplied by 2. If the value of <code class="code-inline tex2jax_ignore">b</code> is less than or equal to <code class="code-inline tex2jax_ignore">a</code>, nothing should happen. Finally, create variable <code class="code-inline tex2jax_ignore">c</code> and assign it the value of the sum of <code class="code-inline tex2jax_ignore">a</code> and <code class="code-inline tex2jax_ignore">
        b</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_6_4_editor" data-question_label="" data-codelens="true">a = 20

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testTwoA(self):
    self.assertEqual(a, 20, "Testing that a has the correct value.")

  def testTwoB(self):
    self.assertEqual(c, 35, "Testing that c has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_omitting-the-else-clause-unary-selection</id>
      <title>Omitting the <code class="code-inline tex2jax_ignore">else</code> Clause: Unary Selection</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_7_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_7_1_editor" data-question_label="" data-codelens="true">x = 10
if x &lt; 0:
    print("The negative number ",  x, " is not valid here.")
print("This is always printed")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.7.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_7_1" data-multipleanswers="false"><div class="para" id="p-1541">What does the following code print?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">x = -10
if x &lt; 0:
    print("The negative number ",  x, " is not valid here.")
print("This is always printed")
</code></pre></div><pre class="code-block tex2jax_ignore">a.
This is always printed

b.
The negative number -10 is not valid here
This is always printed

c.
The negative number -10 is not valid here
</pre><li data-component="answer" id="foppff_1_question5_7_1_opt_a"><div class="para" id="p-1542">Output a</div></li><li data-component="feedback" id="foppff_1_question5_7_1_opt_a"><div class="para" id="p-1543">Because -10 is less than 0, Python will execute the body of the if-statement here.</div></li><li data-component="answer" id="foppff_1_question5_7_1_opt_b" data-correct=""><div class="para" id="p-1544">Output b</div></li><li data-component="feedback" id="foppff_1_question5_7_1_opt_b"><div class="para" id="p-1545">Python executes the body of the if-block as well as the statement that follows the if-block.</div></li><li data-component="answer" id="foppff_1_question5_7_1_opt_c"><div class="para" id="p-1546">Output c</div></li><li data-component="feedback" id="foppff_1_question5_7_1_opt_c"><div class="para" id="p-1547">Python will also execute the statement that follows the if-block (because it is not enclosed in an else-block, but rather just a normal statement).</div></li><li data-component="answer" id="foppff_1_question5_7_1_opt_d"><div class="para" id="p-1548">It will cause an error because every if must have an else clause.</div></li><li data-component="feedback" id="foppff_1_question5_7_1_opt_d"><div class="para" id="p-1549">It is valid to have an if-block without a corresponding else-block (though you cannot have an else-block without a corresponding if-block).</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_7_2" data-multipleanswers="false"><div class="para" id="p-1550">Will the following code cause an error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">x = -10
if x &lt; 0:
    print("The negative number ",  x, " is not valid here.")
else:
    print(x, " is a positive number")
else:
    print("This is always printed")
</code></pre></div><li data-component="answer" id="foppff_1_question5_7_2_opt_a"><div class="para" id="p-1551">No</div></li><li data-component="feedback" id="foppff_1_question5_7_2_opt_a"><div class="para" id="p-1552">Every else-block must have exactly one corresponding if-block.  If you want to chain if-else statements together, you must use the else if construct, described in the chained conditionals section.</div></li><li data-component="answer" id="foppff_1_question5_7_2_opt_b" data-correct=""><div class="para" id="p-1553">Yes</div></li><li data-component="feedback" id="foppff_1_question5_7_2_opt_b"><div class="para" id="p-1554">This will cause an error because the second else-block is not attached to a corresponding if-block.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_nested-conditionals</id>
      <title>Nested conditionals</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_8_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_8_1_editor" data-question_label="" data-codelens="true">x = 10
y = 10

if x &lt; y:
    print("x is less than y")
else:
    if x &gt; y:
        print("x is greater than y")
    else:
        print("x and y must be equal")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens5_8_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens5_8_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.8.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_8_1" data-multipleanswers="false"><div class="para" id="p-1562">Will the following code cause an error?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">x = -10
if x &lt; 0:
    print("The negative number ",  x, " is not valid here.")
else:
    if x &gt; 0:
        print(x, " is a positive number")
    else:
        print(x," is 0")
</code></pre></div><li data-component="answer" id="foppff_1_question5_8_1_opt_a" data-correct=""><div class="para" id="p-1563">No</div></li><li data-component="feedback" id="foppff_1_question5_8_1_opt_a"><div class="para" id="p-1564">This is a legal nested if-else statement.  The inner if-else statement is contained completely within the body of the outer else-block.</div></li><li data-component="answer" id="foppff_1_question5_8_1_opt_b"><div class="para" id="p-1565">Yes</div></li><li data-component="feedback" id="foppff_1_question5_8_1_opt_b"><div class="para" id="p-1566">This is a legal nested if-else statement.  The inner if-else statement is contained completely within the body of the outer else-block.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_chained-conditionals</id>
      <title>Chained conditionals</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_9_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_9_1_editor" data-question_label="" data-codelens="true">x = 10
y = 10

if x &lt; y:
  print("x is less than y")
elif x &gt; y:
  print("x is greater than y")
else:
  print("x and y must be equal")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.9.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_9_1" data-multipleanswers="false"><div class="para" id="p-1574">Which of I, II, and III below gives the same result as the following nested if?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py"># nested if-else statement
x = -10
if x &lt; 0:
  print("The negative number ", x, " is not valid here.")
else:
  if x &gt; 0:
    print(x, " is a positive number")
  else:
    print(x, " is 0")
</code></pre></div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">I.

if x &lt; 0:
  print("The negative number ", x, " is not valid here.")
else (x &gt; 0):
  print(x, " is a positive number")
else:
  print(x, " is 0")
</code></pre></div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">II.

if x &lt; 0:
  print("The negative number ", x, " is not valid here.")
elif (x &gt; 0):
  print(x, " is a positive number")
else:
  print(x, " is 0")
</code></pre></div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">III.

if x &lt; 0:
  print("The negative number ", x, " is not valid here.")
if (x &gt; 0):
  print(x, " is a positive number")
else:
  print(x, " is 0")
</code></pre></div><li data-component="answer" id="foppff_1_question5_9_1_opt_a"><div class="para" id="p-1575">I only</div></li><li data-component="feedback" id="foppff_1_question5_9_1_opt_a"><div class="para" id="p-1576">You can not use a Boolean expression after an else.</div></li><li data-component="answer" id="foppff_1_question5_9_1_opt_b" data-correct=""><div class="para" id="p-1577">II only</div></li><li data-component="feedback" id="foppff_1_question5_9_1_opt_b"><div class="para" id="p-1578">Yes, II will give the same result.</div></li><li data-component="answer" id="foppff_1_question5_9_1_opt_c"><div class="para" id="p-1579">III only</div></li><li data-component="feedback" id="foppff_1_question5_9_1_opt_c"><div class="para" id="p-1580">No, III will not give the same result. The first if statement will be true, but the second will be false, so the else part will execute.</div></li><li data-component="answer" id="foppff_1_question5_9_1_opt_d"><div class="para" id="p-1581">II and III</div></li><li data-component="feedback" id="foppff_1_question5_9_1_opt_d"><div class="para" id="p-1582">No, Although II is correct III will not give the same result. Try it.</div></li><li data-component="answer" id="foppff_1_question5_9_1_opt_e"><div class="para" id="p-1583">I, II, and III</div></li><li data-component="feedback" id="foppff_1_question5_9_1_opt_e"><div class="para" id="p-1584">No, in I you can not have a Boolean expression after an else.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.9.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_9_2" data-multipleanswers="false"><div class="para" id="p-1585">What will the following code print if x = 3, y = 5, and z = 2?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">if x &lt; y and x &lt; z:
  print("a")
elif y &lt; x and y &lt; z:
  print("b")
else:
  print("c")
</code></pre></div><li data-component="answer" id="foppff_1_question5_9_2_opt_a"><div class="para" id="p-1586">a</div></li><li data-component="feedback" id="foppff_1_question5_9_2_opt_a"><div class="para" id="p-1587">While the value in x is less than the value in y (3 is less than 5) it is not less than the value in z (3 is not less than 2).</div></li><li data-component="answer" id="foppff_1_question5_9_2_opt_b"><div class="para" id="p-1588">b</div></li><li data-component="feedback" id="foppff_1_question5_9_2_opt_b"><div class="para" id="p-1589">The value in y is not less than the value in x (5 is not less than 3).</div></li><li data-component="answer" id="foppff_1_question5_9_2_opt_c" data-correct=""><div class="para" id="p-1590">c</div></li><li data-component="feedback" id="foppff_1_question5_9_2_opt_c"><div class="para" id="p-1591">Since the first two Boolean expressions are false the else will be executed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.9.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac5_9_2">
                <div class="ac_question col-md-12" id="foppff_1_ac5_9_2_question">
                  <div class="para" id="p-1592">Create one conditional to find whether “false” is in string <code class="code-inline tex2jax_ignore">str1</code>. If so, assign variable <code class="code-inline tex2jax_ignore">output</code> the string “False. You aren’t you?”. Check to see if “true” is in string <code class="code-inline tex2jax_ignore">str1</code> and if it is then assign “True! You are you!” to the variable <code class="code-inline tex2jax_ignore">
        output</code>. If neither are in <code class="code-inline tex2jax_ignore">str1</code>, assign “Neither true nor false!” to <code class="code-inline tex2jax_ignore">
        output</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac5_9_2_editor" data-question_label="" data-codelens="true">str1 = "Today you are you! That is truer than true! There is no one alive who is you-er than
you!"

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testThree(self):
    self.assertEqual(output, "True! You are you!", "Testing that output has the correct value, given the str1 provided.")
    self.assertIn("else", self.getEditorText(), "Testing output (Don't worry about actual and expected values).")
    self.assertIn("elif", self.getEditorText(), "Testing output (Don't worry about actual and expected values).")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_setting-up-conditionals</id>
      <title>Setting Up Conditionals</title>
      <question>
        <label>Checkpoint 5.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_10_1" data-multipleanswers="false">
                <div class="para" id="p-1597">What is the best set of conditonal statements provided based on the following prompt? You want to keep track of all the words that have the letter ‘t’ and in a separate variable you want to keep track of all the words that have the letter ‘z’ in them.</div>
                <li data-component="answer" id="foppff_1_question5_10_1_opt_a">
                  <div class="para" id="p-1598">If statement - Else statement</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_10_1_opt_a">
                  <div class="para" id="p-1599">Using if/else either uses an unnecessary else statement or would improperly keep track of one of the accumulator variables.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_10_1_opt_b">
                  <div class="para" id="p-1600">If statement - Elif statement</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_10_1_opt_b">
                  <div class="para" id="p-1601">Using if/elif means that words that have both a "t" and a "z" would not be propperly counted by the two variables.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_10_1_opt_c" data-correct="">
                  <div class="para" id="p-1602">If statement - If statement</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_10_1_opt_c">
                  <div class="para" id="p-1603">Yes, two if statements will keep track of - and properly update - the two different accumulator variables.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_10_1_opt_d">
                  <div class="para" id="p-1604">If statement - Elif statemenet - Else statement</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_10_1_opt_d">
                  <div class="para" id="p-1605">Using if/elif/else here will provide an unnecessary else statement and improperly update one of the accumulator variables in the case where a word has both a "t" and a "z".</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 5.10.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question5_10_2" data-multipleanswers="false">
                <div class="para" id="p-1606">Select the most appropriate set of conditonal statements for the situation described: You want to keep track of all the words that contain both “t” and “z”.</div>
                <li data-component="answer" id="foppff_1_question5_10_2_opt_a">
                  <div class="para" id="p-1607">If statement - Elif statemenet - Else statement</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_10_2_opt_a">
                  <div class="para" id="p-1608">The elif and else statements are both unnecessary.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_10_2_opt_b">
                  <div class="para" id="p-1609">If statement - Else statement</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_10_2_opt_b">
                  <div class="para" id="p-1610">The else statement is unnecessary.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_10_2_opt_c">
                  <div class="para" id="p-1611">If statement - Nested If statement</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_10_2_opt_c">
                  <div class="para" id="p-1612">Though you could write a set of conditional statements like this and answer the prompt, there is a more concise way.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_10_2_opt_d" data-correct="">
                  <div class="para" id="p-1613">If statement</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_10_2_opt_d">
                  <div class="para" id="p-1614">Yes, this is the most concise way of writing a conditional for that prompt.</div>
                </li>
                <li data-component="answer" id="foppff_1_question5_10_2_opt_e">
                  <div class="para" id="p-1615">If statement - Nested If statement - Else statement</div>
                </li>
                <li data-component="feedback" id="foppff_1_question5_10_2_opt_e">
                  <div class="para" id="p-1616">The else statement is unnecessary.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>conditionals_glossary</id>
      <title>Glossary</title>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-6</id>
    <title>Iteration</title>
    <subchapter>
      <id>iteration_introduction</id>
      <title>Introduction</title>
    </subchapter>
    <subchapter>
      <id>more-about-iteration_the-while-statement</id>
      <title>The <code class="code-inline tex2jax_ignore">while</code> Statement</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_2_1_editor" data-question_label="" data-codelens="true">def sumTo(aBound):
    """ Return the sum of 1+2+3 ... n """

    theSum  = 0
    aNumber = 1
    while aNumber &lt;= aBound:
        theSum = theSum + aNumber
        aNumber = aNumber + 1
    return theSum

print(sumTo(4))

print(sumTo(1000))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens6_2_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens6_2_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 6.2.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question6_2_1" data-multipleanswers="false"><div class="para" id="p-1658">The following code contains an infinite loop. Which is the best explanation for why the loop does not terminate?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">n = 10
answer = 1
while ( n &gt; 0 ):
  answer = answer + n
  n = n + 1
print(answer)
</code></pre></div><li data-component="answer" id="foppff_1_question6_2_1_opt_a" data-correct=""><div class="para" id="p-1659">n starts at 10 and is incremented by 1 each time through the loop, so it will always be positive</div></li><li data-component="feedback" id="foppff_1_question6_2_1_opt_a"><div class="para" id="p-1660">The loop will run as long as n is positive.  In this case, we can see that n will never become non-positive.</div></li><li data-component="answer" id="foppff_1_question6_2_1_opt_b"><div class="para" id="p-1661">answer starts at 1 and is incremented by n each time, so it will always be positive</div></li><li data-component="feedback" id="foppff_1_question6_2_1_opt_b"><div class="para" id="p-1662">While it is true that answer will always be positive, answer is not considered in the loop condition.</div></li><li data-component="answer" id="foppff_1_question6_2_1_opt_c"><div class="para" id="p-1663">You cannot compare n to 0 in while loop.  You must compare it to another variable.</div></li><li data-component="feedback" id="foppff_1_question6_2_1_opt_c"><div class="para" id="p-1664">It is perfectly valid to compare n to 0.  Though indirectly, this is what causes the infinite loop.</div></li><li data-component="answer" id="foppff_1_question6_2_1_opt_d"><div class="para" id="p-1665">In the while loop body, we must set n to False, and this code does not do that.</div></li><li data-component="feedback" id="foppff_1_question6_2_1_opt_d"><div class="para" id="p-1666">The loop condition must become False for the loop to terminate, but n by itself is not the condition in this case.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 6.2.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_2_2">
                <div class="ac_question col-md-12" id="foppff_1_ac6_2_2_question">
                  <div class="para" id="p-1667">Write a while loop that is initialized at 0 and stops at 15. If the counter is an even number, add double its value to <code class="code-inline tex2jax_ignore">total_score</code>. If the counter is an odd number, subtract half its value from <code class="code-inline tex2jax_ignore">total_score</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_2_2_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def testOne(self):
     self.assertEqual(total_score, 80.0, "Testing that eve_nums has been assigned the correct elements")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 6.2.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac14_2_4">
                <div class="ac_question col-md-12" id="foppff_1_ac14_2_4_question">
                  <div class="para" id="p-1668">Write a function called <code class="code-inline tex2jax_ignore">stop_at_one</code> that takes an integer as a parameter, and performes the following operations on it until the integer equals 1: If the number is odd, multiply by 3 and add 1. If the number is even, divide by two. The function should then return how many iterations it took to reach 1.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac14_2_4_editor" data-question_label="" data-codelens="true">def stop_at_one(x: int) -&gt; int:



=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(stop_at_one(2), 1, "Testing the function stop_at_one on the input 2.")
      self.assertEqual(stop_at_one(3), 7, "Testing the function stop_at_one on the input 3.")
      self.assertEqual(stop_at_one(5), 5, "Testing the function stop_at_one on the input 5.")
      self.assertEqual(stop_at_one(50), 24, "Testing the function stop_at_one on the input 50.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>iteration_the-listener-loop</id>
      <title>The Listener Loop</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_3_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_3_1_editor" data-question_label="" data-codelens="true">theSum = 0
x = -1
while (x != 0):
    x = int(input("next number to add up (enter 0 if no more numbers): "))
    theSum = theSum + x

print(theSum)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_3_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_3_2_editor" data-question_label="" data-codelens="true">def checkout() -&gt; None:
    total = 0
    count = 0
    moreItems = True
    while moreItems:
        price = float(input('Enter price of item (0 when done): '))
        if price != 0:
            count = count + 1
            total = total + price
            print('Subtotal: $', total)
        else:
            moreItems = False
    average = total / count
    print('Total items:', count)
    print('Total $', total)
    print('Average price per item: $', average)

checkout()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_3_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_3_3_editor" data-question_label="" data-codelens="true">def get_yes_or_no(message: str) -&gt; str:
    valid_input = False
    while not valid_input:
        answer = input(message)
        answer = answer.upper() # convert to upper case
        if answer == 'Y' or answer == 'N':
            valid_input = True
        else:
            print('Please enter Y for yes or N for no.')
    return answer

response = get_yes_or_no('Do you like lima beans? Y)es or N)o: ')
if response == 'Y':
    print('Great! They are very healthy.')
else:
    print('Too bad. If cooked right, they are quite tasty.')
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>iteration_break-and-continue</id>
      <title>Break and Continue</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_4_1_editor" data-question_label="" data-codelens="true">while True:
    print("this phrase will always print")
    break
    print("Does this phrase print?")

print("We are done with the while loop.")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_4_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_4_2_editor" data-question_label="" data-codelens="true">x = 0
while x &lt; 10:
    print("we are incrementing x")
    if x % 2 == 0:
        x += 3
        continue
    if x % 3 == 0:
        x += 5
    x += 1
print("Done with our loop! X has the value: " + str(x))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>iteration_infinite-loops</id>
      <title>Infinite Loops</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_5_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_5_1_editor" data-question_label="" data-codelens="true">b = 15

while b &lt; 60:
    b = 5
    print("Bugs")
    b = b + 7
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 6.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_question6_5_3">
                <div class="ac_question col-md-12" id="foppff_1_question6_5_3_question">
                  <div class="para" id="p-1703">Sometimes programs can take a while to run, so how can you determine if your code is just talking a while or if it is stuck inside an infinite loop? Print statements are for people, so take advantage of them! You can add print statements to keep track of how your variables are changing as the program processes the instructions given to them. Below is an example of an infinite loop. Try adding print statments to see where it’s coming from. When you’re done, check out the answer to see what our solution was.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_question6_5_3_editor" data-question_label="" data-codelens="true">account_balance = 0
enough_money = 1000
while account_balance &lt; enough_money:
    account_balance += 100
    enough_money += 100

print("Final account_balance: ", account_balance)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>iteration_chapter-assessment</id>
      <title>Chapter Assessment</title>
      <question>
        <label>Checkpoint 6.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_6_1">
                <div class="ac_question col-md-12" id="foppff_1_ac6_6_1_question">
                  <div class="para" id="p-1706">Write a function, <code class="code-inline tex2jax_ignore">sublist</code>, that takes in a list of numbers as the parameter. In the function, use a while loop to return a sublist of the input list. The sublist should contain the same values of the original list up until it reaches the number 5 (it should not contain the number 5).</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_6_1_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testThree(self):
      self.assertEqual(sublist([1, 2, 3, 4, 5, 6, 7, 8]), [1, 2, 3, 4], "Testing that sublist([1, 2, 3, 4, 5, 6, 7, 8]) returns [1, 2, 3, 4]")
      self.assertEqual(sublist([5]), [], "Testing that sublist([5]) returns []")
      self.assertEqual(sublist([8, 6, 5]), [8, 6], "Testing that sublist([8, 6, 5]) returns [8, 6]")
      self.assertEqual(sublist([1, 6, 2, 3, 9]), [1, 6, 2, 3, 9], "Testing that sublist([1, 6, 2, 3, 9]) returns ([1, 6, 2, 3, 9])")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 6.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_6_2">
                <div class="ac_question col-md-12" id="foppff_1_ac6_6_2_question">
                  <div class="para" id="p-1707">Write a function called <code class="code-inline tex2jax_ignore">check_nums</code> that takes a list as its parameter, and contains a while loop that only stops once the element of the list is the number 7. What is returned is a list of all of the numbers up until it reaches 7.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_6_2_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(check_nums([0,2,4,9,2,3,6,8,12,14,7,9,10,8,3]), [0,2,4,9,2,3,6,8,12,14], "Testing that check_nums stops on the correct postion with input [0,2,4,9,2,3,6,8,12,14,7,9,10,8,3]")
      self.assertEqual(check_nums([9,302,4,62,78,97,10,7,8,23,53,1]), [9,302,4,62,78,97,10], "Testing that check_nums stops on the correct position with input [9,302,4,62,78,97,10,7,8,23,53,1]")
      self.assertEqual(check_nums([7,8,3,2,4,51]), [], "Testing that check_nums stops on the correct position with input [7,8,3,2,4,51]")
      self.assertEqual(check_nums([1, 6, 2, 3, 9]), [1, 6, 2, 3, 9], "Testing that check_nums([1, 6, 2, 3, 9]) returns ([1, 6, 2, 3, 9])")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 6.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_6_3">
                <div class="ac_question col-md-12" id="foppff_1_ac6_6_3_question">
                  <div class="para" id="p-1708">Write a function, <code class="code-inline tex2jax_ignore">sublist</code>, that takes in a list of strings as the parameter. In the function, use a while loop to return a sublist of the input list. The sublist should contain the same values of the original list up until it reaches the string “STOP” (it should not contain the string “STOP”).</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_6_3_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFour(self):
      self.assertEqual(sublist(["bob", "joe", "lucy", "STOP", "carol", "james"]), ["bob", "joe", "lucy"], "Testing that sublist(['bob', 'joe', 'lucy', 'STOP', 'carol', 'james']) returns ['bob', 'joe', 'lucy']")
      self.assertEqual(sublist(["STOP"]), [], "Testing that sublist(['STOP']) returns []")
      self.assertEqual(sublist(["jackie", "paul", "STOP"]), ["jackie", "paul"], "Testing that sublist(['jackie', 'paul', 'STOP']) returns ['jackie', 'paul']")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 6.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_6_4">
                <div class="ac_question col-md-12" id="foppff_1_ac6_6_4_question">
                  <div class="para" id="p-1709">Write a function called <code class="code-inline tex2jax_ignore">stop_at_z</code> that iterates through a list of strings. Using a while loop, append each string to a new list until the string that appears is “z”. The function should return the new list.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_6_4_editor" data-question_label="" data-codelens="true">def stop_at_z():

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(stop_at_z(['c', 'b', 'd', 'zebra', 'h', 'r', 'z', 'm', 'a', 'k']), ['c', 'b', 'd', 'zebra', 'h', 'r'], "Testing the function stop_at_z on the input ['c', 'b', 'd', 'zebra', 'h', 'r', 'z', 'm', 'a', 'k'].")
      self.assertEqual(stop_at_z(['zoo', 'zika', 'ozzie', 'pizzazz', 'z', 'pizza', 'zap', 'haze']), ['zoo', 'zika', 'ozzie', 'pizzazz'], "Testing the function stop_at_z on the input ['zoo', 'zika', 'ozzie', 'pizzazz', 'z', 'pizza', 'zap', 'haze'].")
      self.assertEqual(stop_at_z(['z']), [], "Testing the function stop_at_z on the input ['z'].")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 6.6.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_6_5">
                <div class="ac_question col-md-12" id="foppff_1_ac6_6_5_question">
                  <div class="para" id="p-1710">Below is a for loop that works. Underneath the for loop, rewrite the problem so that it does the same thing, but using a while loop instead of a for loop. Assign the accumulated total in the while loop code to the variable <code class="code-inline tex2jax_ignore">sum2</code>. Once complete, sum2 should equal sum1.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_6_5_editor" data-question_label="" data-codelens="true">sum1 = 0

lst = [65, 78, 21, 33]

for x in lst:
    sum1 = sum1 + x

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFive(self):
      self.assertEqual(sum2, 197, "Testing that sum2 is assigned to correct value.")
      self.assertIn('while', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 6.6.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac6_6_6">
                <div class="ac_question col-md-12" id="foppff_1_ac6_6_6_question">
                  <div class="para" id="p-1711"><dfn class="terminology">Challenge:</dfn> Write a function called <code class="code-inline tex2jax_ignore">beginning</code> that takes a list as input and contains a while loop that only stops once the element of the list is the string ‘bye’. What is returned is a list that contains up to the first 10 strings, regardless of where the loop stops. (i.e., if it stops on the 32nd element, the first 10 are returned. If “bye” is the 5th element, the first 4 are returned.) <em class="emphasis">If you want to make this even more of a challenge, do this without slicing</em></div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac6_6_6_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(beginning(['water', 'phone', 'home', 'chapstick', 'market', 'headphones', 'bye', 'stickie notes', 'snapchat', 'facebook', 'social media']), ['water', 'phone', 'home', 'chapstick', 'market', 'headphones'], "Testing that beginning returns the correct list on input ['water', 'phone', 'home', 'chapstick', 'market', 'headphones', 'bye', 'stickie notes', 'snapchat', 'facebook', 'social media']")
      self.assertEqual(beginning(['bye', 'no', 'yes', 'maybe', 'sorta']), [], "Testing that beginning returns the correct list on input ['bye', 'no', 'yes', 'maybe', 'sorta']")
      self.assertEqual(beginning(['hello', 'hi', 'hiyah', 'howdy', 'what up', 'whats good', 'holla', 'good afternoon', 'good morning', 'sup', 'see yah', 'toodel loo', 'night', 'until later', 'peace', 'bye', 'good-bye', 'g night']),['hello', 'hi', 'hiyah', 'howdy', 'what up', 'whats good', 'holla', 'good afternoon', 'good morning', 'sup'] , "Testing that beginning returns the correct list on input ['hello', 'hi', 'hiyah', 'howdy', 'what up', 'whats good', 'holla', 'good afternoon', 'good morning', 'sup', 'see yah', 'toodel loo', 'night', 'until later', 'peace', 'bye', 'good-bye', 'g night']")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-7</id>
    <title>More About Iteration</title>
    <subchapter>
      <id>more-about-iteration_introduction-iteration</id>
      <title>Introduction: Iteration</title>
    </subchapter>
    <subchapter>
      <id>more-about-iteration_the-for-loop</id>
      <title>The for loop</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_2_1_editor" data-question_label="" data-codelens="true">for name in ["Joe", "Amy", "Brad", "Angelina", "Zuki", "Thandi", "Matthew"]:
    print("Hi", name, "Please come to my party on Saturday!")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>more-about-iteration_flow-of-execution-of-the-for-loop</id>
      <title>Flow of Execution of the for Loop</title>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_vtest" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/vtest.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>more-about-iteration_strings-and-for-loops</id>
      <title>Strings and <code class="code-inline tex2jax_ignore">for</code> loops</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_4_1_editor" data-question_label="" data-codelens="true">for achar in "Go Spot Go":
    print(achar)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 7.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question7_4_1" data-multipleanswers="false"><div class="para" id="p-1743">How many times is the word HELLO printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">s = "python rocks"
for ch in s:
   print("HELLO")
</code></pre></div><li data-component="answer" id="foppff_1_question7_4_1_opt_a"><div class="para" id="p-1744">10</div></li><li data-component="feedback" id="foppff_1_question7_4_1_opt_a"><div class="para" id="p-1745">Iteration by item will process once for each item in the sequence.</div></li><li data-component="answer" id="foppff_1_question7_4_1_opt_b"><div class="para" id="p-1746">11</div></li><li data-component="feedback" id="foppff_1_question7_4_1_opt_b"><div class="para" id="p-1747">The blank is part of the sequence.</div></li><li data-component="answer" id="foppff_1_question7_4_1_opt_c" data-correct=""><div class="para" id="p-1748">12</div></li><li data-component="feedback" id="foppff_1_question7_4_1_opt_c"><div class="para" id="p-1749">Yes, there are 12 characters, including the blank.</div></li><li data-component="answer" id="foppff_1_question7_4_1_opt_d"><div class="para" id="p-1750">Error, the for statement needs to use the range function.</div></li><li data-component="feedback" id="foppff_1_question7_4_1_opt_d"><div class="para" id="p-1751">The for statement can iterate over a sequence item by item.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>more-about-iteration_the-accumulator-pattern</id>
      <title>The Accumulator Pattern</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_5_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_5_1_editor" data-question_label="" data-codelens="true">def sum_nums() -&gt; int:
  nums = "123456789"
  accum = 0
  for w in nums:
      accum = accum + int(w)
  return accum

print(sum_nums())
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens7_5_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens7_5_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_5_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_5_2_editor" data-question_label="" data-codelens="true">print("range(5): ")
for i in range(5):
    print(i)

print("range(0,5): ")
for i in range(0, 5):
    print(i)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_5_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_5_3_editor" data-question_label="" data-codelens="true">accum = 0
for w in range(11):
    accum = accum + w
print(accum)

# or, if you use two inputs for the range function

sec_accum = 0
for w in range(1,11):
    sec_accum = sec_accum + w
print(sec_accum)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_5_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_5_4_editor" data-question_label="" data-codelens="true">nums = "123456789"
count = 0
for w in nums:
    count = count + 1
print(count)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 7.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question7_5_5" data-multipleanswers="false"><div class="para" id="p-1767">Consider the following code:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">nums = "123456789"
for w in nums:
   accum = 0
   accum = accum + w
print(accum)
</code></pre></div> <div class="para" id="p-1768">What happens if you put the initialization of accum inside the for loop as the first instruction in the loop?</div><li data-component="answer" id="foppff_1_question7_5_5_opt_a" data-correct=""><div class="para" id="p-1769">It will print out 9 instead of 45</div></li><li data-component="feedback" id="foppff_1_question7_5_5_opt_a"><div class="para" id="p-1770">The variable accum will be reset to 0 each time through the loop. Then it will add the current item. Only the last item will count.</div></li><li data-component="answer" id="foppff_1_question7_5_5_opt_b"><div class="para" id="p-1771">It will cause a run-time error</div></li><li data-component="feedback" id="foppff_1_question7_5_5_opt_b"><div class="para" id="p-1772">Assignment statements are perfectly legal inside loops and will not cause an error.</div></li><li data-component="answer" id="foppff_1_question7_5_5_opt_c"><div class="para" id="p-1773">It will print out 0 instead of 45</div></li><li data-component="feedback" id="foppff_1_question7_5_5_opt_c"><div class="para" id="p-1774">Good thought: the variable accum will be reset to 0 each time through the loop. But then it adds the current item.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 7.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="foppff_1_pp7_5_1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="p-1775">Rearrange the code statements so that the program will add up the first n odd numbers where n is provided by the user.</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-noindent="true">n = int(input('How many odd numbers would you like to add together?'))
thesum = 0
oddnumber = 1
---
for counter in range(n):
---
   thesum = thesum + oddnumber
   oddnumber = oddnumber + 2
---
print(thesum)</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 7.5.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_5_5">
                <div class="ac_question col-md-12" id="foppff_1_ac7_5_5_question">
                  <div class="para" id="p-1776">Count the number of characters in string <code class="code-inline tex2jax_ignore">str1</code>. Do not use <code class="code-inline tex2jax_ignore">len()</code>. Save the number in variable <code class="code-inline tex2jax_ignore">numbs</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_5_5_editor" data-question_label="" data-codelens="true">str1 = "I like nonsense, it wakes up the brain cells. Fantasy is a necessary ingredient in living."

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testEight(self):
      self.assertEqual(numbs, 90, "Testing that numbs is assigned to correct values.")
      self.assertNotIn("len(", self.getEditorText(), "Testing your code (Don't worry about actual and expected values)."))

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 7.5.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_5_6">
                <div class="ac_question col-md-12" id="foppff_1_ac7_5_6_question">
                  <div class="para" id="p-1777">Create a string of numbers 0 through 40 and assign this string to the variable <code class="code-inline tex2jax_ignore">numbers</code>. Then, accumulate the total of the string’s values and assign that sum to the variable <code class="code-inline tex2jax_ignore">sum1</code>. Note that, although the value <code class="code-inline tex2jax_ignore">10</code> will be added to the string, it will be summed as <code class="code-inline tex2jax_ignore">1 + 0</code>, as the loop merely looks at one digit at a time.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_5_6_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testNineA(self):
      self.assertEqual(numbers, "012345678910111213141516171819202122232425262728293031323334353637383940", "Testing that numbers is assigned to correct values.")

   def testNineB(self):
      self.assertEqual(sum1, 244, "Testing that sum1 has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>more-about-iteration_printing-intermediate-results</id>
      <title>Printing Intermediate Results</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_6_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_6_1_editor" data-question_label="" data-codelens="true">w = range(10)

tot = 0
for num in w:
    tot += num
print(tot)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_6_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_6_2_editor" data-question_label="" data-codelens="true">w = range(10)

tot = 0
for num in w:
    print(num)
    tot += num
print(tot)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_6_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_6_3_editor" data-question_label="" data-codelens="true">w = range(10)


tot = 0
for num in w:
    print(num)
    tot += num
    print(tot)
print(tot)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_6_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_6_4_editor" data-question_label="" data-codelens="true">w = range(10)

tot = 0
print("***** Before the For Loop ******")
for num in w:
    print("***** A New Loop Iteration ******")
    print("Value of num:", num)
    tot += num
    print("Value of tot:", tot)
print("***** End of For Loop *****")
print("Final total:", tot)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>more-about-iteration_naming-variables-in-for-loops</id>
      <title>Naming Variables in For Loops</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_7_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_7_1_editor" data-question_label="" data-codelens="true"># x is a list defined elsewhere

for y in x:
    print(y)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac7_7_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac7_7_2_editor" data-question_label="" data-codelens="true"># genres is a list defined elsewhere

for genre in genres:
    print(genre)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>more-about-iteration_glossary</id>
      <title>Glossary</title>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-8</id>
    <title>Sequences</title>
    <subchapter>
      <id>sequences_introduction-sequences</id>
      <title>Introduction: Sequences</title>
    </subchapter>
    <subchapter>
      <id>sequences_strings-and-lists</id>
      <title>Strings and Lists</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_2_1_editor" data-question_label="" data-codelens="true">t = (5,)
print(type(t))

x = (5)
print(type(x))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_2_1" data-multipleanswers="false">
                <div class="para" id="p-1831">A list can only contain integer items.</div>
                <li data-component="answer" id="foppff_1_question8_2_1_opt_a" data-correct="">
                  <div class="para" id="p-1832">False</div>
                </li>
                <li data-component="feedback" id="foppff_1_question8_2_1_opt_a">
                  <div class="para" id="p-1833">Yes, unlike strings, lists can consist of any type of Python data.</div>
                </li>
                <li data-component="answer" id="foppff_1_question8_2_1_opt_b">
                  <div class="para" id="p-1834">True</div>
                </li>
                <li data-component="feedback" id="foppff_1_question8_2_1_opt_b">
                  <div class="para" id="p-1835">Lists are heterogeneous, meaning they can have different types of data.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>sequences_index-operator-working-with-the-characters-of-a-string</id>
      <title>Index Operator: Working with the Characters of a String</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_3_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_3_1_editor" data-question_label="" data-codelens="true">school = "Luther College"
m = school[2]
print(m)

lastchar = school[-1]
print(lastchar)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_3_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_3_2_editor" data-question_label="" data-codelens="true">numbers = [17, 123, 87, 34, 66, 8398, 44]
print(numbers[2])
print(numbers[9-8])
print(numbers[-2])
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_3_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_3_3_editor" data-question_label="" data-codelens="true">prices = (1.99, 2.00, 5.50, 20.95, 100.98)
print(prices[0])
print(prices[-1])
print(prices[3-5])
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_3_1" data-multipleanswers="false"><div class="para" id="p-1847">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">s = "python rocks"
print(s[3])
</code></pre></div><li data-component="answer" id="foppff_1_question8_3_1_opt_a"><div class="para" id="p-1848">t</div></li><li data-component="feedback" id="foppff_1_question8_3_1_opt_a"><div class="para" id="p-1849">Index locations do not start with 1, they start with 0.</div></li><li data-component="answer" id="foppff_1_question8_3_1_opt_b" data-correct=""><div class="para" id="p-1850">h</div></li><li data-component="feedback" id="foppff_1_question8_3_1_opt_b"><div class="para" id="p-1851">Yes, index locations start with 0.</div></li><li data-component="answer" id="foppff_1_question8_3_1_opt_c"><div class="para" id="p-1852">c</div></li><li data-component="feedback" id="foppff_1_question8_3_1_opt_c"><div class="para" id="p-1853">s[-3] would return c, counting from right to left.</div></li><li data-component="answer" id="foppff_1_question8_3_1_opt_d"><div class="para" id="p-1854">Error, you cannot use the [ ] operator with a string.</div></li><li data-component="feedback" id="foppff_1_question8_3_1_opt_d"><div class="para" id="p-1855">[ ] is the index operator.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_3_2" data-multipleanswers="false"><div class="para" id="p-1856">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">s = "python rocks"
print(s[2] + s[-4])
</code></pre></div><li data-component="answer" id="foppff_1_question8_3_2_opt_a"><div class="para" id="p-1857">tr</div></li><li data-component="feedback" id="foppff_1_question8_3_2_opt_a"><div class="para" id="p-1858">Almost, t is at postion 2, counting left to right starting from 0; but r is at -5, counting right to left starting from -1.</div></li><li data-component="answer" id="foppff_1_question8_3_2_opt_b" data-correct=""><div class="para" id="p-1859">to</div></li><li data-component="feedback" id="foppff_1_question8_3_2_opt_b"><div class="para" id="p-1860">For -4 you count from right to left, starting with -1.</div></li><li data-component="answer" id="foppff_1_question8_3_2_opt_c"><div class="para" id="p-1861">ps</div></li><li data-component="feedback" id="foppff_1_question8_3_2_opt_c"><div class="para" id="p-1862">p is at location 0, not 2.</div></li><li data-component="answer" id="foppff_1_question8_3_2_opt_d"><div class="para" id="p-1863">nn</div></li><li data-component="feedback" id="foppff_1_question8_3_2_opt_d"><div class="para" id="p-1864">n is at location 5, not 2.</div></li><li data-component="answer" id="foppff_1_question8_3_2_opt_e"><div class="para" id="p-1865">Error, you cannot use the [ ] operator with the + operator.</div></li><li data-component="feedback" id="foppff_1_question8_3_2_opt_e"><div class="para" id="p-1866">[ ] operator returns a string that can be concatenated with another string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_3_3" data-multipleanswers="false"><div class="para" id="p-1867">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
print(alist[5])
</code></pre></div><li data-component="answer" id="foppff_1_question8_3_3_opt_a"><div class="para" id="p-1868">[ ]</div></li><li data-component="feedback" id="foppff_1_question8_3_3_opt_a"><div class="para" id="p-1869">The empty list is at index 4.</div></li><li data-component="answer" id="foppff_1_question8_3_3_opt_b" data-correct=""><div class="para" id="p-1870">3.14</div></li><li data-component="feedback" id="foppff_1_question8_3_3_opt_b"><div class="para" id="p-1871">Yes, 3.14 is at index 5 since we start counting at 0 and sublists count as one item.</div></li><li data-component="answer" id="foppff_1_question8_3_3_opt_c"><div class="para" id="p-1872">False</div></li><li data-component="feedback" id="foppff_1_question8_3_3_opt_c"><div class="para" id="p-1873">False is at index 6.</div></li><li data-component="answer" id="foppff_1_question8_3_3_opt_d"><div class="para" id="p-1874">"dog"</div></li><li data-component="feedback" id="foppff_1_question8_3_3_opt_d"><div class="para" id="p-1875">Look again, the element at index 3 is a list. This list only counts as one element.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_3_4">
                <div class="ac_question col-md-12" id="foppff_1_ac8_3_4_question">
                  <div class="para" id="p-1876">Assign the value of the 34th element of <code class="code-inline tex2jax_ignore">lst</code> to the variable <code class="code-inline tex2jax_ignore">output</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_3_4_editor" data-question_label="" data-codelens="true">lst = ["hi", "morning", "dog", "506", "caterpillar", "balloons", 106, "yo-yo", "python", "moon", "water", "sleepy", "daffy", 45, "donald", "whiteboard", "glasses", "markers", "couches", "butterfly", "100", "magazine", "door", "picture", "window", ["Olympics", "handle"], "chair", "pages", "readings", "burger", "juggle", "craft", ["store", "poster", "board"], "laptop", "computer", "plates", "hotdog", "salad", "backpack", "zipper", "ring", "watch", "finger", "bags", "boxes", "pods", "peas", "apples", "horse", "guinea pig", "bowl", "EECS"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(output, "laptop", "Testing that output value is assigned to correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.3.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_3_5">
                <div class="ac_question col-md-12" id="foppff_1_ac8_3_5_question">
                  <div class="para" id="p-1877">Assign the value of the 23rd element of <code class="code-inline tex2jax_ignore">l</code> to the variable <code class="code-inline tex2jax_ignore">checking</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_3_5_editor" data-question_label="" data-codelens="true">l = ("hi", "goodbye", "python", "106", "506", 91, ['all', 'Paul', 'Jackie', "UMSI", 1, "Stephen", 4.5], 109, "chair", "pizza", "wolverine", 2017, 3.92, 1817, "account", "readings", "papers", 12, "facebook", "twitter", 193.2, "snapchat", "leaders and the best", "social", "1986", 9, 29, "holiday", ["women", "olympics", "gold", "rio", 21, "2016", "men"], "26trombones")

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(checking, "leaders and the best", "Testing that checking has the correct element assigned.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.3.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_3_6">
                <div class="ac_question col-md-12" id="foppff_1_ac8_3_6_question">
                  <div class="para" id="p-1878">Assign the value of the last chacter of <code class="code-inline tex2jax_ignore">lst</code> to the variable <code class="code-inline tex2jax_ignore">output</code>. Do this so that the length of lst doesn’t matter.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_3_6_editor" data-question_label="" data-codelens="true">lst = "Every chess or checkers game begins from the same position and has a finite number of moves that can be played. While the number of possible scenarios and moves is quite large, it is still possible for computers to calculate that number and even be programmed to respond well against a human player..."

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testThree(self):
      self.assertEqual(output, ".", "Testing that output value is assigned to correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>sequences_disambiguating-creation-vs-indexing</id>
      <title>Disambiguating []: creation vs indexing</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_4_1_editor" data-question_label="" data-codelens="true">new_lst = []
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_4_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_4_2_editor" data-question_label="" data-codelens="true">new_lst = ["NFLX", "AMZN", "GOOGL", "DIS", "XOM"]
part_of_new_lst = new_lst[0]
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_4_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_4_3_editor" data-question_label="" data-codelens="true">lst = [0]
n_lst = lst[0]

print(lst)
print(n_lst)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_4_1" data-multipleanswers="false">
                <div class="para" id="p-1886">Which of the following correctly uses indexing? Assume that <code class="code-inline tex2jax_ignore">a</code> is a list or string. Select as many as apply.</div>
                <li data-component="answer" id="foppff_1_question8_4_1_opt_a">
                  <div class="para" id="p-1887">w = [a]</div>
                </li>
                <li data-component="feedback" id="foppff_1_question8_4_1_opt_a">
                  <div class="para" id="p-1888">No, due to the way the code was written it creates a list. This list would have one element which is the value assigned to the variable a.</div>
                </li>
                <li data-component="answer" id="foppff_1_question8_4_1_opt_b">
                  <div class="para" id="p-1889">y = a[]</div>
                </li>
                <li data-component="feedback" id="foppff_1_question8_4_1_opt_b">
                  <div class="para" id="p-1890">Though this tries to use indexing, it does not specify what element should be taken from a.</div>
                </li>
                <li data-component="answer" id="foppff_1_question8_4_1_opt_c">
                  <div class="para" id="p-1891">x = [8]</div>
                </li>
                <li data-component="feedback" id="foppff_1_question8_4_1_opt_c">
                  <div class="para" id="p-1892">No, this is an example of creating a list.</div>
                </li>
                <li data-component="answer" id="foppff_1_question8_4_1_opt_d" data-correct="">
                  <div class="para" id="p-1893">t = a[0]</div>
                </li>
                <li data-component="feedback" id="foppff_1_question8_4_1_opt_d">
                  <div class="para" id="p-1894">Yes, this will using indexing to get the value of the first element of a.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>sequences_length</id>
      <title>Length</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_5_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_5_1_editor" data-question_label="" data-codelens="true">fruit = "Banana"
print(len(fruit))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_5_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_5_2_editor" data-question_label="" data-codelens="true">fruit = "Banana"
sz = len(fruit)
last = fruit[sz]       # ERROR!
print(last)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_5_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_5_3_editor" data-question_label="" data-codelens="true">fruit = "Banana"
sz = len(fruit)
lastch = fruit[sz-1]
print(lastch)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_5_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_5_4_editor" data-question_label="" data-codelens="true">alist =  ["hello", 2.0, 5]
print(len(alist))
print(len(alist[0]))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_5_1" data-multipleanswers="false"><div class="para" id="p-1904">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">s = "python rocks"
print(len(s))
</code></pre></div><li data-component="answer" id="foppff_1_question8_5_1_opt_a"><div class="para" id="p-1905">11</div></li><li data-component="feedback" id="foppff_1_question8_5_1_opt_a"><div class="para" id="p-1906">The blank space counts as a character.</div></li><li data-component="answer" id="foppff_1_question8_5_1_opt_b" data-correct=""><div class="para" id="p-1907">12</div></li><li data-component="feedback" id="foppff_1_question8_5_1_opt_b"><div class="para" id="p-1908">Yes, there are 12 characters in the string.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_5_2" data-multipleanswers="false"><div class="para" id="p-1909">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [3, 67, "cat", 3.14, False]
print(len(alist))
</code></pre></div><li data-component="answer" id="foppff_1_question8_5_2_opt_a"><div class="para" id="p-1910">4</div></li><li data-component="feedback" id="foppff_1_question8_5_2_opt_a"><div class="para" id="p-1911">len returns the actual number of items in the list, not the maximum index value.</div></li><li data-component="answer" id="foppff_1_question8_5_2_opt_b" data-correct=""><div class="para" id="p-1912">5</div></li><li data-component="feedback" id="foppff_1_question8_5_2_opt_b"><div class="para" id="p-1913">Yes, there are 5 items in this list.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_5_5">
                <div class="ac_question col-md-12" id="foppff_1_ac8_5_5_question">
                  <div class="para" id="p-1914">Assign the number of elements in <code class="code-inline tex2jax_ignore">lst</code> to the variable <code class="code-inline tex2jax_ignore">output</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_5_5_editor" data-question_label="" data-codelens="true">lst = ["hi", "morning", "dog", "506", "caterpillar", "balloons", 106, "yo-yo", "python", "moon", "water", "sleepy", "daffy", 45, "donald", "whiteboard", "glasses", "markers", "couches", "butterfly", "100", "magazine", "door", "picture", "window", ["Olympics", "handle"], "chair", "pages", "readings", "burger", "juggle", "craft", ["store", "poster", "board"], "laptop", "computer", "plates", "hotdog", "salad", "backpack", "zipper", "ring", "watch", "finger", "bags", "boxes", "pods", "peas", "apples", "horse", "guinea pig", "bowl", "EECS"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwo(self):
      self.assertEqual(output, 52, "Testing that output value is assigned to correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>sequences_the-slice-operator</id>
      <title>The Slice Operator</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_6_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_6_1_editor" data-question_label="" data-codelens="true">singers = "Peter, Paul, and Mary"
print(singers[0:5])
print(singers[7:11])
print(singers[17:21])
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_6_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_6_2_editor" data-question_label="" data-codelens="true">fruit = "banana"
print(fruit[:3])
print(fruit[3:])
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_6_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_6_3_editor" data-question_label="" data-codelens="true">a_list = ['a', 'b', 'c', 'd', 'e', 'f']
print(a_list[1:3])
print(a_list[:4])
print(a_list[3:])
print(a_list[:])
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_6_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_6_4_editor" data-question_label="" data-codelens="true">julia = ("Julia", "Roberts", 1967, "Duplicity", 2009, "Actress", "Atlanta, Georgia")
print(julia[2])
print(julia[2:6])

print(len(julia))

julia = julia[:3] + ("Eat Pray Love", 2010) + julia[5:]
print(julia)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_6_1" data-multipleanswers="false"><div class="para" id="p-1922">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">s = "python rocks"
print(s[3:8])
</code></pre></div><li data-component="answer" id="foppff_1_question8_6_1_opt_a"><div class="para" id="p-1923">python</div></li><li data-component="feedback" id="foppff_1_question8_6_1_opt_a"><div class="para" id="p-1924">That would be s[0:6].</div></li><li data-component="answer" id="foppff_1_question8_6_1_opt_b"><div class="para" id="p-1925">rocks</div></li><li data-component="feedback" id="foppff_1_question8_6_1_opt_b"><div class="para" id="p-1926">That would be s[7:].</div></li><li data-component="answer" id="foppff_1_question8_6_1_opt_c" data-correct=""><div class="para" id="p-1927">hon r</div></li><li data-component="feedback" id="foppff_1_question8_6_1_opt_c"><div class="para" id="p-1928">Yes, start with the character at index 3 and go up to but not include the character at index 8.</div></li><li data-component="answer" id="foppff_1_question8_6_1_opt_d"><div class="para" id="p-1929">Error, you cannot have two numbers inside the [ ].</div></li><li data-component="feedback" id="foppff_1_question8_6_1_opt_d"><div class="para" id="p-1930">This is called slicing, not indexing. It requires a start and an end.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.6.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_6_2" data-multipleanswers="false"><div class="para" id="p-1931">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
print(alist[4:])
</code></pre></div><li data-component="answer" id="foppff_1_question8_6_2_opt_a" data-correct=""><div class="para" id="p-1932">[ [ ], 3.14, False]</div></li><li data-component="feedback" id="foppff_1_question8_6_2_opt_a"><div class="para" id="p-1933">Yes, the slice starts at index 4 and goes up to and including the last item.</div></li><li data-component="answer" id="foppff_1_question8_6_2_opt_b"><div class="para" id="p-1934">[ [ ], 3.14]</div></li><li data-component="feedback" id="foppff_1_question8_6_2_opt_b"><div class="para" id="p-1935">By leaving out the upper bound on the slice, we go up to and including the last item.</div></li><li data-component="answer" id="foppff_1_question8_6_2_opt_c"><div class="para" id="p-1936">[ [56, 57, "dog"], [ ], 3.14, False]</div></li><li data-component="feedback" id="foppff_1_question8_6_2_opt_c"><div class="para" id="p-1937">Index values start at 0.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.6.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_6_3" data-multipleanswers="false"><div class="para" id="p-1938">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">L = [0.34, '6', 'SI106', 'Python', -2]
print(len(L[1:-1]))
</code></pre></div><li data-component="answer" id="foppff_1_question8_6_3_opt_a"><div class="para" id="p-1939">2</div></li><li data-component="feedback" id="foppff_1_question8_6_3_opt_a"><div class="para" id="p-1940">The list begins with the second item of L and includes everything up to but not including the last item.</div></li><li data-component="answer" id="foppff_1_question8_6_3_opt_b" data-correct=""><div class="para" id="p-1941">3</div></li><li data-component="feedback" id="foppff_1_question8_6_3_opt_b"><div class="para" id="p-1942">Yes, there are 3 items in this list.</div></li><li data-component="answer" id="foppff_1_question8_6_3_opt_c"><div class="para" id="p-1943">4</div></li><li data-component="feedback" id="foppff_1_question8_6_3_opt_c"><div class="para" id="p-1944">The list begins with the second item of L and includes everything up to but not including the last item.</div></li><li data-component="answer" id="foppff_1_question8_6_3_opt_d"><div class="para" id="p-1945">5</div></li><li data-component="feedback" id="foppff_1_question8_6_3_opt_d"><div class="para" id="p-1946">The list begins with the second item of L and includes everything up to but not including the last item.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.6.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_6_5">
                <div class="ac_question col-md-12" id="foppff_1_ac8_6_5_question">
                  <div class="para" id="p-1947">Create a new list using the 9th through 12th elements (four items in all) of <code class="code-inline tex2jax_ignore">new_lst</code> and assign it to the variable <code class="code-inline tex2jax_ignore">sub_lst</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_6_5_editor" data-question_label="" data-codelens="true">new_lst = ["computer", "luxurious", "basket", "crime", 0, 2.49, "institution", "slice", "sun", ["water", "air", "fire", "earth"], "games", 2.7, "code", "java", ["birthday", "celebration", 1817, "party", "cake", 5], "rain", "thunderstorm", "top down"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(sub_lst, new_lst[8:12], "Testing that sub_lst has the correct elements assigned.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>sequences_concatenation-and-repetition</id>
      <title>Concatenation and Repetition</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_7_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_7_1_editor" data-question_label="" data-codelens="true">fruit = ["apple","orange","banana","cherry"]
print([1,2] + [3,4])
print(fruit+[6,7,8,9])

print([0] * 4)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens8_7_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens8_7_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_7_1" data-multipleanswers="false"><div class="para" id="p-1954">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [1,3,5]
blist = [2,4,6]
print(alist + blist)
</code></pre></div><li data-component="answer" id="foppff_1_question8_7_1_opt_a"><div class="para" id="p-1955">6</div></li><li data-component="feedback" id="foppff_1_question8_7_1_opt_a"><div class="para" id="p-1956">Concatenation does not add the lengths of the lists.</div></li><li data-component="answer" id="foppff_1_question8_7_1_opt_b"><div class="para" id="p-1957">[1,2,3,4,5,6]</div></li><li data-component="feedback" id="foppff_1_question8_7_1_opt_b"><div class="para" id="p-1958">Concatenation does not reorder the items.</div></li><li data-component="answer" id="foppff_1_question8_7_1_opt_c" data-correct=""><div class="para" id="p-1959">[1,3,5,2,4,6]</div></li><li data-component="feedback" id="foppff_1_question8_7_1_opt_c"><div class="para" id="p-1960">Yes, a new list with all the items of the first list followed by all those from the second.</div></li><li data-component="answer" id="foppff_1_question8_7_1_opt_d"><div class="para" id="p-1961">[3,7,11]</div></li><li data-component="feedback" id="foppff_1_question8_7_1_opt_d"><div class="para" id="p-1962">Concatenation does not add the individual items.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.7.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_7_2" data-multipleanswers="false"><div class="para" id="p-1963">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [1,3,5]
print(alist * 3)
</code></pre></div><li data-component="answer" id="foppff_1_question8_7_2_opt_a"><div class="para" id="p-1964">9</div></li><li data-component="feedback" id="foppff_1_question8_7_2_opt_a"><div class="para" id="p-1965">Repetition does not multiply the lengths of the lists.  It repeats the items.</div></li><li data-component="answer" id="foppff_1_question8_7_2_opt_b"><div class="para" id="p-1966">[1,1,1,3,3,3,5,5,5]</div></li><li data-component="feedback" id="foppff_1_question8_7_2_opt_b"><div class="para" id="p-1967">Repetition does not repeat each item individually.</div></li><li data-component="answer" id="foppff_1_question8_7_2_opt_c" data-correct=""><div class="para" id="p-1968">[1,3,5,1,3,5,1,3,5]</div></li><li data-component="feedback" id="foppff_1_question8_7_2_opt_c"><div class="para" id="p-1969">Yes, the items of the list are repeated 3 times, one after another.</div></li><li data-component="answer" id="foppff_1_question8_7_2_opt_d"><div class="para" id="p-1970">[3,9,15]</div></li><li data-component="feedback" id="foppff_1_question8_7_2_opt_d"><div class="para" id="p-1971">Repetition does not multiply the individual items.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>sequences_count-and-index</id>
      <title>Count and Index</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_8_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_8_1_editor" data-question_label="" data-codelens="true">a = "I have had an apple on my desk before!"
print(a.count("e"))
print(a.count("ha"))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_8_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_8_2_editor" data-question_label="" data-codelens="true">z = ['atoms', 4, 'neutron', 6, 'proton', 4, 'electron', 4, 'electron', 'atoms']
print(z.count("4"))
print(z.count(4))
print(z.count("a"))
print(z.count("electron"))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_8_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_8_3_editor" data-question_label="" data-codelens="true">music = "Pull out your music and dancing can begin"
bio = ["Metatarsal", "Metatarsal", "Fibula", [], "Tibia", "Tibia", 43, "Femur", "Occipital", "Metatarsal"]

print(music.index("m"))
print(music.index("your"))

print(bio.index("Metatarsal"))
print(bio.index([]))
print(bio.index(43))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_8_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_8_4_editor" data-question_label="" data-codelens="true">seasons = ["winter", "spring", "summer", "fall"]

print(seasons.index("autumn"))  #Error!
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.8.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_8_1" data-multipleanswers="false"><div class="para" id="p-1982">What will be stored in the variable ty below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">qu = "wow, welcome week!"
ty = qu.index("we")
</code></pre></div><li data-component="answer" id="foppff_1_question8_8_1_opt_a" data-correct=""><div class="para" id="p-1983">5</div></li><li data-component="feedback" id="foppff_1_question8_8_1_opt_a"><div class="para" id="p-1984">Yes, when we get the index of a string that is longer than one character, we get the index for the first character in the string.</div></li><li data-component="answer" id="foppff_1_question8_8_1_opt_b"><div class="para" id="p-1985">6</div></li><li data-component="feedback" id="foppff_1_question8_8_1_opt_b"><div class="para" id="p-1986">When we get the index of a string that is longer than one character, we get the index for the first character in the string.</div></li><li data-component="answer" id="foppff_1_question8_8_1_opt_c"><div class="para" id="p-1987">13</div></li><li data-component="feedback" id="foppff_1_question8_8_1_opt_c"><div class="para" id="p-1988">Remember that index returns the left most occurance of the argument.</div></li><li data-component="answer" id="foppff_1_question8_8_1_opt_d"><div class="para" id="p-1989">14</div></li><li data-component="feedback" id="foppff_1_question8_8_1_opt_d"><div class="para" id="p-1990">Remember that index returns the left most occurance of the argument.</div></li><li data-component="answer" id="foppff_1_question8_8_1_opt_e"><div class="para" id="p-1991">There is an error.</div></li><li data-component="feedback" id="foppff_1_question8_8_1_opt_e"><div class="para" id="p-1992">There is at least one ’we’ in the string assigned to qu.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.8.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_8_2" data-multipleanswers="false"><div class="para" id="p-1993">What will be stored in the variable ty below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">qu = "wow, welcome week! Were you wanting to go?"
ty = qu.count("we")
</code></pre></div><li data-component="answer" id="foppff_1_question8_8_2_opt_a"><div class="para" id="p-1994">0</div></li><li data-component="feedback" id="foppff_1_question8_8_2_opt_a"><div class="para" id="p-1995">No, there is at least one e in the string.</div></li><li data-component="answer" id="foppff_1_question8_8_2_opt_b" data-correct=""><div class="para" id="p-1996">2</div></li><li data-component="feedback" id="foppff_1_question8_8_2_opt_b"><div class="para" id="p-1997">Yes, there is a difference between "we" and "We" which means there are only two in the string.</div></li><li data-component="answer" id="foppff_1_question8_8_2_opt_c"><div class="para" id="p-1998">3</div></li><li data-component="feedback" id="foppff_1_question8_8_2_opt_c"><div class="para" id="p-1999">there is a difference between "we" and "We".</div></li><li data-component="answer" id="foppff_1_question8_8_2_opt_d"><div class="para" id="p-2000">There is an error.</div></li><li data-component="feedback" id="foppff_1_question8_8_2_opt_d"><div class="para" id="p-2001">There is no error in the code.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.8.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_8_3" data-multipleanswers="false"><div class="para" id="p-2002">What will be stored in the variable ht below?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">rooms = ['bathroom', 'kitchen', 'living room', 'bedroom', 'closet', "foyer"]
ht = rooms.index("garden")
</code></pre></div><li data-component="answer" id="foppff_1_question8_8_3_opt_a"><div class="para" id="p-2003">0</div></li><li data-component="feedback" id="foppff_1_question8_8_3_opt_a"><div class="para" id="p-2004">No, the first element is ’bathroom’, not ’garden’.</div></li><li data-component="answer" id="foppff_1_question8_8_3_opt_b"><div class="para" id="p-2005">-1</div></li><li data-component="feedback" id="foppff_1_question8_8_3_opt_b"><div class="para" id="p-2006">Though there is no ’garden’ in the list, we do not get back -1 when we use index. Instead, we get an error.</div></li><li data-component="answer" id="foppff_1_question8_8_3_opt_c" data-correct=""><div class="para" id="p-2007">There is an error.</div></li><li data-component="feedback" id="foppff_1_question8_8_3_opt_c"><div class="para" id="p-2008">Yes, there is no ’garden’ in the list, so we get back an error.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>sequences_splitting-and-joining-strings</id>
      <title>Splitting and Joining Strings</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_9_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_9_1_editor" data-question_label="" data-codelens="true">song = "The rain in Spain..."
wds = song.split()
print(wds)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_9_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_9_2_editor" data-question_label="" data-codelens="true">song = "The rain in Spain..."
wds = song.split('ai')
print(wds)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_9_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_9_3_editor" data-question_label="" data-codelens="true">wds = ["red", "blue", "green"]
glue = ';'
s = glue.join(wds)
print(s)
print(wds)

print("***".join(wds))
print("".join(wds))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.9.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_9_4">
                <div class="ac_question col-md-12" id="foppff_1_ac8_9_4_question">
                  <div class="para" id="p-2016">Create a new list of the 6th through 13th elements of <code class="code-inline tex2jax_ignore">lst</code> (eight items in all) and assign it to the variable <code class="code-inline tex2jax_ignore">output</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_9_4_editor" data-question_label="" data-codelens="true">lst = ["swimming", 2, "water bottle", 44, "lollipop", "shine", "marsh", "winter", "donkey", "rain", ["Rio", "Beijing", "London"], [1,2,3], "gold", "bronze", "silver", "mathematician", "scientist", "actor", "actress", "win", "cell phone", "leg", "running", "horse", "socket", "plug", ["Phelps", "le Clos", "Lochte"], "drink", 22, "happyfeet", "penguins"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFour(self):
      self.assertEqual(output, lst[5:13], "Testing that output value is assigned to correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.9.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_9_5">
                <div class="ac_question col-md-12" id="foppff_1_ac8_9_5_question">
                  <div class="para" id="p-2017">Create a variable <code class="code-inline tex2jax_ignore">output</code> and assign to it a list whose elements are the words in the string <code class="code-inline tex2jax_ignore">str1</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_9_5_editor" data-question_label="" data-codelens="true">str1 = "OH THE PLACES YOU'LL GO"

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testSix(self):
      self.assertEqual(output, ["OH", "THE", "PLACES", "YOU'LL", "GO"], "Testing that output value is assigned to correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>sequences_chapter-assessment</id>
      <title>Chapter Assessment</title>
      <question>
        <label>Checkpoint 8.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_10_1" data-multipleanswers="false"><div class="para" id="p-2020">What will the output be for the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">let = "z"
let_two = "p"
c = let_two + let
m = c*5
print(m)
</code></pre></div><li data-component="answer" id="foppff_1_question8_10_1_opt_a"><div class="para" id="p-2021">zpzpzpzpzp</div></li><li data-component="feedback" id="foppff_1_question8_10_1_opt_a"><div class="para" id="p-2022">The order of concatenation matters.</div></li><li data-component="answer" id="foppff_1_question8_10_1_opt_b"><div class="para" id="p-2023">zzzzzppppp</div></li><li data-component="feedback" id="foppff_1_question8_10_1_opt_b"><div class="para" id="p-2024">Think about the order that the program is executed in, what occurs first?</div></li><li data-component="answer" id="foppff_1_question8_10_1_opt_c" data-correct=""><div class="para" id="p-2025">pzpzpzpzpz</div></li><li data-component="feedback" id="foppff_1_question8_10_1_opt_c"><div class="para" id="p-2026">Yes, because let_two was put before let, c has "pz" and then that is repeated five times.</div></li><li data-component="answer" id="foppff_1_question8_10_1_opt_d"><div class="para" id="p-2027">pppppzzzzz</div></li><li data-component="feedback" id="foppff_1_question8_10_1_opt_d"><div class="para" id="p-2028">Think about the order that the program is executed in, what occurs first?</div></li><li data-component="answer" id="foppff_1_question8_10_1_opt_e"><div class="para" id="p-2029">None of the above, an error will occur.</div></li><li data-component="feedback" id="foppff_1_question8_10_1_opt_e"><div class="para" id="p-2030">This is correct syntax and no errors will occur.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_10_1">
                <div class="ac_question col-md-12" id="foppff_1_ac8_10_1_question">
                  <div class="para" id="p-2031">Write a program that extracts the last three items in the list <code class="code-inline tex2jax_ignore">sports</code> and assigns it to the variable <code class="code-inline tex2jax_ignore">last</code>. Make sure to write your code so that it works no matter how many items are in the list.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_10_1_editor" data-question_label="" data-codelens="true">sports = ['cricket', 'football', 'volleyball', 'baseball', 'softball', 'track and field', 'curling', 'ping pong', 'hockey']


=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

  def test_output(self):
     self.assertEqual(last, ['curling', 'ping pong', 'hockey'], "Testing that the value of last is the last three items in sports.")
     self.assertTrue(re.search(r'last\s*=\s*\S*3:', self.getEditorText()), "Hardcode check")


myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_10_2">
                <div class="ac_question col-md-12" id="foppff_1_ac8_10_2_question">
                  <div class="para" id="p-2032">Write code that combines the following variables so that the sentence “You are doing a great job, keep it up!” is assigned to the variable <code class="code-inline tex2jax_ignore">message</code>. Do not edit the values assigned to <code class="code-inline tex2jax_ignore">by</code>, <code class="code-inline tex2jax_ignore">az</code>, <code class="code-inline tex2jax_ignore">io</code>, or <code class="code-inline tex2jax_ignore">qy</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_10_2_editor" data-question_label="" data-codelens="true">by = "You are"
az = "doing a great "
io = "job"
qy = "keep it up!"


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def test_output(self):
    self.assertEqual(by, 'You are', "Testing original variables.")
    self.assertEqual(az, 'doing a great ', "Testing original variables.")
    self.assertEqual(io, 'job', "Testing original variables.")
    self.assertEqual(qy, 'keep it up!', "Testing original variables.")
    self.assertEqual(message, 'You are doing a great job, keep it up!', "Testing that the value of message is what was expected.")
    self.assertNotIn("You are doing a great job, keep it up!", self.getEditorText(), "Testing for hardcoding (Don't worry about actual and expected values).")


myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_10_2" data-multipleanswers="false"><div class="para" id="p-2033">What will the output be for the following code?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">ls = ['run', 'world', 'travel', 'lights', 'moon', 'baseball', 'sea']
new = ls[2:4]
print(new)
</code></pre></div><li data-component="answer" id="foppff_1_question8_10_2_opt_a"><div class="para" id="p-2034">[’travel’, ’lights’, ’moon’]</div></li><li data-component="feedback" id="foppff_1_question8_10_2_opt_a"><div class="para" id="p-2035">When we take a slice of something, it includes the item at the first index and excludes the item at the second index.</div></li><li data-component="answer" id="foppff_1_question8_10_2_opt_b"><div class="para" id="p-2036">[’world’, ’travel’, ’lights’]</div></li><li data-component="feedback" id="foppff_1_question8_10_2_opt_b"><div class="para" id="p-2037">When we take a slice of something, it includes the item at the first index and excludes the item at the second index. Additionally, Python is a zero-index based language.</div></li><li data-component="answer" id="foppff_1_question8_10_2_opt_c" data-correct=""><div class="para" id="p-2038">[’travel’, ’lights’]</div></li><li data-component="feedback" id="foppff_1_question8_10_2_opt_c"><div class="para" id="p-2039">Yes, python is a zero-index based language and slices are inclusive of the first index and exclusive of the second.</div></li><li data-component="answer" id="foppff_1_question8_10_2_opt_d"><div class="para" id="p-2040">[’world’, ’travel’]</div></li><li data-component="feedback" id="foppff_1_question8_10_2_opt_d"><div class="para" id="p-2041">Python is a zero-index based language.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_10_3" data-multipleanswers="false"><div class="para" id="p-2042">What is the type of <code class="code-inline tex2jax_ignore">m</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">l = ['w', '7', 0, 9]
m = l[1:2]
</code></pre></div><li data-component="answer" id="foppff_1_question8_10_3_opt_a"><div class="para" id="p-2043">string</div></li><li data-component="feedback" id="foppff_1_question8_10_3_opt_a"><div class="para" id="p-2044">Not quite, is it slicing or accessing an element?</div></li><li data-component="answer" id="foppff_1_question8_10_3_opt_b"><div class="para" id="p-2045">integer</div></li><li data-component="feedback" id="foppff_1_question8_10_3_opt_b"><div class="para" id="p-2046">What is happening in the assignment statement for m?</div></li><li data-component="answer" id="foppff_1_question8_10_3_opt_c"><div class="para" id="p-2047">float</div></li><li data-component="feedback" id="foppff_1_question8_10_3_opt_c"><div class="para" id="p-2048">What is happening in the assignment statement for m?</div></li><li data-component="answer" id="foppff_1_question8_10_3_opt_d" data-correct=""><div class="para" id="p-2049">list</div></li><li data-component="feedback" id="foppff_1_question8_10_3_opt_d"><div class="para" id="p-2050">Yes, a slice returns a list no matter how large the slice.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_10_4" data-multipleanswers="false"><div class="para" id="p-2051">What is the type of <code class="code-inline tex2jax_ignore">m</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">l = ['w', '7', 0, 9]
m = l[1]
</code></pre></div><li data-component="answer" id="foppff_1_question8_10_4_opt_a" data-correct=""><div class="para" id="p-2052">string</div></li><li data-component="feedback" id="foppff_1_question8_10_4_opt_a"><div class="para" id="p-2053">Yes, the quotes around the number mean that this is a string.</div></li><li data-component="answer" id="foppff_1_question8_10_4_opt_b"><div class="para" id="p-2054">integer</div></li><li data-component="feedback" id="foppff_1_question8_10_4_opt_b"><div class="para" id="p-2055">Not quite, look again at what is being extracted.</div></li><li data-component="answer" id="foppff_1_question8_10_4_opt_c"><div class="para" id="p-2056">float</div></li><li data-component="feedback" id="foppff_1_question8_10_4_opt_c"><div class="para" id="p-2057">Not quite, look again at what is being extracted.</div></li><li data-component="answer" id="foppff_1_question8_10_4_opt_d"><div class="para" id="p-2058">list</div></li><li data-component="feedback" id="foppff_1_question8_10_4_opt_d"><div class="para" id="p-2059">Not quite, is it slicing or accessing an element?</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_10_5" data-multipleanswers="false"><div class="para" id="p-2060">What is the type of <code class="code-inline tex2jax_ignore">x</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">b = "My, what a lovely day"
x = b.split(',')
</code></pre></div><li data-component="answer" id="foppff_1_question8_10_5_opt_a"><div class="para" id="p-2061">string</div></li><li data-component="feedback" id="foppff_1_question8_10_5_opt_a"><div class="para" id="p-2062">Not quite; .split() returns a list, each of whose elements is a string.</div></li><li data-component="answer" id="foppff_1_question8_10_5_opt_b"><div class="para" id="p-2063">integer</div></li><li data-component="feedback" id="foppff_1_question8_10_5_opt_b"><div class="para" id="p-2064">Not quite, look again at what types are present and what the result of .split() is.</div></li><li data-component="answer" id="foppff_1_question8_10_5_opt_c"><div class="para" id="p-2065">float</div></li><li data-component="feedback" id="foppff_1_question8_10_5_opt_c"><div class="para" id="p-2066">Not quite, look again at what types are present and what the result of .split() is.</div></li><li data-component="answer" id="foppff_1_question8_10_5_opt_d" data-correct=""><div class="para" id="p-2067">list</div></li><li data-component="feedback" id="foppff_1_question8_10_5_opt_d"><div class="para" id="p-2068">Yes, the .split() method returns a list.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question8_10_6" data-multipleanswers="false"><div class="para" id="p-2069">What is the type of <code class="code-inline tex2jax_ignore">a</code>?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">b = "My, what a lovely day"
x = b.split(',')
z = "".join(x)
y = z.split()
a = "".join(y)
</code></pre></div><li data-component="answer" id="foppff_1_question8_10_6_opt_a" data-correct=""><div class="para" id="p-2070">string</div></li><li data-component="feedback" id="foppff_1_question8_10_6_opt_a"><div class="para" id="p-2071">Yes, the string is split into a list, then joined back into a string, then split again, and finally joined back into a string.</div></li><li data-component="answer" id="foppff_1_question8_10_6_opt_b"><div class="para" id="p-2072">integer</div></li><li data-component="feedback" id="foppff_1_question8_10_6_opt_b"><div class="para" id="p-2073">Not quite, look again at what types are present and what the result of .split() is.</div></li><li data-component="answer" id="foppff_1_question8_10_6_opt_c"><div class="para" id="p-2074">float</div></li><li data-component="feedback" id="foppff_1_question8_10_6_opt_c"><div class="para" id="p-2075">Not quite, look again at what types are present and what the result of .split() is.</div></li><li data-component="answer" id="foppff_1_question8_10_6_opt_d"><div class="para" id="p-2076">list</div></li><li data-component="feedback" id="foppff_1_question8_10_6_opt_d"><div class="para" id="p-2077">Not quite, think about what .split() and .join() return.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac8_10_3">
                <div class="ac_question col-md-12" id="foppff_1_ac8_10_3_question">
                  <div class="para" id="p-2078">Write code to determine how many 9’s are in the list <code class="code-inline tex2jax_ignore">nums</code> and assign that value to the variable <code class="code-inline tex2jax_ignore">how_many</code>. Do not use a for loop to do this.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac8_10_3_editor" data-question_label="" data-codelens="true">nums = [4, 2, 23.4, 9, 545, 9, 1, 234.001, 5, 49, 8, 9 , 34, 52, 1, -2, 9.1, 4]


=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

  def test_output(self):
    self.assertEqual(how_many, 3, "Testing that how_many is set correctly.")
    self.assertNotIn('for', self.getEditorText(), "Testing that you didn't use a for loop.")
    self.assertFalse(re.search(r'how_many\s*=\s*3', self.getEditorText()), "Hardcode check")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_assess_ac2_1_1_10">
                <div class="ac_question col-md-12" id="foppff_1_assess_ac2_1_1_10_question">
                  <div class="para" id="p-2079">Write code that uses slicing to get rid of the the second 8 so that here are only two 8’s in the list bound to the variable nums.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_assess_ac2_1_1_10_editor" data-question_label="" data-codelens="true">nums = [4, 2, 8, 23.4, 8, 9, 545, 9, 1, 234.001, 5, 49, 8, 9 , 34, 52, 1, -2, 9.1, 4]


=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

  def test_output(self):
    self.assertEqual(nums, [4, 2, 8, 23.4, 9, 545, 9, 1, 234.001, 5, 49, 8, 9 , 34, 52, 1, -2, 9.1, 4], "Testing that nums is set correctly.")
    self.assertTrue(re.search(r'\s*:', self.getEditorText()), "Testing that you are using slices to remove the second 8 (Don't worry about actual and expected values)")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_access_ac_2_1_1_11">
                <div class="ac_question col-md-12" id="foppff_1_access_ac_2_1_1_11_question">
                  <div class="para" id="p-2080">Assign the last element of <code class="code-inline tex2jax_ignore">lst</code> to the variable <code class="code-inline tex2jax_ignore">end_elem</code>. Do this so that it works no matter how long lst is.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_access_ac_2_1_1_11_editor" data-question_label="" data-codelens="true">lst = ["hi", "goodbye", "python", "106", "506", 91, ['all', 'Paul', 'Jackie', "UMSI", 1, "Stephen", 4.5], 109, "chair", "pizza", "wolverine", 2017, 3.92, 1817, "account", "readings", "papers", 12, "facebook", "twitter", 193.2, "snapchat", "leaders and the best", "social", "1986", 9, 29, "holiday", ["women", "olympics", "gold", "rio", 21, "2016", "men"], "26trombones"]

=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(end_elem, lst[-1], "Testing that end_elem has the correct element assigned.")
      self.assertFalse(re.search(r'end_elem\s*=\s*\S26trombones\S', self.getEditorText()), "Hardcoding Check (Don't worry about actual and expected values)")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_access_ac_2_1_1_12">
                <div class="ac_question col-md-12" id="foppff_1_access_ac_2_1_1_12_question">
                  <div class="para" id="p-2081">Assign the number of elements in <code class="code-inline tex2jax_ignore">lst</code> to the variable <code class="code-inline tex2jax_ignore">num_lst</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_access_ac_2_1_1_12_editor" data-question_label="" data-codelens="true">lst = ["hi", "goodbye", "python", "106", "506", 91, ['all', 'Paul', 'Jackie', "UMSI", 1, "Stephen", 4.5], 109, "chair", "pizza", "wolverine", 2017, 3.92, 1817, "account", "readings", "papers", 12, "facebook", "twitter", 193.2, "snapchat", "leaders and the best", "social", "1986", 9, 29, "holiday", ["women", "olympics", "gold", "rio", 21, "2016", "men"], "26trombones"]

=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_lst, 30, "Testing that num_lst has the correct length assigned.")
      self.assertFalse(re.search(r'num_lst\s*=\s*30', self.getEditorText()), "Hardcoding Check (Don't worry about actual and expected values)")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 8.10.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_assess_ac_2_1_1_13">
                <div class="ac_question col-md-12" id="foppff_1_assess_ac_2_1_1_13_question">
                  <div class="para" id="p-2082">Create a variable called <code class="code-inline tex2jax_ignore">wrds</code> and assign to it a list whose elements are the words in the string <code class="code-inline tex2jax_ignore">sent</code>. Do not worry about punctuation.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_assess_ac_2_1_1_13_editor" data-question_label="" data-codelens="true">sent = "The bicentennial for our university was in 2017"

=====

from unittest.gui import TestCaseGui
import re

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(wrds, sent.split(), "Testing that wrds has been correctly assigned.")
      self.assertFalse(re.search(r'wrds\s*=\s*\S*The\S', self.getEditorText()), "Hardcoding Check (Don't worry about actual and expected values)")


myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-9</id>
    <title>Transforming Sequences</title>
    <subchapter>
      <id>transforming-sequences_introduction-transforming-sequences</id>
      <title>Introduction: Transforming Sequences</title>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_mutability</id>
      <title>Mutability</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_2_1_editor" data-question_label="" data-codelens="true">fruit = ["banana", "apple", "cherry"]
print(fruit)

fruit[0] = "pear"
fruit[-1] = "orange"
print(fruit)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens9_2_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens9_2_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_2_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_2_2_editor" data-question_label="" data-codelens="true">alist = ['a', 'b', 'c', 'd', 'e', 'f']
alist[1:3] = ['x', 'y']
print(alist)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_2_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_2_3_editor" data-question_label="" data-codelens="true">alist = ['a', 'b', 'c', 'd', 'e', 'f']
alist[1:3] = []
print(alist)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_2_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_2_4_editor" data-question_label="" data-codelens="true">alist = ['a', 'd', 'f']
alist[1:1] = ['b', 'c']
print(alist)
alist[4:4] = ['e']
print(alist)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_2_5">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_2_5_editor" data-question_label="" data-codelens="true">greeting = "Hello, world!"
greeting[0] = 'J'            # ERROR!
print(greeting)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_2_6">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_2_6_editor" data-question_label="" data-codelens="true">greeting = "Hello, world!"
newGreeting = 'J' + greeting[1:]
print(newGreeting)
print(greeting)          # same as it was
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_2_7">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_2_7_editor" data-question_label="" data-codelens="true">phrase = "many moons"
phrase_expanded = phrase + " and many stars"
phrase_larger = phrase_expanded + " litter"
phrase_complete = "M" + phrase_larger[1:] + " the night sky."
excited_phrase_complete = phrase_complete[:-1] + "!"
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_2_1" data-multipleanswers="false"><div class="para" id="p-2116">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [4,2,8,6,5]
alist[2] = True
print(alist)
</code></pre></div><li data-component="answer" id="foppff_1_question9_2_1_opt_a"><div class="para" id="p-2117">[4,2,True,8,6,5]</div></li><li data-component="feedback" id="foppff_1_question9_2_1_opt_a"><div class="para" id="p-2118">Item assignment does not insert the new item into the list.</div></li><li data-component="answer" id="foppff_1_question9_2_1_opt_b" data-correct=""><div class="para" id="p-2119">[4,2,True,6,5]</div></li><li data-component="feedback" id="foppff_1_question9_2_1_opt_b"><div class="para" id="p-2120">Yes, the value True is placed in the list at index 2. It replaces 8.</div></li><li data-component="answer" id="foppff_1_question9_2_1_opt_c"><div class="para" id="p-2121">Error, it is illegal to assign</div></li><li data-component="feedback" id="foppff_1_question9_2_1_opt_c"><div class="para" id="p-2122">Item assignment is allowed with lists. Lists are mutable.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_2_2" data-multipleanswers="false"><div class="para" id="p-2123">What is printed by the following statements:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">s = "Ball"
s[0] = "C"
print(s)
</code></pre></div><li data-component="answer" id="foppff_1_question9_2_2_opt_a"><div class="para" id="p-2124">Ball</div></li><li data-component="feedback" id="foppff_1_question9_2_2_opt_a"><div class="para" id="p-2125">Assignment is not allowed with strings.</div></li><li data-component="answer" id="foppff_1_question9_2_2_opt_b"><div class="para" id="p-2126">Call</div></li><li data-component="feedback" id="foppff_1_question9_2_2_opt_b"><div class="para" id="p-2127">Assignment is not allowed with strings.</div></li><li data-component="answer" id="foppff_1_question9_2_2_opt_c" data-correct=""><div class="para" id="p-2128">Error</div></li><li data-component="feedback" id="foppff_1_question9_2_2_opt_c"><div class="para" id="p-2129">Yes, strings are immutable.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_list-element-deletion</id>
      <title>List Element Deletion</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_3_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_3_1_editor" data-question_label="" data-codelens="true">a = ['one', 'two', 'three']
del a[1]
print(a)

alist = ['a', 'b', 'c', 'd', 'e', 'f']
del alist[1:5]
print(alist)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_objects-and-references</id>
      <title>Objects and References</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_4_1_editor" data-question_label="" data-codelens="true">a = "banana"
b = "banana"

print(a is b)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_4_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_4_2_editor" data-question_label="" data-codelens="true">a = "banana"
b = "banana"

print(id(a))
print(id(b))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_4_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_4_3_editor" data-question_label="" data-codelens="true">a = [81,82,83]
b = [81,82,83]

print(a is b)

print(a == b)

print(id(a))
print(id(b))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_aliasing</id>
      <title>Aliasing</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_5_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_5_1_editor" data-question_label="" data-codelens="true">a = [81, 82, 83]
b = a
print(a is b)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_5_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_5_2_editor" data-question_label="" data-codelens="true">a = [81,82,83]
b = [81,82,83]
print(a is b)

b = a
print(a == b)
print(a is b)

b[0] = 5
print(a)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.5.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_5_1" data-multipleanswers="false"><div class="para" id="p-2148">What is the value of y after the following code has been evaluated:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">w = ['Jamboree', 'get-together', 'party']
y = ['celebration']
y = w
</code></pre></div><li data-component="answer" id="foppff_1_question9_5_1_opt_a" data-correct=""><div class="para" id="p-2149">[’Jamboree’, ’get-together’, ’party’]</div></li><li data-component="feedback" id="foppff_1_question9_5_1_opt_a"><div class="para" id="p-2150">Yes, the value of y has been reassigned to the value of w.</div></li><li data-component="answer" id="foppff_1_question9_5_1_opt_b"><div class="para" id="p-2151">[’celebration’]</div></li><li data-component="feedback" id="foppff_1_question9_5_1_opt_b"><div class="para" id="p-2152">No, that was the inital value of y, but y has changed.</div></li><li data-component="answer" id="foppff_1_question9_5_1_opt_c"><div class="para" id="p-2153">[’celebration’, ’Jamboree’, ’get-together’, ’party’]</div></li><li data-component="feedback" id="foppff_1_question9_5_1_opt_c"><div class="para" id="p-2154">No, when we assign a list to another list it does not concatenate the lists together.</div></li><li data-component="answer" id="foppff_1_question9_5_1_opt_d"><div class="para" id="p-2155">[’Jamboree’, ’get-together’, ’party’, ’celebration’]</div></li><li data-component="feedback" id="foppff_1_question9_5_1_opt_d"><div class="para" id="p-2156">No, when we assign a list to another list it does not concatenate the lists together.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_5_2" data-multipleanswers="false"><div class="para" id="p-2157">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [4,2,8,6,5]
blist = alist
blist[3] = 999
print(alist)
</code></pre></div><li data-component="answer" id="foppff_1_question9_5_2_opt_a"><div class="para" id="p-2158">[4,2,8,6,5]</div></li><li data-component="feedback" id="foppff_1_question9_5_2_opt_a"><div class="para" id="p-2159">blist is not a copy of alist, it is a reference to the list alist refers to.</div></li><li data-component="answer" id="foppff_1_question9_5_2_opt_b" data-correct=""><div class="para" id="p-2160">[4,2,8,999,5]</div></li><li data-component="feedback" id="foppff_1_question9_5_2_opt_b"><div class="para" id="p-2161">Yes, since alist and blist both reference the same list, changes to one also change the other.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_cloning-lists</id>
      <title>Cloning Lists</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_clens9_6_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_clens9_6_1_editor" data-question_label="" data-codelens="true">a = [81,82,83]

b = a[:]       # make a clone using slice
print(a == b)
print(a is b)

b[0] = 5

print(a)
print(b)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.6.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_6_1" data-multipleanswers="false"><div class="para" id="p-2167">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [4,2,8,6,5]
blist = alist * 2
blist[3] = 999
print(alist)
</code></pre></div><li data-component="answer" id="foppff_1_question9_6_1_opt_a"><div class="para" id="p-2168">[4,2,8,999,5,4,2,8,6,5]</div></li><li data-component="feedback" id="foppff_1_question9_6_1_opt_a"><div class="para" id="p-2169">print alist not print blist</div></li><li data-component="answer" id="foppff_1_question9_6_1_opt_b"><div class="para" id="p-2170">[4,2,8,999,5]</div></li><li data-component="feedback" id="foppff_1_question9_6_1_opt_b"><div class="para" id="p-2171">blist is changed, not alist.</div></li><li data-component="answer" id="foppff_1_question9_6_1_opt_c" data-correct=""><div class="para" id="p-2172">[4,2,8,6,5]</div></li><li data-component="feedback" id="foppff_1_question9_6_1_opt_c"><div class="para" id="p-2173">Yes, alist was unchanged by the assignment statement. blist was a copy of the references in alist.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_mutating-methods</id>
      <title>Mutating Methods</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_7_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_7_1_editor" data-question_label="" data-codelens="true">mylist = []
mylist.append(5)
mylist.append(27)
mylist.append(3)
mylist.append(12)
print(mylist)

mylist.insert(1, 12)
print(mylist)
print(mylist.count(12))

print(mylist.index(3))
print(mylist.count(5))

mylist.reverse()
print(mylist)

mylist.sort()
print(mylist)

mylist.remove(5)
print(mylist)

lastitem = mylist.pop()
print(lastitem)
print(mylist)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_7_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_7_2_editor" data-question_label="" data-codelens="true">mylist = []
mylist.append(5)
mylist.append(27)
mylist.append(3)
mylist.append(12)
print(mylist)

mylist = mylist.sort()   #probably an error
print(mylist)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_7_1" data-multipleanswers="false"><div class="para" id="p-2183">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [4,2,8,6,5]
alist.append(True)
alist.append(False)
print(alist)
</code></pre></div><li data-component="answer" id="foppff_1_question9_7_1_opt_a"><div class="para" id="p-2184">[4,2,8,6,5,False,True]</div></li><li data-component="feedback" id="foppff_1_question9_7_1_opt_a"><div class="para" id="p-2185">True was added first, then False was added last.</div></li><li data-component="answer" id="foppff_1_question9_7_1_opt_b" data-correct=""><div class="para" id="p-2186">[4,2,8,6,5,True,False]</div></li><li data-component="feedback" id="foppff_1_question9_7_1_opt_b"><div class="para" id="p-2187">Yes, each item is added to the end of the list.</div></li><li data-component="answer" id="foppff_1_question9_7_1_opt_c"><div class="para" id="p-2188">[True,False,4,2,8,6,5]</div></li><li data-component="feedback" id="foppff_1_question9_7_1_opt_c"><div class="para" id="p-2189">append adds at the end, not the beginning.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_append-versus-concatenate</id>
      <title>Append versus Concatenate</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_clens9_8_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_clens9_8_1_editor" data-question_label="" data-codelens="true">origlist = [45,32,88]

origlist.append("cat")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens9_8_2" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens9_8_2.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens9_8_3" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens9_8_3.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_8_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_8_1_editor" data-question_label="" data-codelens="true">origlist = [45,32,88]
print("origlist:", origlist)
print("the identifier:", id(origlist))             #id of the list before changes
newlist = origlist + ['cat']
print("newlist:", newlist)
print("the identifier:", id(newlist))              #id of the list after concatentation
origlist.append('cat')
print("origlist:", origlist)
print("the identifier:", id(origlist))             #id of the list after append is used
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens9_8_4" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens9_8_4.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_8_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_8_2_editor" data-question_label="" data-codelens="true">st = "Warmth"
a = []
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_8_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_8_3_editor" data-question_label="" data-codelens="true">st = "Warmth"
a = []
b = a + [st[0]]
c = b + [st[1]]
d = c + [st[2]]
e = d + [st[3]]
f = e + [st[4]]
g = f + [st[5]]
print(g)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_8_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_8_4_editor" data-question_label="" data-codelens="true">st = "Warmth"
a = []
a.append(st[0])
a.append(st[1])
a.append(st[2])
a.append(st[3])
a.append(st[4])
a.append(st[5])
print(a)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.8.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_8_1" data-multipleanswers="false"><div class="para" id="p-2202">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [4,2,8,6,5]
alist = alist + 999
print(alist)
</code></pre></div><li data-component="answer" id="foppff_1_question9_8_1_opt_a"><div class="para" id="p-2203">[4,2,8,6,5,999]</div></li><li data-component="feedback" id="foppff_1_question9_8_1_opt_a"><div class="para" id="p-2204">You cannot concatenate a list with an integer.</div></li><li data-component="answer" id="foppff_1_question9_8_1_opt_b" data-correct=""><div class="para" id="p-2205">Error, you cannot concatenate a list with an integer.</div></li><li data-component="feedback" id="foppff_1_question9_8_1_opt_b"><div class="para" id="p-2206">Yes, in order to perform concatenation you would need to write alist+[999].  You must have two lists.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_non-mutating-methods-on-strings</id>
      <title>Non-mutating Methods on Strings</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_1_editor" data-question_label="" data-codelens="true">ss = "Hello, World"
print(ss.upper())

tt = ss.lower()
print(tt)
print(ss)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_2_editor" data-question_label="" data-codelens="true">ss = " Hello, World "

els = ss.count("l")
print(els)

print("***"+ss.strip()+"***")

news = ss.replace("o", "***")
print(news)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_3_editor" data-question_label="" data-codelens="true">food = "banana bread"
print(food.upper())
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.9.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_9_1" data-multipleanswers="false"><div class="para" id="p-2212">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">s = "python rocks"
print(s.count("o") + s.count("p"))
</code></pre></div><li data-component="answer" id="foppff_1_question9_9_1_opt_a"><div class="para" id="p-2213">0</div></li><li data-component="feedback" id="foppff_1_question9_9_1_opt_a"><div class="para" id="p-2214">There are definitely o and p characters.</div></li><li data-component="answer" id="foppff_1_question9_9_1_opt_b"><div class="para" id="p-2215">2</div></li><li data-component="feedback" id="foppff_1_question9_9_1_opt_b"><div class="para" id="p-2216">There are 2 o characters but what about p?</div></li><li data-component="answer" id="foppff_1_question9_9_1_opt_c" data-correct=""><div class="para" id="p-2217">3</div></li><li data-component="feedback" id="foppff_1_question9_9_1_opt_c"><div class="para" id="p-2218">Yes, add the number of o characters and the number of p characters.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.9.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_9_2" data-multipleanswers="false"><div class="para" id="p-2219">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">s = "python rocks"
print(s[1]*s.index("n"))
</code></pre></div><li data-component="answer" id="foppff_1_question9_9_2_opt_a" data-correct=""><div class="para" id="p-2220">yyyyy</div></li><li data-component="feedback" id="foppff_1_question9_9_2_opt_a"><div class="para" id="p-2221">Yes, s[1] is y and the index of n is 5, so 5 y characters. It is important to realize that the index method has precedence over the repetition operator. Repetition is done last.</div></li><li data-component="answer" id="foppff_1_question9_9_2_opt_b"><div class="para" id="p-2222">55555</div></li><li data-component="feedback" id="foppff_1_question9_9_2_opt_b"><div class="para" id="p-2223">Close. 5 is not repeated, it is the number of times to repeat.</div></li><li data-component="answer" id="foppff_1_question9_9_2_opt_c"><div class="para" id="p-2224">n</div></li><li data-component="feedback" id="foppff_1_question9_9_2_opt_c"><div class="para" id="p-2225">This expression uses the index of n</div></li><li data-component="answer" id="foppff_1_question9_9_2_opt_d"><div class="para" id="p-2226">Error, you cannot combine all those things together.</div></li><li data-component="feedback" id="foppff_1_question9_9_2_opt_d"><div class="para" id="p-2227">This is fine, the repetition operator used the result of indexing and the index method.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_4_editor" data-question_label="" data-codelens="true">name = "Rodney Dangerfield"
score = -1 # No respect!
print("Hello " + name + ". Your score is " + str(score))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_5">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_5_editor" data-question_label="" data-codelens="true">scores = [("Rodney Dangerfield", -1), ("Marlon Brando", 1), ("You", 100)]
for person in scores:
  name = person[0]
  score = person[1]
  print("Hello " + name + ". Your score is " + str(score))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_6">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_6_editor" data-question_label="" data-codelens="true">scores = [("Rodney Dangerfield", -1), ("Marlon Brando", 1), ("You", 100)]
for person in scores:
  name = person[0]
  score = person[1]
  print(f"Hello {name}. Your score is {score}.")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_7">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_7_editor" data-question_label="" data-codelens="true">person = input('Your name: ')
greeting = f"Hello {person}!"
print(greeting)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_8">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_8_editor" data-question_label="" data-codelens="true">person = input('Enter your name: ')
print(f'Hello {person}!')
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_9">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_9_editor" data-question_label="" data-codelens="true">origPrice = float(input('Enter the original price: $'))
discount = float(input('Enter discount percentage: '))
newPrice = (1 - discount/100)*origPrice
calculation = f'${origPrice} discounted by {discount}% is ${newPrice}.'
print(calculation)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_9_10">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_9_10_editor" data-question_label="" data-codelens="true">origPrice = float(input('Enter the original price: $'))
discount = float(input('Enter discount percentage: '))
newPrice = (1 - discount/100)*origPrice
calculation = f'${origPrice:.2f} discounted by {discount}% is ${newPrice:.2f}.'
print(calculation)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.9.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_9_3" data-multipleanswers="false"><div class="para" id="p-2245">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">x = 2
y = 6
print('sum of {x} and {y} is {x+y}; product: {x*y}.')
</code></pre></div><li data-component="answer" id="foppff_1_question9_9_3_opt_a"><div class="para" id="p-2246">Nothing - it causes an error</div></li><li data-component="feedback" id="foppff_1_question9_9_3_opt_a"><div class="para" id="p-2247">It is legal format syntax: put the data in place of the braces.</div></li><li data-component="answer" id="foppff_1_question9_9_3_opt_b"><div class="para" id="p-2248">sum of {x} and {y} is {x+y}; product: {x*y}.</div></li><li data-component="feedback" id="foppff_1_question9_9_3_opt_b"><div class="para" id="p-2249">The outpput will be the data stored in the variables, not the variables themselves.</div></li><li data-component="answer" id="foppff_1_question9_9_3_opt_c" data-correct=""><div class="para" id="p-2250">sum of 2 and 6 is 8; product: 12.</div></li><li data-component="feedback" id="foppff_1_question9_9_3_opt_c"><div class="para" id="p-2251">Yes, correct substitutions!</div></li><li data-component="answer" id="foppff_1_question9_9_3_opt_d"><div class="para" id="p-2252">sum of {2} and {6} is {8}; product: {12}.</div></li><li data-component="feedback" id="foppff_1_question9_9_3_opt_d"><div class="para" id="p-2253">The braces do not appear in the final fstring.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.9.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_9_4" data-multipleanswers="false"><div class="para" id="p-2254">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">v = 2.34567
print('{v:.1f} {v:.2f} {v:.7f}')
</code></pre></div><li data-component="answer" id="foppff_1_question9_9_4_opt_a"><div class="para" id="p-2255">2.34567 2.34567 2.34567</div></li><li data-component="feedback" id="foppff_1_question9_9_4_opt_a"><div class="para" id="p-2256">The numbers before the f in the braces give the number of digits to display after the decimal point.</div></li><li data-component="answer" id="foppff_1_question9_9_4_opt_b"><div class="para" id="p-2257">2.3 2.34 2.34567</div></li><li data-component="feedback" id="foppff_1_question9_9_4_opt_b"><div class="para" id="p-2258">Close, but round to the number of digits and display the full number of digits specified.</div></li><li data-component="answer" id="foppff_1_question9_9_4_opt_c" data-correct=""><div class="para" id="p-2259">2.3 2.35 2.3456700</div></li><li data-component="feedback" id="foppff_1_question9_9_4_opt_c"><div class="para" id="p-2260">Yes, correct number of digits with rounding!</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_the-accumulator-pattern-with-lists</id>
      <title>The Accumulator Pattern with Lists</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_10_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_10_1_editor" data-question_label="" data-codelens="true">nums = [3, 5, 8]
accum = []
for w in nums:
    x = w**2
    accum.append(x)
print(accum)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.10.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_10_1" data-multipleanswers="false"><div class="para" id="p-2268">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">alist = [4,2,8,6,5]
blist = [ ]
for item in alist:
   blist.append(item+5)
print(blist)
</code></pre></div><li data-component="answer" id="foppff_1_question9_10_1_opt_a"><div class="para" id="p-2269">[4,2,8,6,5]</div></li><li data-component="feedback" id="foppff_1_question9_10_1_opt_a"><div class="para" id="p-2270">5 is added to each item before the append is performed.</div></li><li data-component="answer" id="foppff_1_question9_10_1_opt_b"><div class="para" id="p-2271">[4,2,8,6,5,5]</div></li><li data-component="feedback" id="foppff_1_question9_10_1_opt_b"><div class="para" id="p-2272">There are too many items in this list. Only 5 append operations are performed.</div></li><li data-component="answer" id="foppff_1_question9_10_1_opt_c" data-correct=""><div class="para" id="p-2273">[9,7,13,11,10]</div></li><li data-component="feedback" id="foppff_1_question9_10_1_opt_c"><div class="para" id="p-2274">Yes, the for loop processes each item of the list. 5 is added before it is appended to blist.</div></li><li data-component="answer" id="foppff_1_question9_10_1_opt_d"><div class="para" id="p-2275">Error, you cannot concatenate inside an append.</div></li><li data-component="feedback" id="foppff_1_question9_10_1_opt_d"><div class="para" id="p-2276">5 is added to each item before the append operation is performed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.10.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_10_2" data-multipleanswers="false"><div class="para" id="p-2277">What is printed by the following statements?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">lst= [3,0,9,4,1,7]
new_list=[]
for i in range(len(lst)):
   new_list.append(lst[i]+5)
print(new_list)
</code></pre></div><li data-component="answer" id="foppff_1_question9_10_2_opt_a"><div class="para" id="p-2278">[8,5,14,9,6]</div></li><li data-component="feedback" id="foppff_1_question9_10_2_opt_a"><div class="para" id="p-2279">Don’t forget the last item!</div></li><li data-component="answer" id="foppff_1_question9_10_2_opt_b" data-correct=""><div class="para" id="p-2280">[8,5,14,9,6,12]</div></li><li data-component="feedback" id="foppff_1_question9_10_2_opt_b"><div class="para" id="p-2281">Yes, the for loop processes each item in lst. 5 is added before lst[i] is appended to new_list.</div></li><li data-component="answer" id="foppff_1_question9_10_2_opt_c"><div class="para" id="p-2282">[3,0,9,4,1,7,5]</div></li><li data-component="feedback" id="foppff_1_question9_10_2_opt_c"><div class="para" id="p-2283">5 is added to each item before the append operation is performed.</div></li><li data-component="answer" id="foppff_1_question9_10_2_opt_d"><div class="para" id="p-2284">Error, you cannot concatenate inside an append.</div></li><li data-component="feedback" id="foppff_1_question9_10_2_opt_d"><div class="para" id="p-2285">It is OK to have a complex expression inside the call to the append method. The expression `lst[i]+5` is fully evaluated before the append operation is performed.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.10.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_10_2">
                <div class="ac_question col-md-12" id="foppff_1_ac9_10_2_question">
                  <div class="para logical" id="p-2286">
                    <ol class="decimal">
                      <li id="li-281">
                        <div class="para" id="p-2287">For each word in the list <code class="code-inline tex2jax_ignore">verbs</code>, add an -ing ending. Save this new list in a new list, <code class="code-inline tex2jax_ignore">ing</code>.</div>
                      </li>
                    </ol>
                  </div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_10_2_editor" data-question_label="" data-codelens="true">verbs = ["kayak", "cry", "walk", "eat", "drink", "fly"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testSix(self):
      self.assertEqual(ing, ['kayaking', 'crying', 'walking', 'eating', 'drinking', 'flying'], "Testing that the variable ing has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.10.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_10_3">
                <div class="ac_question col-md-12" id="foppff_1_ac9_10_3_question">
                  <div class="para" id="p-2288">Given the list of numbers, <code class="code-inline tex2jax_ignore">numbs</code>, create a new list of those same numbers increased by 5. Save this new list to the variable <code class="code-inline tex2jax_ignore">newlist</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_10_3_editor" data-question_label="" data-codelens="true">numbs = [5, 10, 15, 20, 25]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFour(self):
      self.assertEqual(newlist, [10, 15, 20, 25, 30], "Testing that the newlist value contains the correct elements.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.10.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_10_4">
                <div class="ac_question col-md-12" id="foppff_1_ac9_10_4_question">
                  <div class="para" id="p-2289">Given the list of numbers, <code class="code-inline tex2jax_ignore">numbs</code>, modifiy the list <code class="code-inline tex2jax_ignore">numbs</code> so that each of the original numbers are increased by 5.  Note this is not an accumulator pattern problem, but its a good review.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_10_4_editor" data-question_label="" data-codelens="true">numbs = [5, 10, 15, 20, 25]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFive(self):
      self.assertEqual(numbs, [10, 15, 20, 25, 30], "Testing that numbs is assigned to correct values.")
      self.assertNotIn("append", self.getEditorText(), "Do not use append")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.10.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_10_5">
                <div class="ac_question col-md-12" id="foppff_1_ac9_10_5_question">
                  <div class="para" id="p-2290">For each number in <code class="code-inline tex2jax_ignore">lst_nums</code>, multiply that number by 2 and append it to a new list called <code class="code-inline tex2jax_ignore">larger_nums</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_10_5_editor" data-question_label="" data-codelens="true">lst_nums = [4, 29, 5.3, 10, 2, 1817, 1967, 9, 31.32]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(larger_nums, [8, 58, 10.6, 20, 4, 3634, 3934, 18, 62.64], "Testing that larger_nums has been created correctly." )

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_the-accumulator-pattern-with-strings</id>
      <title>The Accumulator Pattern with Strings</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_11_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_11_1_editor" data-question_label="" data-codelens="true">s = input("Enter some text")
ac = ""
for c in s:
    ac = ac + c + "-" + c + "-"

print(ac)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.11.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_11_1" data-multipleanswers="false"><div class="para" id="p-2295">What is printed by the following statements:</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">s = "ball"
r = ""
for item in s:
   r = item.upper() + r
print(r)
</code></pre></div><li data-component="answer" id="foppff_1_question9_11_1_opt_a"><div class="para" id="p-2296">Ball</div></li><li data-component="feedback" id="foppff_1_question9_11_1_opt_a"><div class="para" id="p-2297">Each item is converted to upper case before concatenation.</div></li><li data-component="answer" id="foppff_1_question9_11_1_opt_b"><div class="para" id="p-2298">BALL</div></li><li data-component="feedback" id="foppff_1_question9_11_1_opt_b"><div class="para" id="p-2299">Each character is converted to upper case but the order is wrong.</div></li><li data-component="answer" id="foppff_1_question9_11_1_opt_c" data-correct=""><div class="para" id="p-2300">LLAB</div></li><li data-component="feedback" id="foppff_1_question9_11_1_opt_c"><div class="para" id="p-2301">Yes, the order is reversed due to the order of the concatenation.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.11.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_11_2">
                <div class="ac_question col-md-12" id="foppff_1_ac9_11_2_question">
                  <div class="para logical" id="p-2302">
                    <ol class="decimal">
                      <li id="li-282">
                        <div class="para" id="p-2303">For each character in the string already saved in the variable <code class="code-inline tex2jax_ignore">str1</code>, add each character to a list called <code class="code-inline tex2jax_ignore">chars</code>.</div>
                      </li>
                    </ol>
                  </div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_11_2_editor" data-question_label="" data-codelens="true">str1 = "I love python"
# HINT: what's the accumulator? That should go here.

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwo(self):
      self.assertEqual(chars, ['I', ' ', 'l', 'o', 'v', 'e', ' ', 'p', 'y', 't', 'h', 'o', 'n'], "Testing that chars is assigned to correct values.")
      self.assertIn('append', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.11.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_11_6">
                <div class="ac_question col-md-12" id="foppff_1_ac9_11_6_question">
                  <div class="para" id="p-2304">Assign an empty string to the variable <code class="code-inline tex2jax_ignore">output</code>. Using the <code class="code-inline tex2jax_ignore">range</code> function, write code to make it so that the variable <code class="code-inline tex2jax_ignore">output</code> has 35 <code class="code-inline tex2jax_ignore">a</code> s inside it (like <code class="code-inline tex2jax_ignore">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</code>). Hint: use the accumulation pattern!</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_11_6_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testThree(self):
      self.assertEqual(output, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "Testing that output has the correct value.")
      self.assertNotIn("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_accumulator-pattern-strategies</id>
      <title>Accumulator Pattern Strategies</title>
      <question>
        <label>Checkpoint 9.12.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_1" data-multipleanswers="false">
                <div class="para" id="p-2317">Does the following prompt require an accumulation pattern? If so, what words indicate that? For each string in <code class="code-inline tex2jax_ignore">wrds</code>, add ‘ed’ to the end of the word (to make the word past tense). Save these past tense words to a list called <code class="code-inline tex2jax_ignore">past_wrds</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_1_opt_a" data-correct="">
                  <div class="para" id="p-2318">Yes; "save... to a list"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_1_opt_a">
                  <div class="para" id="p-2319">Correct!</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_1_opt_b">
                  <div class="para" id="p-2320">Yes; "add ’ed’ to the end of the word"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_1_opt_b">
                  <div class="para" id="p-2321">Not quite - these words don’t necessarily mean that we want to accumulate the new strings into a new variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_1_opt_c">
                  <div class="para" id="p-2322">No</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_1_opt_c">
                  <div class="para" id="p-2323">In this case, an accumulation pattern would be good to use!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_2" data-multipleanswers="false">
                <div class="para" id="p-2324">Does the following prompt require an accumulation pattern? If so, what words indicate that? Write code to sum up all of the numbers in the list <code class="code-inline tex2jax_ignore">seat_counts</code>. Store that number in the variable <code class="code-inline tex2jax_ignore">total_seat_counts</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_2_opt_a" data-correct="">
                  <div class="para" id="p-2325">Yes; "to sum up"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_2_opt_a">
                  <div class="para" id="p-2326">Correct!</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_2_opt_b">
                  <div class="para" id="p-2327">Yes; "numbers in the list"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_2_opt_b">
                  <div class="para" id="p-2328">Not quite - these words don’t necessarily mean that we want to do sum accumulation.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_2_opt_c">
                  <div class="para" id="p-2329">No</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_2_opt_c">
                  <div class="para" id="p-2330">In this case, an accumulation pattern would be good to use!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_3" data-multipleanswers="false">
                <div class="para" id="p-2331">Does the following prompt require an accumulation pattern? If so, what words indicate that? Write code to print out each character of the string <code class="code-inline tex2jax_ignore">my_str</code> on a separate line.</div>
                <li data-component="answer" id="foppff_1_question9_12_3_opt_a">
                  <div class="para" id="p-2332">Yes; "print out each"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_3_opt_a">
                  <div class="para" id="p-2333">Incorrect, this prompt does not need to use the accumulation pattern.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_3_opt_b">
                  <div class="para" id="p-2334">Yes; "on a separate line"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_3_opt_b">
                  <div class="para" id="p-2335">Incorrect, this prompt does not need to use the accumulation pattern.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_3_opt_c" data-correct="">
                  <div class="para" id="p-2336">No</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_3_opt_c">
                  <div class="para" id="p-2337">Correct!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_4" data-multipleanswers="false">
                <div class="para" id="p-2338">Does the following prompt require an accumulation pattern? If so, what words indicate that? Write code that will count the number of vowels in the sentence <code class="code-inline tex2jax_ignore">s</code> and assign the result to the variable <code class="code-inline tex2jax_ignore">num_vowels</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_4_opt_a">
                  <div class="para" id="p-2339">Yes; "vowels in the sentence"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_4_opt_a">
                  <div class="para" id="p-2340">Not quite - these words don’t necessarily mean that we want to do sum accumulation.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_4_opt_b" data-correct="">
                  <div class="para" id="p-2341">Yes; "code that will count"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_4_opt_b">
                  <div class="para" id="p-2342">Correct!</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_4_opt_c">
                  <div class="para" id="p-2343">No</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_4_opt_c">
                  <div class="para" id="p-2344">In this case, an accumulation pattern would be good to use!</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_5" data-multipleanswers="false">
                <div class="para" id="p-2345">What type should be used for the accumulator variable in the following prompt? Write code that will count the number of vowels in the sentence <code class="code-inline tex2jax_ignore">s</code> and assign the result to the variable <code class="code-inline tex2jax_ignore">num_vowels</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_5_opt_a">
                  <div class="para" id="p-2346">string</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_5_opt_a">
                  <div class="para" id="p-2347">Incorrect, that is not the best type for the accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_5_opt_b">
                  <div class="para" id="p-2348">list</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_5_opt_b">
                  <div class="para" id="p-2349">Incorrect, that is not the best type for the accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_5_opt_c" data-correct="">
                  <div class="para" id="p-2350">integer</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_5_opt_c">
                  <div class="para" id="p-2351">Yes, because we want to keep track of a number.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_5_opt_d">
                  <div class="para" id="p-2352">none, there is no accumulator variable.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_5_opt_d">
                  <div class="para" id="p-2353">Incorrect, we will need an accumulator variable.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_6" data-multipleanswers="false">
                <div class="para" id="p-2354">What sequence will you iterate through as you accumulate a result in the following prompt? Write code that will count the number of vowels in the sentence <code class="code-inline tex2jax_ignore">s</code> and assign the result to the variable <code class="code-inline tex2jax_ignore">num_vowels</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_6_opt_a">
                  <div class="para" id="p-2355">num_vowels</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_6_opt_a">
                  <div class="para" id="p-2356">No, that is the accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_6_opt_b" data-correct="">
                  <div class="para" id="p-2357">s</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_6_opt_b">
                  <div class="para" id="p-2358">Yes, that is the sequence you will iterate through!</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_6_opt_c">
                  <div class="para" id="p-2359">the prompt does not say</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_6_opt_c">
                  <div class="para" id="p-2360">It is stated in the prompt.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_7" data-multipleanswers="false">
                <div class="para" id="p-2361">What type should be used for the accumulator variable in the following prompt? For each string in <code class="code-inline tex2jax_ignore">wrds</code>, add ‘ed’ to the end of the word (to make the word past tense). Save these past tense words to a list called <code class="code-inline tex2jax_ignore">past_wrds</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_7_opt_a">
                  <div class="para" id="p-2362">string</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_7_opt_a">
                  <div class="para" id="p-2363">Incorrect, that is not the best type for the accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_7_opt_b" data-correct="">
                  <div class="para" id="p-2364">list</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_7_opt_b">
                  <div class="para" id="p-2365">Yes, because we want a new list at the end of the code.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_7_opt_c">
                  <div class="para" id="p-2366">integer</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_7_opt_c">
                  <div class="para" id="p-2367">Incorrect, that is not the best type for the accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_7_opt_d">
                  <div class="para" id="p-2368">none, there is no accumulator variable.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_7_opt_d">
                  <div class="para" id="p-2369">Incorrect, we will need an accumulator variable.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_8" data-multipleanswers="false">
                <div class="para" id="p-2370">What sequence will you iterate through as you accumulate a result in the following prompt? For each string in <code class="code-inline tex2jax_ignore">wrds</code>, add ‘ed’ to the end of the word (to make the word past tense). Save these past tense words to a list called <code class="code-inline tex2jax_ignore">past_wrds</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_8_opt_a" data-correct="">
                  <div class="para" id="p-2371">wrds</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_8_opt_a">
                  <div class="para" id="p-2372">Yes, that is the sequence you will iterate through!</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_8_opt_b">
                  <div class="para" id="p-2373">past_wrds</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_8_opt_b">
                  <div class="para" id="p-2374">No, that is the accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_8_opt_c">
                  <div class="para" id="p-2375">the prompt does not say</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_8_opt_c">
                  <div class="para" id="p-2376">It is stated in the prompt.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.10 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_9" data-multipleanswers="false">
                <div class="para" id="p-2377">What type should be used for the accumulator variable in the following prompt? Write code to sum up all of the numbers in the list <code class="code-inline tex2jax_ignore">seat_counts</code>. Store that number in the variable <code class="code-inline tex2jax_ignore">total_seat_counts</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_9_opt_a">
                  <div class="para" id="p-2378">string</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_9_opt_a">
                  <div class="para" id="p-2379">Incorrect, that is not the best type for the accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_9_opt_b">
                  <div class="para" id="p-2380">list</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_9_opt_b">
                  <div class="para" id="p-2381">Incorrect, that is not the best type for the accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_9_opt_c" data-correct="">
                  <div class="para" id="p-2382">integer</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_9_opt_c">
                  <div class="para" id="p-2383">Yes, because we want to keep track of a number.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_9_opt_d">
                  <div class="para" id="p-2384">none, there is no accumulator variable.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_9_opt_d">
                  <div class="para" id="p-2385">Incorrect, we will need an accumulator variable.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.11 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_10" data-multipleanswers="false">
                <blockquote class="blockquote" id="blockquote-3">
                  <div class="para" id="p-2386">What sequence will you iterate through as you accumulate a result in the following prompt? Write code to sum up all of the numbers in the list <code class="code-inline tex2jax_ignore">seat_counts</code>. Store that number in the variable <code class="code-inline tex2jax_ignore">total_seat_counts</code>.</div>
                </blockquote>
                <li data-component="answer" id="foppff_1_question9_12_10_opt_a" data-correct="">
                  <div class="para" id="p-2387">seat_counts</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_10_opt_a">
                  <div class="para" id="p-2388">Yes, that is the sequence you will iterate through!</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_10_opt_b">
                  <div class="para" id="p-2389">total_seat_counts</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_10_opt_b">
                  <div class="para" id="p-2390">No, that is the accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_10_opt_c">
                  <div class="para" id="p-2391">the prompt does not say</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_10_opt_c">
                  <div class="para" id="p-2392">It is stated in the prompt.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.12 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_11" data-multipleanswers="false">
                <div class="para" id="p-2393">What type should be used for the accumulator variable in the following prompt? Write code to print out each character of the string <code class="code-inline tex2jax_ignore">my_str</code> on a separate line.</div>
                <li data-component="answer" id="foppff_1_question9_12_11_opt_a">
                  <div class="para" id="p-2394">string</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_11_opt_a">
                  <div class="para" id="p-2395">Incorrect, there should not be an accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_11_opt_b">
                  <div class="para" id="p-2396">list</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_11_opt_b">
                  <div class="para" id="p-2397">Incorrect, there should not be an accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_11_opt_c">
                  <div class="para" id="p-2398">integer</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_11_opt_c">
                  <div class="para" id="p-2399">Incorrect, there should not be an accumulator variable.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_11_opt_d" data-correct="">
                  <div class="para" id="p-2400">none, there is no accumulator variable.</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_11_opt_d">
                  <div class="para" id="p-2401">Correct, because this prompt does not require an accumulator pattern</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.13 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_12" data-multipleanswers="false">
                <div class="para" id="p-2402">What sequence will you iterate through as you accumulate a result in the following prompt? Write code to print out each character of the string <code class="code-inline tex2jax_ignore">my_str</code> on a separate line.</div>
                <li data-component="answer" id="foppff_1_question9_12_12_opt_a" data-correct="">
                  <div class="para" id="p-2403">my_str</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_12_opt_a">
                  <div class="para" id="p-2404">Yes, that is the sequence you will iterate through!</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_12_opt_b">
                  <div class="para" id="p-2405">my_str.split()</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_12_opt_b">
                  <div class="para" id="p-2406">Close, but read the prompt again - did it say to iterate through words?</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_12_opt_c">
                  <div class="para" id="p-2407">the prompt does not say</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_12_opt_c">
                  <div class="para" id="p-2408">It is stated in the prompt.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.14 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_13" data-multipleanswers="false">
                <div class="para" id="p-2409">Which of these are good alternatives to the accumulator variable and iterator variable names for the following prompt? For each string in <code class="code-inline tex2jax_ignore">wrds</code>, add ‘ed’ to the end of the word (to make the word past tense). Save these past tense words to a list called <code class="code-inline tex2jax_ignore">past_wrds</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_13_opt_a" data-correct="">
                  <div class="para" id="p-2410">Accumulator Variable: wrds_so_far     ; Iterator Variable: wrd</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_13_opt_a">
                  <div class="para" id="p-2411">Yes, this is the most clear combination of accumulator and iterator variables.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_13_opt_b">
                  <div class="para" id="p-2412">Accumulator Variable: wrds_so_far     ; Iterator Variable: x</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_13_opt_b">
                  <div class="para" id="p-2413">The iterator variable is not the clearest here, something else may be better.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_13_opt_c">
                  <div class="para" id="p-2414">Accumulator Variable: changed_wrds    ; Iterator Variable: ed</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_13_opt_c">
                  <div class="para" id="p-2415">The iterator variable is not the clearest here</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.15 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_14" data-multipleanswers="false">
                <div class="para" id="p-2416">Which of these are good alternatives to the accumulator variable and iterator variable names for the following prompt? Write code that will count the number of vowels in the sentence <code class="code-inline tex2jax_ignore">s</code> and assign the result to the variable <code class="code-inline tex2jax_ignore">num_vowels</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_14_opt_a">
                  <div class="para" id="p-2417">Accumulator Variable: count_so_far  ; Iterator Variable: l</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_14_opt_a">
                  <div class="para" id="p-2418">Though the accumulator variable is good, the iterator variable is not very clear.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_14_opt_b" data-correct="">
                  <div class="para" id="p-2419">Accumulator Variable: total_so_far  ; Iterator Variable: letter</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_14_opt_b">
                  <div class="para" id="p-2420">Yes! Both the accumulator and iterator variable are clear.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_14_opt_c">
                  <div class="para" id="p-2421">Accumulator Variable: n_v           ; Iterator Variable: letter</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_14_opt_c">
                  <div class="para" id="p-2422">Though the iterator variable is good, the accumulator variable is not very clear.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.16 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_15" data-multipleanswers="false">
                <div class="para" id="p-2423">Which of these are good alternatives to the accumulator variable and iterator variable names for the following prompt? Write code to sum up all of the numbers in the list <code class="code-inline tex2jax_ignore">seat_counts</code>. Store that number in the variable <code class="code-inline tex2jax_ignore">total_seat_counts</code>.</div>
                <li data-component="answer" id="foppff_1_question9_12_15_opt_a">
                  <div class="para" id="p-2424">Accumulator Variable: total_so_far        ; Iterator Variable: seat</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_15_opt_a">
                  <div class="para" id="p-2425">Though the accumulator variable is good, the iterator variable is not clear enough.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_15_opt_b" data-correct="">
                  <div class="para" id="p-2426">Accumulator Variable: total_seats_so_far  ; Iterator Variable: seat_count</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_15_opt_b">
                  <div class="para" id="p-2427">Yes, this is the most clear combination.</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_15_opt_c">
                  <div class="para" id="p-2428">Accumulator Variable: count               ; Iterator Variable: n</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_15_opt_c">
                  <div class="para" id="p-2429">Neither the accumulator nor iterator variable are clear enough. The accumulator variable is better, but could be more clear.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 9.12.17 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question9_12_16" data-multipleanswers="false">
                <div class="para" id="p-2430">Which of these are good alternatives to the accumulator variable and iterator variable names for the following prompt? Write code to print out each character of the string <code class="code-inline tex2jax_ignore">my_str</code> on a separate line.</div>
                <li data-component="answer" id="foppff_1_question9_12_16_opt_a">
                  <div class="para" id="p-2431">Accumulator Variable: character_so_far    ; Iterator Variable: char</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_16_opt_a">
                  <div class="para" id="p-2432">Incorrect, there is no accumulator variable neccessary</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_16_opt_b">
                  <div class="para" id="p-2433">Accumulator Variable: no variable needed  ; Iterator Variable: c</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_16_opt_b">
                  <div class="para" id="p-2434">Though no accumulator variable is needed, the iterator variable is not clear enough</div>
                </li>
                <li data-component="answer" id="foppff_1_question9_12_16_opt_c" data-correct="">
                  <div class="para" id="p-2435">Accumulator Variable: no variable needed  ; Iterator Variable: char</div>
                </li>
                <li data-component="feedback" id="foppff_1_question9_12_16_opt_c">
                  <div class="para" id="p-2436">Yes, there is no accumulator variable needed and the iterator variable is clear (char is a common short form of character)</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_dont-mutate-a-list-that-you-are-iterating-through</id>
      <title>Don’t Mutate A List That You Are Iterating Through</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_13_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_13_1_editor" data-question_label="" data-codelens="true">colors = ["Red", "Orange", "Yellow", "Green", "Blue", "Indigo", "Violet"]

for color in colors:
    print(color)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_13_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_13_2_editor" data-question_label="" data-codelens="true">colors = ["Red", "Orange", "Yellow", "Green", "Blue", "Indigo", "Violet"]
initials = []

for color in colors:
    initials.append(color[0])

print(initials)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_13_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_13_3_editor" data-question_label="" data-codelens="true">colors = ["Red", "Orange", "Yellow", "Green", "Blue", "Indigo", "Violet", "Purple", "Pink", "Brown", "Teal", "Turquois", "Peach", "Beige"]

for position in range(len(colors)):
    color = colors[position]
    print(color)
    if color[0] in ["P", "B", "T"]:
        del colors[position]

print(colors)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac9_13_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac9_13_4_editor" data-question_label="" data-codelens="true">colors = ["Red", "Orange", "Yellow", "Green", "Blue", "Indigo", "Violet"]

for color in colors:
    if color[0] in ["A", "E", "I", "O", "U"]:
        colors.append(color)

print(colors)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>transforming-sequences_summary</id>
      <title>Summary</title>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-10</id>
    <title>Nested Data and Nested Iteration</title>
    <subchapter>
      <id>nested-data_introduction-nested-data-and-nested-iteration</id>
      <title>Introduction: Nested Data and Nested Iteration</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_1_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_1_1_editor" data-question_label="" data-codelens="true">nested1 = [['a', 'b', 'c'],['d', 'e'],['f', 'g', 'h']]
print(nested1[0])
print(len(nested1))
nested1.append(['i'])
print("-------")
for L in nested1:
    print(L)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens10_1_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens10_1_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_1_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_1_2_editor" data-question_label="" data-codelens="true">nested1 = [['a', 'b', 'c'],['d', 'e'],['f', 'g', 'h']]
y = nested1[1]
print(y)
print(y[0])

print([10, 20, 30][1])
print(nested1[1][0])
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens10_1_2" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens10_1_2.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens10_1_3" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens10_1_3.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_1_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_1_3_editor" data-question_label="" data-codelens="true">nested2 = [{'a': 1, 'b': 3}, {'a': 5, 'c': 90, 5: 50}, {'b': 3, 'c': "yes"}]

#write code to print the value associated with key 'c' in the second dictionary (90)

#write code to print the value associated with key 'b' in the third dictionary

#add a fourth dictionary add the end of the list; print something to check your work.

#change the value associated with 'c' in the third dictionary from "yes" to "no"; print something to check your work
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_1_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_1_4_editor" data-question_label="" data-codelens="true">def square(x):
    return x*x

L = [square, abs, lambda x: x+1]

print("****names****")
for f in L:
    print(f)

print("****call each of them****")
for f in L:
    print(f(-2))

print("****just the first one in the list****")
print(L[0])
print(L[0](3))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens10_1_4" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens10_1_4.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_1_5">
                <div class="ac_question col-md-12" id="foppff_1_ac10_1_5_question">
                  <div class="para" id="p-2473"><dfn class="terminology">1.</dfn> Below, we have provided a list of lists. Use indexing to assign the element ‘horse’ to the variable name <code class="code-inline tex2jax_ignore">idx1</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_1_5_editor" data-question_label="" data-codelens="true">animals = [['cat', 'dog', 'mouse'], ['horse', 'cow', 'goat'], ['cheetah', 'giraffe', 'rhino']]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(idx1, 'horse', "Testing that idx1 was assigned correctly.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.1.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_1_6">
                <div class="ac_question col-md-12" id="foppff_1_ac10_1_6_question">
                  <div class="para" id="p-2474"><dfn class="terminology">2.</dfn> Using indexing, retrieve the string ‘willow’ from the list and assign that to the variable <code class="code-inline tex2jax_ignore">plant</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_1_6_editor" data-question_label="" data-codelens="true">data = ['bagel', 'cream cheese', 'breakfast', 'grits', 'eggs', 'bacon', [34, 9, 73, []], [['willow', 'birch', 'elm'], 'apple', 'peach', 'cherry']]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(plant, 'willow', "Testing that plant has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>nested-data_nested-dictionaries</id>
      <title>Nested Dictionaries</title>
      <question>
        <label>Checkpoint 10.2.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question10_2_1" data-multipleanswers="true"><div class="para" id="p-2478">Which of the following is a legal assignment statement, after the following code executes?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">d = {'key1': {'a': 5, 'c': 90, 5: 50}, 'key2':{'b': 3, 'c': "yes"}}
</code></pre></div><li data-component="answer" id="foppff_1_question10_2_1_opt_a" data-correct=""><div class="para" id="p-2479">d[5] = {1: 2, 3: 4}</div></li><li data-component="feedback" id="foppff_1_question10_2_1_opt_a"><div class="para" id="p-2480">5 is a valid key; {1:2, 3:4} is a dictionary with two keys, and is a valid value to associate with key 5.</div></li><li data-component="answer" id="foppff_1_question10_2_1_opt_b"><div class="para" id="p-2481">d[{1:2, 3:4}] = 5</div></li><li data-component="feedback" id="foppff_1_question10_2_1_opt_b"><div class="para" id="p-2482">Dictionary keys must be of immutable types. A dictionary can’t be used as a key in a dictionary.</div></li><li data-component="answer" id="foppff_1_question10_2_1_opt_c" data-correct=""><div class="para" id="p-2483">d[’key1’][’d’] = d[’key2’]</div></li><li data-component="feedback" id="foppff_1_question10_2_1_opt_c"><div class="para" id="p-2484">d[’key2’] is {’b’: 3, ’c’: "yes"}, a python object. It can be bound to the key ’d’ in a dictionary {’a’: 5, ’c’: 90, 5: 50}</div></li><li data-component="answer" id="foppff_1_question10_2_1_opt_d"><div class="para" id="p-2485">d[key2] = 3</div></li><li data-component="feedback" id="foppff_1_question10_2_1_opt_d"><div class="para" id="p-2486">key2 is an unbound variable here. d[’key2’] would be OK.</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.2.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_2_1">
                <div class="ac_question col-md-12" id="foppff_1_ac10_2_1_question">
                  <div class="para" id="p-2487"><dfn class="terminology">1.</dfn> Extract the value associated with the key color and assign it to the variable <code class="code-inline tex2jax_ignore">color</code>. Do not hard code this.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_2_1_editor" data-question_label="" data-codelens="true">info = {'personal_data':
         {'name': 'Lauren',
          'age': 20,
          'major': 'Information Science',
          'physical_features':
             {'color': {'eye': 'blue',
                        'hair': 'brown'},
              'height': "5'8"}
         },
       'other':
         {'favorite_colors': ['purple', 'green', 'blue'],
          'interested_in': ['social media', 'intellectual property', 'copyright', 'music', 'books']
         }
      }

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(color, {'eye': 'blue', 'hair': 'brown'}, "Testing that color has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>nested-data_processing-json-results</id>
      <title>Processing JSON results</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_3_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_3_1_editor" data-question_label="" data-codelens="true">import json
a_string = '\n\n\n{\n "resultCount":25,\n "results": [\n{"wrapperType":"track", "kind":"podcast", "collectionId":10892}]}'
print(a_string)
d = json.loads(a_string)
print("------")
print(type(d))
print(d.keys())
print(d['resultCount'])
# print(a_string['resultCount'])
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_3_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_3_2_editor" data-question_label="" data-codelens="true">import json
def pretty(obj):
    return json.dumps(obj, sort_keys=True, indent=2)

d = {'key1': {'c': True, 'a': 90, '5': 50}, 'key2':{'b': 3, 'c': "yes"}}

print(d)
print('--------')
print(pretty(d))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question10_3_1" data-multipleanswers="false">
                <div class="para" id="p-2494">Because we can only write strings into a file, if we wanted to convert a dictionary d into a json-formatted string so that we could store it in a file, what would we use?</div>
                <li data-component="answer" id="foppff_1_question10_3_1_opt_a">
                  <div class="para" id="p-2495">json.loads(d)</div>
                </li>
                <li data-component="feedback" id="foppff_1_question10_3_1_opt_a">
                  <div class="para" id="p-2496">loads turns a json-formatted string into a list or dictionary</div>
                </li>
                <li data-component="answer" id="foppff_1_question10_3_1_opt_b" data-correct="">
                  <div class="para" id="p-2497">json.dumps(d)</div>
                </li>
                <li data-component="feedback" id="foppff_1_question10_3_1_opt_b">
                  <div class="para" id="p-2498">dumps turns a list or dictionary into a json-formatted string</div>
                </li>
                <li data-component="answer" id="foppff_1_question10_3_1_opt_c">
                  <div class="para" id="p-2499">d.json()</div>
                </li>
                <li data-component="feedback" id="foppff_1_question10_3_1_opt_c">
                  <div class="para" id="p-2500">.json() tries to invoke the json method, but that method is not defined for dictionaries</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question10_3_2" data-multipleanswers="false"><div class="para" id="p-2501">Say we had a JSON string in the following format. How would you convert it so that it is a python list?</div> <div class="code-box" style="width: 100%; margin-left: 0%; margin-right: 0%;"><pre class="program"><code class="language-py">entertainment = """[{"Library Data": {"count": 3500, "rows": 10, "locations": 3}}, {"Movie Theater Data": {"count": 8, "rows": 25, "locations": 2}}]"""
</code></pre></div><li data-component="answer" id="foppff_1_question10_3_2_opt_a"><div class="para" id="p-2502">entertainment.json()</div></li><li data-component="feedback" id="foppff_1_question10_3_2_opt_a"><div class="para" id="p-2503">The .json() method is not defined for strings.</div></li><li data-component="answer" id="foppff_1_question10_3_2_opt_b"><div class="para" id="p-2504">json.dumps(entertainment)</div></li><li data-component="feedback" id="foppff_1_question10_3_2_opt_b"><div class="para" id="p-2505">dumps (dump to string) turns a list or dictionary into a json-formatted string</div></li><li data-component="answer" id="foppff_1_question10_3_2_opt_c" data-correct=""><div class="para" id="p-2506">json.loads(entertainment)</div></li><li data-component="feedback" id="foppff_1_question10_3_2_opt_c"><div class="para" id="p-2507">loads (load from string) turns a json-formatted string into a list or dictionary</div></li></ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>nested-data_nested-iteration</id>
      <title>Nested Iteration</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_4_1_editor" data-question_label="" data-codelens="true">nested1 = [['a', 'b', 'c'],['d', 'e'],['f', 'g', 'h']]
for x in nested1:
    print("level1: ")
    for y in x:
        print("     level2: " + y)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_clens10_4_1" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/clens10_4_1.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="foppff_1_pp10_4_1">
                <div class="parsons_question parsons-text">
                  <div class="para" id="p-2511">Now try rearranging these code fragments to make a function that counts all the <em class="emphasis">leaf</em> items in a nested list like nested1 above, the items at the lowest level of nesting (8 of them in nested1).</div>
                </div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-noindent="true">def count_leaves(n):
---
    count = 0
---
    for L in n:
---
        for x in L:
---
            count = count + 1
---
    return count</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.4.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_4_2">
                <div class="ac_question col-md-12" id="foppff_1_ac10_4_2_question">
                  <div class="para" id="p-2512"><dfn class="terminology">2.</dfn> Below, we have provided a list of lists that contain information about people. Write code to create a new list that contains every person’s last name, and save that list as <code class="code-inline tex2jax_ignore">last_names</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_4_2_editor" data-question_label="" data-codelens="true">info = [['Tina', 'Turner', 1939, 'singer'], ['Matt', 'Damon', 1970, 'actor'], ['Kristen', 'Wiig', 1973, 'comedian'], ['Michael', 'Phelps', 1985, 'swimmer'], ['Barack', 'Obama', 1961, 'president']]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(last_names, ['Turner', 'Damon', 'Wiig', 'Phelps', 'Obama'], "Testing that last_names was created correctly.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.4.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_4_3">
                <div class="ac_question col-md-12" id="foppff_1_ac10_4_3_question">
                  <div class="para" id="p-2513"><dfn class="terminology">3.</dfn> Below, we have provided a list of lists named <code class="code-inline tex2jax_ignore">L</code>. Use nested iteration to save every string containing “b” into a new list named <code class="code-inline tex2jax_ignore">b_strings</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_4_3_editor" data-question_label="" data-codelens="true">L = [['apples', 'bananas', 'oranges', 'blueberries', 'lemons'], ['carrots', 'peas', 'cucumbers', 'green beans'], ['root beer', 'smoothies', 'cranberry juice']]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(b_strings, ['bananas', 'blueberries', 'cucumbers', 'green beans', 'root beer', 'cranberry juice'], "Testing that b_strings was created correctly.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>nested-data_structuring-nested-data</id>
      <title>Structuring Nested Data</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_5_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_5_1_editor" data-question_label="" data-codelens="true">nested1 = [1, 2, ['a', 'b', 'c'],['d', 'e'],['f', 'g', 'h']]
for x in nested1:
  print("level1: ")
  for y in x:
    print(f" level2: {y}")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_5_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_5_2_editor" data-question_label="" data-codelens="true">nested1 = [1, 2, ['a', 'b', 'c'],['d', 'e'],['f', 'g', 'h']]
for x in nested1:
  print("level1: ")
  if type(x) is list:
    for y in x:
      print(f" level2: {y}")
  else:
    print(x)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>nested-data_deep-and-shallow-copies</id>
      <title>Deep and Shallow Copies</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_6_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_6_1_editor" data-question_label="" data-codelens="true">original = [['dogs', 'puppies'], ['cats', "kittens"]]
copied_version = original[:]
print(copied_version)
print(copied_version is original)
print(copied_version == original)
original[0].append(["canines"])
print(original)
print("-------- Now look at the copied version -----------")
print(copied_version)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_6_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_6_2_editor" data-question_label="" data-codelens="true">original = [['dogs', 'puppies'], ['cats', "kittens"]]
copied_outer_list = []
for inner_list in original:
    copied_inner_list = []
    for item in inner_list:
        copied_inner_list.append(item)
    copied_outer_list.append(copied_inner_list)
print(copied_outer_list)
original[0].append(["canines"])
print(original)
print("-------- Now look at the copied version -----------")
print(copied_outer_list)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_6_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_6_3_editor" data-question_label="" data-codelens="true">original = [['dogs', 'puppies'], ['cats', "kittens"]]
copied_outer_list = []
for inner_list in original:
    copied_inner_list = inner_list[:]
    copied_outer_list.append(copied_inner_list)
print(copied_outer_list)
original[0].append(["canines"])
print(original)
print("-------- Now look at the copied version -----------")
print(copied_outer_list)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac10_6_4">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac10_6_4_editor" data-question_label="" data-codelens="true">import copy
original = [['canines', ['dogs', 'puppies']], ['felines', ['cats', 'kittens']]]
shallow_copy_version = original[:]
deeply_copied_version = copy.deepcopy(original)
original.append("Hi there")
original[0].append(["marsupials"])
print("-------- Original -----------")
print(original)
print("-------- deep copy -----------")
print(deeply_copied_version)
print("-------- shallow copy -----------")
print(shallow_copy_version)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>nested-data_chapter-assessment</id>
      <title>Chapter Assessment</title>
      <question>
        <label>Checkpoint 10.7.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac17_6_1">
                <div class="ac_question col-md-12" id="foppff_1_ac17_6_1_question">
                  <div class="para" id="p-2526">The variable <code class="code-inline tex2jax_ignore">nested</code> contains a nested list. Assign ‘snake’ to the variable <code class="code-inline tex2jax_ignore">output</code> using indexing.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac17_6_1_editor" data-question_label="" data-codelens="true">nested = [['dog', 'cat', 'horse'], ['frog', 'turtle', 'snake', 'gecko'], ['hamster', 'gerbil', 'rat', 'ferret']]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(output, "snake", "Testing that output is assigned to correct value")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.7.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac17_6_2">
                <div class="ac_question col-md-12" id="foppff_1_ac17_6_2_question">
                  <div class="para" id="p-2527">Below, a list of lists is provided. Use in and not in tests to create variables with Boolean values. See comments for further instructions.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac17_6_2_editor" data-question_label="" data-codelens="true">lst = [['apple', 'orange', 'banana'], [5, 6, 7, 8, 9.9, 10], ['green', 'yellow', 'purple', 'red']]

#Test to see if 'yellow' is in the third list of lst. Save to variable ``yellow``


#Test to see if 4 is in the second list of lst. Save to variable ``four``


#Test to see if 'orange' is in the first element of lst. Save to variable ``orange``

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwo(self):
      self.assertEqual(yellow, True, "Testing that yellow is assigned to correct value")
   def testTwoB(self):
      self.assertEqual(four, False, "Testing that four is assigned to correct value")
   def testTwoC(self):
      self.assertEqual(orange, True, "Testing that orange is assigned to correct value")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.7.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac17_6_3">
                <div class="ac_question col-md-12" id="foppff_1_ac17_6_3_question">
                  <div class="para" id="p-2528">Below, we’ve provided a list of lists. Use in statements to create variables with Boolean values - see the ActiveCode window for further directions.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac17_6_3_editor" data-question_label="" data-codelens="true">L = [[5, 8, 7], ['hello', 'hi', 'hola'], [6.6, 1.54, 3.99], ['small', 'large']]

# Test if 'hola' is in the list L. Save to variable name test1

# Test if [5, 8, 7] is in the list L. Save to variable name test2

# Test if 6.6 is in the third element of list L. Save to variable name test3

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testA(self):
      self.assertEqual(test1, False, "Testing that test1 has the correct value.")
   def testB(self):
      self.assertEqual(test2, True, "Testing that test2 has the correct value.")
   def testC(self):
      self.assertEqual(test3, True, "Testing that test3 has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.7.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac17_6_4">
                <div class="ac_question col-md-12" id="foppff_1_ac17_6_4_question">
                  <div class="para" id="p-2529">Provided is a nested data structure. Follow the instructions in the comments below. Do not hard code.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac17_6_4_editor" data-question_label="" data-codelens="true">nested = {'data': ['finding', 23, ['exercises', 'hangout', 34]], 'window': ['part', 'whole', [], 'sum', ['math', 'calculus', 'algebra', 'geometry', 'statistics',['physics', 'chemistry', 'biology']]]}

# Check to see if the string 'data' is a key in nested, if it is, assign True to the variable data, otherwise assign False.

# Check to see if the integer 24 is in the value of the key data, if it is then assign to the variable twentyfour the value of True, otherwise False.

# Check to see that the string 'whole' is not in the value of the key window. If it's not, then assign to the variable whole the value of True, otherwise False.

# Check to see if the string 'physics' is a key in the dictionary nested. If it is, assign to the variable physics, the value of True, otherwise False.

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(data, True, "Testing that data has the correct value.")
   def testTwo(self):
      self.assertEqual(twentyfour, False, "Testing that twentyfour has the correct value.")
   def testThree(self):
      self.assertEqual(whole, False, "Testing that whole has the correct value.")
   def testFour(self):
      self.assertEqual(physics, False, "Testing that physics has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.7.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac17_6_5">
                <div class="ac_question col-md-12" id="foppff_1_ac17_6_5_question">
                  <div class="para" id="p-2530">The variable <code class="code-inline tex2jax_ignore">nested_d</code> contains a nested dictionary with the gold medal counts for the top four countries in the past three Olympics. Assign the value of Great Britain’s gold medal count from the London Olympics to the variable <code class="code-inline tex2jax_ignore">london_gold</code>. Use indexing. Do not hardcode.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac17_6_5_editor" data-question_label="" data-codelens="true">nested_d = {'Beijing':{'China':51, 'USA':36, 'Russia':22, 'Great Britain':19}, 'London':{'USA':46, 'China':38, 'Great Britain':29, 'Russia':22}, 'Rio':{'USA':35, 'Great Britain':22, 'China':20, 'Germany':13}}

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(london_gold, 29, "Testing that london_gold is assigned to correct value")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.7.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac17_6_6">
                <div class="ac_question col-md-12" id="foppff_1_ac17_6_6_question">
                  <div class="para" id="p-2531">Below, we have provided a nested dictionary. Index into the dictionary to create variables that we have listed in the ActiveCode window.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac17_6_6_editor" data-question_label="" data-codelens="true">sports = {'swimming': ['butterfly', 'breaststroke', 'backstroke', 'freestyle'], 'diving': ['springboard', 'platform', 'synchronized'], 'track': ['sprint', 'distance', 'jumps', 'throws'], 'gymnastics': {'women':['vault', 'floor', 'uneven bars', 'balance beam'], 'men': ['vault', 'parallel bars', 'floor', 'rings']}}

# Assign the string 'backstroke' to the name v1

# Assign the string 'platform' to the name v2

# Assign the list ['vault', 'floor', 'uneven bars', 'balance beam'] to the name v3

# Assign the string 'rings' to the name v4

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testA(self):
      self.assertEqual(v1, 'backstroke', "Testing that v1 was created correctly.")
      self.assertNotIn("v1 = 'backstroke'", self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
      self.assertNotIn('v1 = "backstroke"', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
   def testB(self):
      self.assertEqual(v2, 'platform', "Testing that v2 was created correctly.")
      self.assertNotIn('v2 = "platform"', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
      self.assertNotIn("v2 = 'platform'", self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
   def testC(self):
      self.assertEqual(v3, ['vault', 'floor', 'uneven bars', 'balance beam'], "Testing that v3 was created correctly.")
      self.assertNotIn("v3 = ['vault', 'floor', 'uneven bars', 'balance beam']", self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
   def testD(self):
      self.assertEqual(v4, 'rings', "Testing that v4 was created correctly.")
      self.assertNotIn("v4 = 'rings'", self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
      self.assertNotIn('v4 = "rings"', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.7.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac17_6_7">
                <div class="ac_question col-md-12" id="foppff_1_ac17_6_7_question">
                  <div class="para" id="p-2532">Given the dictionary, <code class="code-inline tex2jax_ignore">nested_d</code>, save the medal count for the USA from all three Olympics in the dictionary to the list <code class="code-inline tex2jax_ignore">US_count</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac17_6_7_editor" data-question_label="" data-codelens="true">nested_d = {'Beijing':{'China':51, 'USA':36, 'Russia':22, 'Great Britain':19}, 'London':{'USA':46, 'China':38, 'Great Britain':29, 'Russia':22}, 'Rio':{'USA':35, 'Great Britain':22, 'China':20, 'Germany':13}}

US_count = []


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFour(self):
      self.assertEqual(sorted(US_count), [35, 36, 46], "Testing that US_count is assigned to correct values.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.7.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac17_6_8">
                <div class="ac_question col-md-12" id="foppff_1_ac17_6_8_question">
                  <div class="para" id="p-2533">Iterate through the contents of <code class="code-inline tex2jax_ignore">l_of_l</code> and assign the third element of sublist to a new list called <code class="code-inline tex2jax_ignore">third</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac17_6_8_editor" data-question_label="" data-codelens="true">l_of_l = [['purple', 'mauve', 'blue'], ['red', 'maroon', 'blood orange', 'crimson'], ['sea green', 'cornflower', 'lavender', 'indigo'], ['yellow', 'amarillo', 'mac n cheese', 'golden rod']]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(third, ['blue', 'blood orange', 'lavender', 'mac n cheese'], "Testing that third has the correct list assigned to it.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 10.7.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac17_6_9">
                <div class="ac_question col-md-12" id="foppff_1_ac17_6_9_question">
                  <div class="para" id="p-2534">Given below is a list of lists of athletes. Create a list, <code class="code-inline tex2jax_ignore">t</code>, that saves only the athlete’s name if it contains the letter “t”. If it does not contain the letter “t”, save the athlete name into list <code class="code-inline tex2jax_ignore">other</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac17_6_9_editor" data-question_label="" data-codelens="true">athletes = [['Phelps', 'Lochte', 'Schooling', 'Ledecky', 'Franklin'], ['Felix', 'Bolt', 'Gardner', 'Eaton'], ['Biles', 'Douglas', 'Hamm', 'Raisman', 'Mikulak', 'Dalton']]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFive(self):
      self.assertEqual(t, ['Lochte', 'Bolt', 'Eaton', 'Dalton'], "Testing that t is assigned to correct values.")
   def testFiveA(self):
      self.assertEqual(other, ['Phelps', 'Schooling', 'Ledecky', 'Franklin', 'Felix', 'Gardner', 'Biles', 'Douglas', 'Hamm', 'Raisman', 'Mikulak'], "Testing that other is assigned to correct values.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-11</id>
    <title>Files</title>
    <subchapter>
      <id>files_introduction-working-with-data-files</id>
      <title>Introduction: Working with Data Files</title>
    </subchapter>
    <subchapter>
      <id>files_reading-a-file</id>
      <title>Reading a File</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_2_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_2_1_editor" data-question_label="" data-codelens="true">fileref = open("olympics.txt", "r")
## other code here that refers to variable fileref
fileref.close()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>files_alternative-file-reading-methods</id>
      <title>Alternative File Reading Methods</title>
      <question>
        <label>Checkpoint 11.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_3_1">
                <div class="ac_question col-md-12" id="foppff_1_ac11_3_1_question">
                  <div class="para logical" id="p-2557">
                    <ol class="decimal">
                      <li id="li-293">
                        <div class="para" id="p-2558">Using the file <code class="code-inline tex2jax_ignore">school_prompt2.txt</code>, find the number of characters in the file and assign that value to the variable <code class="code-inline tex2jax_ignore">num_char</code>.</div>
                      </li>
                    </ol>
                  </div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_3_1_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_char, 537, "Testing that num_char has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_3_2">
                <div class="ac_question col-md-12" id="foppff_1_ac11_3_2_question">
                  <div class="para logical" id="p-2559">
                    <ol class="decimal">
                      <li id="li-294">
                        <div class="para" id="p-2560">Find the number of lines in the file, <code class="code-inline tex2jax_ignore">travel_plans2.txt</code>, and assign it to the variable <code class="code-inline tex2jax_ignore">num_lines</code>.</div>
                      </li>
                    </ol>
                  </div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_3_2_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwo(self):
      self.assertEqual(num_lines, 11, "Testing that num_lines is assigned to correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.3.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_3_3">
                <div class="ac_question col-md-12" id="foppff_1_ac11_3_3_question">
                  <div class="para logical" id="p-2561">
                    <ol class="decimal">
                      <li id="li-295">
                        <div class="para" id="p-2562">Create a string called <code class="code-inline tex2jax_ignore">first_forty</code> that is comprised of the first 40 characters of <code class="code-inline tex2jax_ignore">emotion_words2.txt</code>.</div>
                      </li>
                    </ol>
                  </div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_3_3_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(first_forty, 'Sad upset blue down melancholy somber bi', "Testing that first_forty was created correctly.")
myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>files_iterating-over-lines-in-a-file</id>
      <title>Iterating over lines in a file</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_4_1_editor" data-question_label="" data-codelens="true">olypmicsfile = open("olypmics.txt", "r")

for aline in olypmicsfile.readlines():
    values = aline.split(",")
    print(values[0], "is from", values[3], "and is on the roster for", values[4])

olypmicsfile.close()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_4_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_4_2_editor" data-question_label="" data-codelens="true">olypmicsfile = open("olypmics.txt", "r")

for aline in olypmicsfile:
    values = aline.split(",")
    print(values[0], "is from", values[3], "and is on the roster for", values[4])

olypmicsfile.close()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.4.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_4_3">
                <div class="ac_question col-md-12" id="foppff_1_ac11_4_3_question">
                  <div class="para logical" id="p-2569">
                    <ol class="decimal">
                      <li id="li-296">
                        <div class="para" id="p-2570">Write code to find out how many lines are in the file <code class="code-inline tex2jax_ignore">emotion_words.txt</code> as shown above. Save this value to the variable <code class="code-inline tex2jax_ignore">num_lines</code>. Do not use the len method.</div>
                      </li>
                    </ol>
                  </div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_4_3_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_lines, 7, "Testing that num_lines was assigned to the correct value.")
      self.assertNotIn('len', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>files_finding-a-file-in-your-filesystem</id>
      <title>Finding a File in your Filesystem</title>
      <question>
        <label>Checkpoint 11.5.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question11_5_1" data-multipleanswers="false">
                <div class="para" id="p-2578">Say you are in a directory called Project. In it, you have a file with your Python code. You would like to read in data from a file called “YearlyProjections.csv” which is in a folder called CompanyData, which is inside of Project. What is the best way to open the file in your Python program?</div>
                <li data-component="answer" id="foppff_1_question11_5_1_opt_a">
                  <div class="para" id="p-2579">open("YearlyProjections.csv", "r")</div>
                </li>
                <li data-component="feedback" id="foppff_1_question11_5_1_opt_a">
                  <div class="para" id="p-2580">This would try to open a file inside of Project (but that is not where the file is.)</div>
                </li>
                <li data-component="answer" id="foppff_1_question11_5_1_opt_b">
                  <div class="para" id="p-2581">open("../CompanyData/YearlyProjections.csv", "r")</div>
                </li>
                <li data-component="feedback" id="foppff_1_question11_5_1_opt_b">
                  <div class="para" id="p-2582">This would go to the parent directory of Project and look for a subdirectory of that called CompanyData. But CompanyData is inside Project so it wouldn’t be found.</div>
                </li>
                <li data-component="answer" id="foppff_1_question11_5_1_opt_c" data-correct="">
                  <div class="para" id="p-2583">open("CompanyData/YearlyProjections.csv", "r")</div>
                </li>
                <li data-component="feedback" id="foppff_1_question11_5_1_opt_c">
                  <div class="para" id="p-2584">Yes, this is how you can access the file!</div>
                </li>
                <li data-component="answer" id="foppff_1_question11_5_1_opt_d">
                  <div class="para" id="p-2585">open("Project/CompanyData/YearlyProjections.csv", "r")</div>
                </li>
                <li data-component="feedback" id="foppff_1_question11_5_1_opt_d">
                  <div class="para" id="p-2586">This would try to find a subdirectory Project of the current directory called Project.</div>
                </li>
                <li data-component="answer" id="foppff_1_question11_5_1_opt_e">
                  <div class="para" id="p-2587">open("../YearlyProjections.csv", "r")</div>
                </li>
                <li data-component="feedback" id="foppff_1_question11_5_1_opt_e">
                  <div class="para" id="p-2588">Remember that ’..’ will bring you up one level to the parent directory. This would try to open a csv file in the parent directory of Project (but that is not where the file is.)</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.5.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone">
              <ul data-component="multiplechoice" id="foppff_1_question11_5_2" data-multipleanswers="true">
                <div class="para" id="p-2589">Which of the following paths are relative file paths?</div>
                <li data-component="answer" id="foppff_1_question11_5_2_opt_a" data-correct="">
                  <div class="para" id="p-2590">"Stacy/Applications/README.txt"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question11_5_2_opt_a">
                  <div class="para" id="p-2591">Yes, this is a relative file path. You can tell by the lack of "/" at the beginning of the path.</div>
                </li>
                <li data-component="answer" id="foppff_1_question11_5_2_opt_b">
                  <div class="para" id="p-2592">"/Users/Raquel/Documents/graduation_plans.doc"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question11_5_2_opt_b">
                  <div class="para" id="p-2593">This is an absolute file path. All absolute file paths start with "/".</div>
                </li>
                <li data-component="answer" id="foppff_1_question11_5_2_opt_c">
                  <div class="para" id="p-2594">"/private/tmp/swtag.txt"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question11_5_2_opt_c">
                  <div class="para" id="p-2595">This is an absolute file path. Not all absolute file paths contain "User"! Instead, check to see if the path starts with "/".</div>
                </li>
                <li data-component="answer" id="foppff_1_question11_5_2_opt_d" data-correct="">
                  <div class="para" id="p-2596">"ScienceData/ProjectFive/experiment_data.csv"</div>
                </li>
                <li data-component="feedback" id="foppff_1_question11_5_2_opt_d">
                  <div class="para" id="p-2597">Yes, this is a relative file path. You can tell by the lack of "/" at the beginning of the path.</div>
                </li>
              </ul>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>files_using-with-for-files</id>
      <title>Using <code class="code-inline tex2jax_ignore">with</code> for Files</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_6_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_6_1_editor" data-question_label="" data-codelens="true">with open('mydata.txt', 'r') as md:
    for line in md:
        print(line)
# continue on with other code
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_6_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_6_2_editor" data-question_label="" data-codelens="true">md = open('mydata.txt', 'r')
for line in md:
    print(line)
md.close()
# continue with other code
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>files_recipe-for-reading-and-processing-a-file</id>
      <title>Recipe for Reading and Processing a File</title>
    </subchapter>
    <subchapter>
      <id>files_writing-text-files</id>
      <title>Writing Text Files</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_8_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_8_1_editor" data-question_label="" data-codelens="true">for number in range(1, 13):
    square = number * number
    print(square)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_8_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_8_2_editor" data-question_label="" data-codelens="true">filename = "squared_numbers.txt"
outfile = open(filename, "w")

for number in range(1, 13):
    square = number * number
    outfile.write(str(square) + "\n")

outfile.close()

infile = open(filename, "r")
print(infile.read()[:10])
infile.close()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>files_csv-format</id>
      <title>CSV Format</title>
    </subchapter>
    <subchapter>
      <id>files_reading-in-data-from-a-csv-file</id>
      <title>Reading in data from a CSV File</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_10_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_10_1_editor" data-question_label="" data-codelens="true">fileconnection = open("olympics.txt", 'r')
lines = fileconnection.readlines()
header = lines[0]
field_names = header.strip().split(',')
print(field_names)
for row in lines[1:]:
  vals = row.strip().split(',')
  if vals[5] != "NA":
    print(f"{vals[0]}: {vals[4]}; {vals[5]}")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>files_writing-data-to-a-csv-file</id>
      <title>Writing data to a CSV File</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_12_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_12_1_editor" data-question_label="" data-codelens="true">n = [0] * 12
for i in range(1,13):
  n[i-1] = i *12
outfile = open("Multiples of 12", "w")
for j in range(0, len(n)):
  outfile.write(str(j+1) + ',' + str(n[j]))
  # +1 to j since the array starts at 0 and we start counting at 1
  outfile.write('\n')
outfile.close()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_12_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_12_3_editor" data-question_label="" data-codelens="true">olympians = [("John Aalberg", 31, "Cross Country Skiing"),
("Minna Maarit Aalto", 30, "Sailing"),
("Win Valdemar Aaltonen", 54, "Art Competitions"),
("Wakako Abe", 18, "Cycling")]

outfile = open("reduced_olympics.csv", "w")
# output the header row
outfile.write('Name,Age,Sport')
outfile.write('\n')
# output each of the rows:
for olympian in olympians:
  row_string = f"{olympian[0]},{olympian[1]},{olympian[2]}"
  outfile.write(row_string)
  outfile.write('\n')
outfile.close()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_12_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_12_2_editor" data-question_label="" data-codelens="true">olympians = [("John Aalberg", 31, "Cross Country Skiing, 15KM"),
("Minna Maarit Aalto", 30, "Sailing"),
("Win Valdemar Aaltonen", 54, "Art Competitions"),
("Wakako Abe", 18, "Cycling")]

outfile = open("reduced_olympics2.csv", "w")
# output the header row
outfile.write('"Name","Age","Sport"')
outfile.write('\n')
# output each of the rows:
for olympian in olympians:
  row_string = f'"{olympian[0]}", "{olympian[1]}", "{olympian[2]}"'
  outfile.write(row_string)
  outfile.write('\n')
outfile.close()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>files_tips-on-handling-files</id>
      <title>Tips on Handling Files</title>
    </subchapter>
    <subchapter>
      <id>files_glossary</id>
      <title>Glossary</title>
    </subchapter>
    <subchapter>
      <id>files_chapter-assessment</id>
      <title>Chapter Assessment</title>
      <question>
        <label>Checkpoint 11.14.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_14_1">
                <div class="ac_question col-md-12" id="foppff_1_ac11_14_1_question">
                  <div class="para" id="p-2653">The textfile, <code class="code-inline tex2jax_ignore">travel_plans.txt</code>, contains the summer travel plans for someone with some commentary. Find the total number of characters in the file and save to the variable <code class="code-inline tex2jax_ignore">num</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_14_1_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num, 316, "Testing that num value is assigned to correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.14.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_14_2">
                <div class="ac_question col-md-12" id="foppff_1_ac11_14_2_question">
                  <div class="para" id="p-2654">We have provided a file called <code class="code-inline tex2jax_ignore">emotion_words.txt</code> that contains lines of words that describe emotions. Find the total number of words in the file and assign this value to the variable <code class="code-inline tex2jax_ignore">num_words</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_14_2_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_words, 48, "Testing that num_words was assigned to the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.14.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_14_3">
                <div class="ac_question col-md-12" id="foppff_1_ac11_14_3_question">
                  <div class="para" id="p-2655">Assign to the variable <code class="code-inline tex2jax_ignore">num_lines</code> the number of lines in the file <code class="code-inline tex2jax_ignore">school_prompt.txt</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_14_3_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_lines, 10, "Testing that num_lines has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.14.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_14_4">
                <div class="ac_question col-md-12" id="foppff_1_ac11_14_4_question">
                  <div class="para" id="p-2656">Assign the first 30 characters of <code class="code-inline tex2jax_ignore">school_prompt.txt</code> as a string to the variable <code class="code-inline tex2jax_ignore">beginning_chars</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_14_4_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(len(beginning_chars), 30, "Testing that beginning_chars has the correct length.")
      self.assertEqual(beginning_chars, "Writing essays for school can ", "Testing that beginning_chars has the correct string.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.14.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_14_5">
                <div class="ac_question col-md-12" id="foppff_1_ac11_14_5_question">
                  <div class="para" id="p-2657"><dfn class="terminology">Challenge:</dfn> Using the file <code class="code-inline tex2jax_ignore">school_prompt.txt</code>, assign the third word of every line to a list called <code class="code-inline tex2jax_ignore">three</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_14_5_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(three, ['for', 'find', 'to', 'many', 'they', 'solid', 'for', 'have', 'some', 'ups,'], "Testing that three has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.14.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_14_6">
                <div class="ac_question col-md-12" id="foppff_1_ac11_14_6_question">
                  <div class="para" id="p-2658"><dfn class="terminology">Challenge:</dfn> Create a list called <code class="code-inline tex2jax_ignore">emotions</code> that contains the first word of every line in <code class="code-inline tex2jax_ignore">emotion_words.txt</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_14_6_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(emotions, ['Sad', 'Angry', 'Happy', 'Confused', 'Excited', 'Scared', 'Nervous'], "Testing that emotions was created correctly.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.14.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_14_7">
                <div class="ac_question col-md-12" id="foppff_1_ac11_14_7_question">
                  <div class="para" id="p-2659">Assign the first 33 characters from the textfile, <code class="code-inline tex2jax_ignore">travel_plans.txt</code> to the variable <code class="code-inline tex2jax_ignore">first_chars</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_14_7_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testFive(self):
      self.assertEqual(first_chars, "This summer I will be travelling.", "Testing that first_chars is assigned to correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.14.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_14_8">
                <div class="ac_question col-md-12" id="foppff_1_ac11_14_8_question">
                  <div class="para" id="p-2660"><dfn class="terminology">Challenge:</dfn> Using the file <code class="code-inline tex2jax_ignore">school_prompt.txt</code>, if the character ‘p’ is in a word, then add the word to a list called <code class="code-inline tex2jax_ignore">p_words</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_14_8_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(p_words, ['topic', 'point', 'papers,', 'ups,', 'scripts.'], "Testing that p_words has the correct list.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 11.14.9 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac11_14_9">
                <div class="ac_question col-md-12" id="foppff_1_ac11_14_9_question"><div class="para" id="p-2661">Read in the contents of the file <code class="code-inline tex2jax_ignore">SP500.txt</code> which has monthly data for 2016 and 2017 about the S&amp;P 500 closing prices as well as some other financial indicators, including the “Long Term Interest Rate”, which is interest rate paid on 10-year U.S. government bonds.</div> <div class="para" id="p-2662">Write a program that computes the average closing price (the second column, labeled SP500) and the highest long-term interest rate. Both should be computed only for the period from June 2016 through May 2017. Save the results in the variables <code class="code-inline tex2jax_ignore">mean_SP</code> and <code class="code-inline tex2jax_ignore">max_interest</code>.</div></div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac11_14_9_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertLess(abs(mean_SP - 2237), 0.5, "Testing that mean_SP is within 0.5 of the correct value. Make sure to use only the correct 12 month period.")
      self.assertEqual(max_interest, 2.49, "Testing the max_interest is correct. Make sure to use only the correct 12 month period.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-12</id>
    <title>Exceptions</title>
    <subchapter>
      <id>exceptions_when-to-use-try-except</id>
      <title>When to use try/except</title>
    </subchapter>
    <subchapter>
      <id>exceptions_standard-exceptions79_index-0</id>
      <title>Standard Exceptions</title>
    </subchapter>
    <subchapter>
      <id>exceptions_chapter-assessment</id>
      <title>Chapter Assessment</title>
      <question>
        <label>Checkpoint 12.3.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac12_04_1">
                <div class="ac_question col-md-12" id="foppff_1_ac12_04_1_question">
                  <div class="para" id="p-2674">The code below takes the list of country, <code class="code-inline tex2jax_ignore">country</code>, and searches to see if it is in the dictionary <code class="code-inline tex2jax_ignore">gold</code> which shows some countries who won gold during the Olympics. However, this code currently does not work. Correctly add try/except clause in the code so that it will correctly populate the list, <code class="code-inline tex2jax_ignore">country_gold</code>, with either the number of golds won or the string “Did not get gold”.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac12_04_1_editor" data-question_label="" data-codelens="true">gold = {"US":46, "Fiji":1, "Great Britain":27, "Cuba":5, "Thailand":2, "China":26, "France":10}
country = ["Fiji", "Chile", "Mexico", "France", "Norway", "US"]
country_gold = []

for x in country:
    country_gold.append(gold[x])
    country_gold.append("Did not get gold")

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOneA(self):
      self.assertEqual(country_gold, [1, 'Did not get gold', 'Did not get gold', 10, 'Did not get gold', 46], "Testing that country_gold is assigned to correct values")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 12.3.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac12_04_2">
                <div class="ac_question col-md-12" id="foppff_1_ac12_04_2_question">
                  <div class="para" id="p-2675">Provided is a buggy for loop that tries to accumulate some values out of some dictionaries. Insert a try/except so that the code passes.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac12_04_2_editor" data-question_label="" data-codelens="true">di = [{"Puppies": 17, 'Kittens': 9, "Birds": 23, 'Fish': 90, "Hamsters": 49}, {"Puppies": 23, "Birds": 29, "Fish": 20, "Mice": 20, "Snakes": 7}, {"Fish": 203, "Hamsters": 93, "Snakes": 25, "Kittens": 89}, {"Birds": 20, "Puppies": 90, "Snakes": 21, "Fish": 10, "Kittens": 67}]
total = 0
for diction in di:
    total = total + diction['Puppies']

print("Total number of puppies:", total)


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(total, 130, "Testing that total has the correct value.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 12.3.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac12_04_3">
                <div class="ac_question col-md-12" id="foppff_1_ac12_04_3_question">
                  <div class="para" id="p-2676">The list, <code class="code-inline tex2jax_ignore">numb</code>, contains integers. Write code that populates the list <code class="code-inline tex2jax_ignore">remainder</code> with the remainder of 36 divided by each number in <code class="code-inline tex2jax_ignore">numb</code>. For example, the first element should be 0, because 36/6 has no remainder. If there is an error, have the string “Error” appear in the <code class="code-inline tex2jax_ignore">remainder</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac12_04_3_editor" data-question_label="" data-codelens="true">numb = [6, 0, 36, 8, 2, 36, 0, 12, 60, 0, 45, 0, 3, 23]

remainder = []

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOneA(self):
      self.assertEqual(remainder, [0, 'Error', 0, 4, 0, 0, 'Error', 0, 36, 'Error', 36, 'Error', 0, 13], "Testing that remainder is assigned to correct values.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 12.3.4 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac12_04_4">
                <div class="ac_question col-md-12" id="foppff_1_ac12_04_4_question">
                  <div class="para" id="p-2677">Provided is buggy code, insert a try/except so that the code passes.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac12_04_4_editor" data-question_label="" data-codelens="true">lst = [2,4,10,42,12,0,4,7,21,4,83,8,5,6,8,234,5,6,523,42,34,0,234,1,435,465,56,7,3,43,23]

lst_three = []

for num in lst:
    if 3 % num == 0:
        lst_three.append(num)


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(lst_three, [1,3], "Testing that lst_three has the correct values.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 12.3.5 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac12_04_5">
                <div class="ac_question col-md-12" id="foppff_1_ac12_04_5_question">
                  <div class="para" id="p-2678">Write code so that the buggy code provided works using a try/except. When the codes does not work in the try, have it append to the list <code class="code-inline tex2jax_ignore">attempt</code> the string “Error”.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac12_04_5_editor" data-question_label="" data-codelens="true">full_lst = ["ab", 'cde', 'fgh', 'i', 'jkml', 'nop', 'qr', 's', 'tv', 'wxy', 'z']

attempt = []

for elem in full_lst:
    attempt.append(elem[1])

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(attempt, ['b', 'd', 'g', 'Error', 'k', 'o', 'r', 'Error', 'v', 'x', 'Error'], "Testing that attempt has the correct values.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 12.3.6 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac12_04_6">
                <div class="ac_question col-md-12" id="foppff_1_ac12_04_6_question">
                  <div class="para" id="p-2679">The following code tries to append the third element of each list in <code class="code-inline tex2jax_ignore">conts</code> to the new list <code class="code-inline tex2jax_ignore">third_countries</code>. Currently, the code does not work. Add a try/except clause so the code runs without errors, and the string ‘Continent does not have 3 countries’ is appended to <code class="code-inline tex2jax_ignore">third_countries</code> instead of producing an error.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac12_04_6_editor" data-question_label="" data-codelens="true">conts = [['Spain', 'France', 'Greece', 'Portugal', 'Romania', 'Germany'], ['USA', 'Mexico', 'Canada'], ['Japan', 'China', 'Korea', 'Vietnam', 'Cambodia'], ['Argentina', 'Chile', 'Brazil', 'Ecuador', 'Uruguay', 'Venezuela'], ['Australia'], ['Zimbabwe', 'Morocco', 'Kenya', 'Ethiopia', 'South Africa'], ['Antarctica']]

third_countries = []

for c in conts:
    third_countries.append(c[2])


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(third_countries, ['Greece', 'Canada', 'Korea', 'Brazil', 'Continent does not have 3 countries', 'Kenya', 'Continent does not have 3 countries'], "Testing that third_countries is created correctly.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 12.3.7 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac12_04_7">
                <div class="ac_question col-md-12" id="foppff_1_ac12_04_7_question">
                  <div class="para" id="p-2680">The buggy code below prints out the value of the sport in the list <code class="code-inline tex2jax_ignore">sport</code>. Use try/except so that the code will run properly. If the sport is not in the dictionary, <code class="code-inline tex2jax_ignore">ppl_play</code>, add it in with the value of 1.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac12_04_7_editor" data-question_label="" data-codelens="true">sport = ["hockey", "basketball", "soccer", "tennis", "football", "baseball"]

ppl_play = {"hockey":4, "soccer": 10, "football": 15, "tennis": 8}

for x in sport:

     print(ppl_play[x])

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOneA(self):
      self.assertEqual(sorted(ppl_play.items()), [('baseball', 1), ('basketball', 1), ('football', 15), ('hockey', 4), ('soccer', 10), ('tennis', 8)], "Testing that ppl_play is assigned to correct values.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 12.3.8 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac12_04_8">
                <div class="ac_question col-md-12" id="foppff_1_ac12_04_8_question">
                  <div class="para" id="p-2681">Provided is a buggy for loop that tries to accumulate some values out of some dictionaries. Insert a try/except so that the code passes. If the key is not there, initialize it in the dictionary and set the value to zero.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac12_04_8_editor" data-question_label="" data-codelens="true">di = [{"Puppies": 17, 'Kittens': 9, "Birds": 23, 'Fish': 90, "Hamsters": 49}, {"Puppies": 23, "Birds": 29, "Fish": 20, "Mice": 20, "Snakes": 7}, {"Fish": 203, "Hamsters": 93, "Snakes": 25, "Kittens": 89}, {"Birds": 20, "Puppies": 90, "Snakes": 21, "Fish": 10, "Kittens": 67}]
total = 0
for diction in di:
    total = total + diction['Puppies']

print("Total number of puppies:", total)


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      accum = 0
      for diction in di:
           if 'Puppies' in diction:
               accum += 1
      self.assertEqual(accum, 4, "Testing that every dictionary in di has the key 'Puppies'.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-13</id>
    <title>Defining your own Classes</title>
    <subchapter>
      <id>classes_introduction-classes-and-objects-the-basics</id>
      <title>Introduction: Classes and Objects - the Basics</title>
    </subchapter>
    <subchapter>
      <id>classes_objects-revisited</id>
      <title>Objects Revisited</title>
    </subchapter>
    <subchapter>
      <id>classes_user-defined-classes</id>
      <title>User Defined Classes</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_3_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_3_1_editor" data-question_label="" data-codelens="true">class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self):

        self.x = 0
        self.y = 0

p = Point()         # Instantiate an object of type Point
q = Point()         # and make a second point

print("Nothing seems to have happened with the points")
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_3_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_3_2_editor" data-question_label="" data-codelens="true">class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self):

        self.x = 0
        self.y = 0

p = Point()         # Instantiate an object of type Point
q = Point()         # and make a second point

print(p)
print(q)

print(p is q)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>CodeLens</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone codelens">
              <div class="cd_section" data-component="codelens" data-question_label="">
                <div class="pytutorVisualizer" id="foppff_1_ac13_3_3" data-params="{&quot;embeddedMode&quot;: true, &quot;lang&quot;: &quot;python&quot;, &quot;jumpToEnd&quot;: false}"/>
              </div>
              <script src="generated/trace/ac13_3_3.js"/>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>classes_adding-parameters-to-the-constructor</id>
      <title>Adding Parameters to the Constructor</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_4_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_4_1_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOneA(self):
      self.assertEqual(t.num1, 6, "Testing that t.num1 has correct number assigned.")
   def testOneB(self):
      self.assertEqual(t.num2, 10, "Testing that t.num2 has correct number assigned.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>classes_adding-other-methods-to-a-class</id>
      <title>Adding Other Methods to a Class</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_5_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_5_1_editor" data-question_label="" data-codelens="true">class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y


p = Point(7,6)
print(p.getX())
print(p.getY())
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_5_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_5_2_editor" data-question_label="" data-codelens="true">class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def distanceFromOrigin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5


p = Point(7,6)
print(p.distanceFromOrigin())
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_5_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_5_3_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(spider.arms, 4, "Testing that spider was assigned the correct number of arms.")
      self.assertEqual(spider.legs, 4, "Testing that spider was assigned the correct number of legs.")
      self.assertEqual(spidlimbs, 8, "Testing that spidlimbs was assigned correctly.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>classes_objects-as-arguments-and-parameters</id>
      <title>Objects as Arguments and Parameters</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_6_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_6_1_editor" data-question_label="" data-codelens="true">import math

class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def distanceFromOrigin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5

def distance(point1, point2):
    xdiff = point2.getX()-point1.getX()
    ydiff = point2.getY()-point1.getY()

    dist = math.sqrt(xdiff**2 + ydiff**2)
    return dist

p = Point(4,3)
q = Point(0,0)
print(distance(p,q))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_6_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_6_2_editor" data-question_label="" data-codelens="true">import math

class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def distanceFromOrigin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5

    def distance(self, point2):
        xdiff = point2.getX()-self.getX()
        ydiff = point2.getY()-self.getY()

        dist = math.sqrt(xdiff**2 + ydiff**2)
        return dist

p = Point(4,3)
q = Point(0,0)
print(p.distance(q))
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>classes_converting-an-object-to-a-string</id>
      <title>Converting an Object to a String</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_7_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_7_1_editor" data-question_label="" data-codelens="true">class Point:
  """ Point class for representing and manipulating x,y coordinates. """

  def __init__(self, initX, initY):
    self.x = initX
    self.y = initY

  def getX(self):
    return self.x

  def getY(self):
    return self.y

  def distanceFromOrigin(self):
    return ((self.x ** 2) + (self.y ** 2)) ** 0.5


p = Point(7,6)
print(p)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_7_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_7_2_editor" data-question_label="" data-codelens="true">class Point:
  """ Point class for representing and manipulating x,y coordinates. """

  def __init__(self, initX, initY):
    self.x = initX
    self.y = initY

  def getX(self):
    return self.x

  def getY(self):
    return self.y

  def distanceFromOrigin(self):
    return ((self.x ** 2) + (self.y ** 2)) ** 0.5

  def __str__(self):
    return f"x = {self.x}, y = {self.y}"

p = Point(7,6)
print(p)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_7_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_7_3_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

def testOne(self):
self.assertEqual(c1.__str__(), "Corn Flakes cereal is produced by Kellogg's and has 2 grams of
fiber in every serving!", "Testing that c1 prints correctly.")
def testTwo(self):
self.assertEqual(c2.__str__(), "Honey Nut Cheerios cereal is produced by General Mills and has
3 grams of fiber in every serving!", "Testing that c2 prints correctly.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>classes_instances-as-return-values</id>
      <title>Instances as Return Values</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_8_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_8_1_editor" data-question_label="" data-codelens="true">class Point:

    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def getX(self):
        return self.x

    def getY(self):
        return self.y

    def distanceFromOrigin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5

    def __str__(self):
        return f"x = {self.x}, y = {self.y}"

    def halfway(self, target):
        mx = (self.x + target.x)/2
        my = (self.y + target.y)/2
        return Point(mx, my)


p = Point(3,4)
q = Point(5,12)
mid = p.halfway(q)
# note that you would have exactly the same result if you instead wrote
# mid = q.halfway(p)
# because they are both Point objects, and the middle is the same no matter what
print(mid)
print(mid.getX())
print(mid.getY())
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>classes_class-variables-and-instance-variables</id>
      <title>Class Variables and Instance Variables</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_9_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_9_1_editor" data-question_label="" data-codelens="true">class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    printed_rep = "*"

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def graph(self):
        rows = []
        size = max(int(self.x), int(self.y)) + 2
        for j in range(size-1) :
            if (j+1) == int(self.y):
                special_row = str((j+1) % 10) + (" "*(int(self.x) -1)) + self.printed_rep
                rows.append(special_row)
            else:
                rows.append(str((j+1) % 10))
        rows.reverse()  # put higher values of y first
        x_axis = ""
        for i in range(size):
            x_axis += str(i % 10)
        rows.append(x_axis)

        return "\n".join(rows)


p1 = Point(2, 3)
p2 = Point(3, 12)
print(p1.graph())
print()
print(p2.graph())
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>classes_thinking-about-classes-and-instances</id>
      <title>Thinking About Classes and Instances</title>
    </subchapter>
    <subchapter>
      <id>classes_a-tamagotchi-game</id>
      <title>A Tamagotchi Game</title>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_11_1">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_11_1_editor" data-question_label="" data-codelens="true">from random import randrange

class Pet():
    boredom_decrement = 4
    hunger_decrement = 6
    boredom_threshold = 5
    hunger_threshold = 10
    sounds = ['Mrrp']
    def __init__(self, name = "Kitty"):
        self.name = name
        self.hunger = randrange(self.hunger_threshold)
        self.boredom = randrange(self.boredom_threshold)
        self.sounds = self.sounds[:] # copy the class attribute, so that when we make changes to
                                     # it, we won't affect the other Pets in the class

    def clock_tick(self):
        self.boredom += 1
        self.hunger += 1

    def mood(self):
        if self.hunger &lt;= self.hunger_threshold and self.boredom &lt;= self.boredom_threshold:
            return "happy"
        elif self.hunger &gt; self.hunger_threshold:
            return "hungry"
        else:
            return "bored"

    def __str__(self):
        state = f" I'm {self.name}. I feel {self.mood()}. Hunger {self.hunger} Boredom {self.boredom} Words {self.sounds}"
        return state

    def hi(self):
        print(self.sounds[randrange(len(self.sounds))])
        self.reduce_boredom()

    def teach(self, word):
        self.sounds.append(word)
        self.reduce_boredom()

    def feed(self):
        self.reduce_hunger()

    def reduce_hunger(self):
        self.hunger = max(0, self.hunger - self.hunger_decrement)

    def reduce_boredom(self):
        self.boredom = max(0, self.boredom - self.boredom_decrement)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_11_2">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_11_2_editor" data-question_label="" data-codelens="true">p1 = Pet("Fido")
print(p1)
for i in range(10):
p1.clock_tick()
print(p1)
p1.feed()
p1.hi()
p1.teach("Boo")
for i in range(10):
p1.hi()
print(p1)
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>ActiveCode</label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_11_3">
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_11_3_editor" data-question_label="" data-codelens="true">import sys
sys.setExecutionLimit(60000)

def whichone(petlist, name):
    for pet in petlist:
        if pet.name == name:
            return pet
    return None # no pet matched

def play():
    animals = []

    option = ""
    base_prompt = """
    Quit
    Adopt &lt;petname_with_no_spaces_please&gt;
    Greet &lt;petname&gt;
    Teach &lt;petname&gt; &lt;word&gt;
    Feed &lt;petname&gt;

    Choice: """
    feedback = ""

    while True:
        action = input(feedback + "\n" + base_prompt)
        feedback = ""
        words = action.split()
        if len(words) &gt; 0:
            command = words[0]
        else:
            command = None
        if command == "Quit":
            print("Exiting...")
            return
        elif command == "Adopt" and len(words) &gt; 1:
            if whichone(animals, words[1]):
                feedback += "You already have a pet with that name\n"
            else:
                animals.append(Pet(words[1]))
        elif command == "Greet" and len(words) &gt; 1:
            pet = whichone(animals, words[1])
            if not pet:
                feedback += "I didn't recognize that pet name. Please try again.\n"
                print()
            else:
                pet.hi()
        elif command == "Teach" and len(words) &gt; 2:
            pet = whichone(animals, words[1])
            if not pet:
                feedback += "I didn't recognize that pet name. Please try again."
            else:
                pet.teach(words[2])
        elif command == "Feed" and len(words) &gt; 1:
            pet = whichone(animals, words[1])
            if not pet:
                feedback += "I didn't recognize that pet name. Please try again."
            else:
                pet.feed()
        else:
            feedback+= "I didn't understand that. Please try again."

    for pet in animals:
        pet.clock_tick()
        feedback += "\n" + pet.__str__()


play()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>classes_glossary</id>
      <title>Glossary</title>
    </subchapter>
    <subchapter>
      <id>classes_chapter-assessment</id>
      <title>Chapter Assessment</title>
      <question>
        <label>Checkpoint 13.13.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_13_1">
                <div class="ac_question col-md-12" id="foppff_1_ac13_13_1_question">
                  <div class="para" id="p-2800">Define a class called <code class="code-inline tex2jax_ignore">Bike</code> that accepts a string and a float as input, and assigns those inputs respectively to two instance variables, <code class="code-inline tex2jax_ignore">color</code> and <code class="code-inline tex2jax_ignore">price</code>. Assign to the variable <code class="code-inline tex2jax_ignore">testOne</code> an instance of <code class="code-inline tex2jax_ignore">Bike</code> whose color is <dfn class="terminology">blue</dfn> and whose price is <dfn class="terminology">89.99</dfn>. Assign to the variable <code class="code-inline tex2jax_ignore">testTwo</code> an instance of Bike whose color is <dfn class="terminology">purple</dfn> and whose price is <dfn class="terminology">25.0</dfn>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_13_1_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(testOne.color, "blue", "Testing that testOne has the correct color assigned.")
      self.assertEqual(testOne.price, 89.99, "Testing that testOne has the correct price assigned.")

   def testTwo(self):
      self.assertEqual(testTwo.color, "purple", "Testing that testTwo has the correct color assigned.")
      self.assertEqual(testTwo.price, 25.0, "Testing that testTwo has the correct color assigned.")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 13.13.2 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_13_2">
                <div class="ac_question col-md-12" id="foppff_1_ac13_13_2_question">
                  <div class="para" id="p-2801">Create a class called <code class="code-inline tex2jax_ignore">AppleBasket</code> whose constructor accepts two inputs: a string representing a color, and a number representing a quantity of apples. The constructor should initialize two instance variables: <code class="code-inline tex2jax_ignore">apple_color</code> and <code class="code-inline tex2jax_ignore">apple_quantity</code>.  Write a class method called <code class="code-inline tex2jax_ignore">increase</code> that increases the quantity by <code class="code-inline tex2jax_ignore">1</code> each time it is invoked. You should also write a <code class="code-inline tex2jax_ignore">__str__</code> method for this class that returns a string of the format: <code class="code-inline tex2jax_ignore">"A basket of [quantity goes here] [color goes here] apples."</code> e.g. <code class="code-inline tex2jax_ignore">"A basket of 4 red apples."</code> or <code class="code-inline tex2jax_ignore">"A basket of 50 blue apples."</code> (Writing some test code that creates instances and assigns values to variables may help you solve this problem!)</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_13_2_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      tester = AppleBasket("red",4)
      self.assertEqual(tester.apple_quantity, 4, "Testing the initialization of the apple_quantity inst var.")
   def testTwo(self):
      tester = AppleBasket("red",4)
      tester.increase()
      self.assertEqual(tester.apple_quantity, 5, "Testing the increase method")
   def testThree(self):
      tester = AppleBasket("green",17)
      self.assertEqual(tester.__str__(),"A basket of 17 green apples.")


myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
      <question>
        <label>Checkpoint 13.13.3 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone explainer ac_section ">
              <div data-component="activecode" id="foppff_1_ac13_13_3">
                <div class="ac_question col-md-12" id="foppff_1_ac13_13_3_question">
                  <div class="para" id="p-2802">Define a class called <code class="code-inline tex2jax_ignore">BankAccount</code> that accepts the name you want associated with your bank account in a string, and an integer that represents the amount of money in the account. The constructor should initialize two instance variables from those inputs: <code class="code-inline tex2jax_ignore">name</code> and <code class="code-inline tex2jax_ignore">amt</code>. Add a string method so that when you print an instance of <code class="code-inline tex2jax_ignore">BankAccount</code>, you see <code class="code-inline tex2jax_ignore">"Your account, [name goes here], has [start_amt goes here] dollars."</code> Create an instance of this class with <code class="code-inline tex2jax_ignore">"Bob"</code> as the name and <code class="code-inline tex2jax_ignore">100</code> as the amount. Save this to the variable <code class="code-inline tex2jax_ignore">t1</code>.</div>
                </div>
                <textarea data-lang="python" data-timelimit="25000" data-audio="" data-coach="true" style="visibility: hidden;" id="foppff_1_ac13_13_3_editor" data-question_label="" data-codelens="true">=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(t1.__str__(), "Your account, Bob, has 100 dollars.", "Testing that t1 is assigned to correct value")

myTests().main()
</textarea>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
  </chapter>
  <chapter>
    <id>chapter-14</id>
    <title>Additional Resources</title>
    <subchapter>
      <id>additional_resources-command_line</id>
      <title>The Command Line</title>
      <question>
        <label>Checkpoint 14.1.1 </label>
        <htmlsrc>
          <div class="ptx-runestone-container">
            <div class="runestone parsons_section" style="max-width: none;">
              <div data-component="parsons" class="parsons" id="foppff_1_pp11_5_1">
                <div class="parsons_question parsons-text"><div class="para" id="p-2818">Using the following file structure, move into the <code class="code-inline tex2jax_ignore">src</code> directory, remove <code class="code-inline tex2jax_ignore">main.py</code>, add the file <code class="code-inline tex2jax_ignore">not_main.py</code>, and return to the <code class="code-inline tex2jax_ignore">home</code> directory:</div> <code class="code-inline tex2jax_ignore">
home/
    src/
        main.py
        README.md
    test/
        test_main.py
        README.md
    plans/
        whatever.txt
        old.txt
                </code></div>
                <pre class="parsonsblocks" data-question_label="" style="visibility: hidden;" data-language="python" data-noindent="true">ls #distractor
---
cd src
---
rm main.py
---
touch not_main.py
---
cd ..
---
main.py
README.md #distractor</pre>
              </div>
            </div>
          </div>
        </htmlsrc>
      </question>
    </subchapter>
    <subchapter>
      <id>additional_resources-intro-to-git</id>
      <title>Intro to Git</title>
    </subchapter>
    <subchapter>
      <id>additional_resources-advanced-git</id>
      <title>Advanced Git</title>
    </subchapter>
    <subchapter>
      <id>additional_resources-books-bookshelves</id>
      <title>Comprehensive Practice Program: Books and Bookshelves</title>
    </subchapter>
  </chapter>
</manifest>
